/* eslint-disable */
import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  AccessibilityBlocksDynamicZoneInput: any;
  CguBlocksDynamicZoneInput: any;
  ConfidentialityBlocksDynamicZoneInput: any;
  ContactUsBlocksDynamicZoneInput: any;
  ContractMenuServiceLinksDynamicZoneInput: any;
  CookieBlocksDynamicZoneInput: any;
  Date: any;
  DateTime: any;
  DropOffMapOpeningHoursBlocksDynamicZoneInput: any;
  EditoBlockEditoContentsDynamicZoneInput: any;
  EventBlocksDynamicZoneInput: any;
  FreeContentBlocksDynamicZoneInput: any;
  JSON: any;
  Long: any;
  MwcFlowBlocksDynamicZoneInput: any;
  MwcFlowEditoContentDynamicZoneInput: any;
  NewBlocksDynamicZoneInput: any;
  RequestAddableBlocksDynamicZoneInput: any;
  ServicesBlockServiceLinksDynamicZoneInput: any;
  Time: any;
  TipBlocksDynamicZoneInput: any;
  TopContentBlockTopContentDynamicZoneInput: any;
  Upload: any;
  WasteFormContentBlockDynamicZoneInput: any;
};

export type Accessibility = {
  __typename?: "Accessibility";
  blocks?: Maybe<Array<Maybe<AccessibilityBlocksDynamicZone>>>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  customId?: Maybe<Scalars["String"]>;
  draftCreationId?: Maybe<Scalars["String"]>;
  hasDraft?: Maybe<Scalars["Boolean"]>;
  publishedDate?: Maybe<Scalars["DateTime"]>;
  status?: Maybe<Enum_Accessibility_Status>;
  title: Scalars["String"];
  toBeUpdated?: Maybe<Scalars["Boolean"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  versionNumber?: Maybe<Scalars["Int"]>;
};

export type AccessibilityBlocksDynamicZone =
  | ComponentBlocksFile
  | ComponentBlocksHorizontalRule
  | ComponentBlocksSubHeading
  | ComponentBlocksWysiwyg
  | Error;

export type AccessibilityEntity = {
  __typename?: "AccessibilityEntity";
  attributes?: Maybe<Accessibility>;
  id?: Maybe<Scalars["ID"]>;
};

export type AccessibilityEntityResponse = {
  __typename?: "AccessibilityEntityResponse";
  data?: Maybe<AccessibilityEntity>;
};

export type AccessibilityEntityResponseCollection = {
  __typename?: "AccessibilityEntityResponseCollection";
  data: Array<AccessibilityEntity>;
  meta: ResponseCollectionMeta;
};

export type AccessibilityFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<AccessibilityFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  customId?: InputMaybe<StringFilterInput>;
  draftCreationId?: InputMaybe<StringFilterInput>;
  hasDraft?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<AccessibilityFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<AccessibilityFiltersInput>>>;
  publishedDate?: InputMaybe<DateTimeFilterInput>;
  status?: InputMaybe<StringFilterInput>;
  title?: InputMaybe<StringFilterInput>;
  toBeUpdated?: InputMaybe<BooleanFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  versionNumber?: InputMaybe<IntFilterInput>;
};

export type AccessibilityInput = {
  blocks?: InputMaybe<Array<Scalars["AccessibilityBlocksDynamicZoneInput"]>>;
  customId?: InputMaybe<Scalars["String"]>;
  draftCreationId?: InputMaybe<Scalars["String"]>;
  hasDraft?: InputMaybe<Scalars["Boolean"]>;
  publishedDate?: InputMaybe<Scalars["DateTime"]>;
  status?: InputMaybe<Enum_Accessibility_Status>;
  title?: InputMaybe<Scalars["String"]>;
  toBeUpdated?: InputMaybe<Scalars["Boolean"]>;
  versionNumber?: InputMaybe<Scalars["Int"]>;
};

export type AccessibilityRelationResponseCollection = {
  __typename?: "AccessibilityRelationResponseCollection";
  data: Array<AccessibilityEntity>;
};

export type AccessibilitySubService = {
  __typename?: "AccessibilitySubService";
  accessibilities?: Maybe<AccessibilityRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  link?: Maybe<Scalars["String"]>;
  name: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type AccessibilitySubServiceAccessibilitiesArgs = {
  filters?: InputMaybe<AccessibilityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type AccessibilitySubServiceEntity = {
  __typename?: "AccessibilitySubServiceEntity";
  attributes?: Maybe<AccessibilitySubService>;
  id?: Maybe<Scalars["ID"]>;
};

export type AccessibilitySubServiceEntityResponse = {
  __typename?: "AccessibilitySubServiceEntityResponse";
  data?: Maybe<AccessibilitySubServiceEntity>;
};

export type AccessibilitySubServiceEntityResponseCollection = {
  __typename?: "AccessibilitySubServiceEntityResponseCollection";
  data: Array<AccessibilitySubServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type AccessibilitySubServiceFiltersInput = {
  accessibilities?: InputMaybe<AccessibilityFiltersInput>;
  and?: InputMaybe<Array<InputMaybe<AccessibilitySubServiceFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  editorialService?: InputMaybe<EditorialServiceFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  link?: InputMaybe<StringFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<AccessibilitySubServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<AccessibilitySubServiceFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type AccessibilitySubServiceInput = {
  accessibilities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  description?: InputMaybe<Scalars["String"]>;
  editorialService?: InputMaybe<Scalars["ID"]>;
  link?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
};

export type Activation = {
  __typename?: "Activation";
  id?: Maybe<Scalars["ID"]>;
  name?: Maybe<Scalars["String"]>;
  typeActivation?: Maybe<Scalars["String"]>;
};

export type ActivationAndService = Activation | Service;

export type Address = {
  __typename?: "Address";
  city?: Maybe<Scalars["String"]>;
  citycode?: Maybe<Scalars["String"]>;
  context?: Maybe<Scalars["String"]>;
  district?: Maybe<Scalars["String"]>;
  housenumber?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  importance?: Maybe<Scalars["Float"]>;
  label?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  postcode?: Maybe<Scalars["String"]>;
  score?: Maybe<Scalars["Float"]>;
  street?: Maybe<Scalars["String"]>;
  type?: Maybe<Scalars["String"]>;
  x?: Maybe<Scalars["Float"]>;
  y?: Maybe<Scalars["Float"]>;
};

export type AlertNotification = {
  __typename?: "AlertNotification";
  alertDescription: Scalars["String"];
  alertMailMessage?: Maybe<Scalars["String"]>;
  alertNotifService?: Maybe<AlertNotificationServiceEntityResponse>;
  alertSmsMessage?: Maybe<Scalars["String"]>;
  alertTitle?: Maybe<Scalars["String"]>;
  alertUserStorages?: Maybe<AlertUserStorageRelationResponseCollection>;
  cities?: Maybe<CityRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  scheduledAt: Scalars["Date"];
  scheduledAtTime: Scalars["String"];
  sectorizations?: Maybe<SectorizationRelationResponseCollection>;
  sendMail?: Maybe<Scalars["Boolean"]>;
  sendSMS?: Maybe<Scalars["Boolean"]>;
  subject?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type AlertNotificationAlertUserStoragesArgs = {
  filters?: InputMaybe<AlertUserStorageFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type AlertNotificationCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type AlertNotificationSectorizationsArgs = {
  filters?: InputMaybe<SectorizationFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type AlertNotificationEntity = {
  __typename?: "AlertNotificationEntity";
  attributes?: Maybe<AlertNotification>;
  id?: Maybe<Scalars["ID"]>;
};

export type AlertNotificationEntityResponse = {
  __typename?: "AlertNotificationEntityResponse";
  data?: Maybe<AlertNotificationEntity>;
};

export type AlertNotificationEntityResponseCollection = {
  __typename?: "AlertNotificationEntityResponseCollection";
  data: Array<AlertNotificationEntity>;
  meta: ResponseCollectionMeta;
};

export type AlertNotificationFiltersInput = {
  alertDescription?: InputMaybe<StringFilterInput>;
  alertMailMessage?: InputMaybe<StringFilterInput>;
  alertNotifService?: InputMaybe<AlertNotificationServiceFiltersInput>;
  alertSmsMessage?: InputMaybe<StringFilterInput>;
  alertTitle?: InputMaybe<StringFilterInput>;
  alertUserStorages?: InputMaybe<AlertUserStorageFiltersInput>;
  and?: InputMaybe<Array<InputMaybe<AlertNotificationFiltersInput>>>;
  cities?: InputMaybe<CityFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<AlertNotificationFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<AlertNotificationFiltersInput>>>;
  scheduledAt?: InputMaybe<DateFilterInput>;
  scheduledAtTime?: InputMaybe<StringFilterInput>;
  sectorizations?: InputMaybe<SectorizationFiltersInput>;
  sendMail?: InputMaybe<BooleanFilterInput>;
  sendSMS?: InputMaybe<BooleanFilterInput>;
  subject?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type AlertNotificationInput = {
  alertDescription?: InputMaybe<Scalars["String"]>;
  alertMailMessage?: InputMaybe<Scalars["String"]>;
  alertNotifService?: InputMaybe<Scalars["ID"]>;
  alertSmsMessage?: InputMaybe<Scalars["String"]>;
  alertTitle?: InputMaybe<Scalars["String"]>;
  alertUserStorages?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  scheduledAt?: InputMaybe<Scalars["Date"]>;
  scheduledAtTime?: InputMaybe<Scalars["String"]>;
  sectorizations?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  sendMail?: InputMaybe<Scalars["Boolean"]>;
  sendSMS?: InputMaybe<Scalars["Boolean"]>;
  subject?: InputMaybe<Scalars["String"]>;
};

export type AlertNotificationRelationResponseCollection = {
  __typename?: "AlertNotificationRelationResponseCollection";
  data: Array<AlertNotificationEntity>;
};

export type AlertNotificationService = {
  __typename?: "AlertNotificationService";
  alertNotifications?: Maybe<AlertNotificationRelationResponseCollection>;
  cities?: Maybe<CityRelationResponseCollection>;
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  endDate?: Maybe<Scalars["Date"]>;
  isActivated: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  startDate?: Maybe<Scalars["Date"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type AlertNotificationServiceAlertNotificationsArgs = {
  filters?: InputMaybe<AlertNotificationFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type AlertNotificationServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type AlertNotificationServiceEntity = {
  __typename?: "AlertNotificationServiceEntity";
  attributes?: Maybe<AlertNotificationService>;
  id?: Maybe<Scalars["ID"]>;
};

export type AlertNotificationServiceEntityResponse = {
  __typename?: "AlertNotificationServiceEntityResponse";
  data?: Maybe<AlertNotificationServiceEntity>;
};

export type AlertNotificationServiceEntityResponseCollection = {
  __typename?: "AlertNotificationServiceEntityResponseCollection";
  data: Array<AlertNotificationServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type AlertNotificationServiceFiltersInput = {
  alertNotifications?: InputMaybe<AlertNotificationFiltersInput>;
  and?: InputMaybe<Array<InputMaybe<AlertNotificationServiceFiltersInput>>>;
  cities?: InputMaybe<CityFiltersInput>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  endDate?: InputMaybe<DateFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<AlertNotificationServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<AlertNotificationServiceFiltersInput>>>;
  startDate?: InputMaybe<DateFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type AlertNotificationServiceInput = {
  alertNotifications?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  contract?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  startDate?: InputMaybe<Scalars["Date"]>;
};

export type AlertUserStorage = {
  __typename?: "AlertUserStorage";
  alertNotificationServiceId: Scalars["String"];
  alertNotifications?: Maybe<AlertNotificationRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  email?: Maybe<Scalars["String"]>;
  firstSubscriptionDate?: Maybe<Scalars["DateTime"]>;
  isEmail: Scalars["Boolean"];
  isSMS: Scalars["Boolean"];
  latitude?: Maybe<Scalars["String"]>;
  longitude?: Maybe<Scalars["String"]>;
  phoneNumber?: Maybe<Scalars["String"]>;
  reactivatedAt?: Maybe<Scalars["DateTime"]>;
  reactivationMailSentAt?: Maybe<Scalars["DateTime"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type AlertUserStorageAlertNotificationsArgs = {
  filters?: InputMaybe<AlertNotificationFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type AlertUserStorageEntity = {
  __typename?: "AlertUserStorageEntity";
  attributes?: Maybe<AlertUserStorage>;
  id?: Maybe<Scalars["ID"]>;
};

export type AlertUserStorageEntityResponse = {
  __typename?: "AlertUserStorageEntityResponse";
  data?: Maybe<AlertUserStorageEntity>;
};

export type AlertUserStorageEntityResponseCollection = {
  __typename?: "AlertUserStorageEntityResponseCollection";
  data: Array<AlertUserStorageEntity>;
  meta: ResponseCollectionMeta;
};

export type AlertUserStorageFiltersInput = {
  alertNotificationServiceId?: InputMaybe<StringFilterInput>;
  alertNotifications?: InputMaybe<AlertNotificationFiltersInput>;
  and?: InputMaybe<Array<InputMaybe<AlertUserStorageFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  email?: InputMaybe<StringFilterInput>;
  firstSubscriptionDate?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isEmail?: InputMaybe<BooleanFilterInput>;
  isSMS?: InputMaybe<BooleanFilterInput>;
  latitude?: InputMaybe<StringFilterInput>;
  longitude?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<AlertUserStorageFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<AlertUserStorageFiltersInput>>>;
  phoneNumber?: InputMaybe<StringFilterInput>;
  reactivatedAt?: InputMaybe<DateTimeFilterInput>;
  reactivationMailSentAt?: InputMaybe<DateTimeFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type AlertUserStorageInput = {
  alertNotificationServiceId?: InputMaybe<Scalars["String"]>;
  alertNotifications?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  email?: InputMaybe<Scalars["String"]>;
  firstSubscriptionDate?: InputMaybe<Scalars["DateTime"]>;
  isEmail?: InputMaybe<Scalars["Boolean"]>;
  isSMS?: InputMaybe<Scalars["Boolean"]>;
  latitude?: InputMaybe<Scalars["String"]>;
  longitude?: InputMaybe<Scalars["String"]>;
  phoneNumber?: InputMaybe<Scalars["String"]>;
  reactivatedAt?: InputMaybe<Scalars["DateTime"]>;
  reactivationMailSentAt?: InputMaybe<Scalars["DateTime"]>;
};

export type AlertUserStorageRelationResponseCollection = {
  __typename?: "AlertUserStorageRelationResponseCollection";
  data: Array<AlertUserStorageEntity>;
};

export type Appointment = {
  __typename?: "Appointment";
  sectorNames?: Maybe<Array<Maybe<Scalars["String"]>>>;
  timeSlotsWithUsers?: Maybe<Array<Maybe<TimeSlotWithUser>>>;
};

export type AppointmentDetails = {
  __typename?: "AppointmentDetails";
  appointments?: Maybe<Array<Maybe<Appointment>>>;
  title?: Maybe<Scalars["String"]>;
};

export type Audience = {
  __typename?: "Audience";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  isActive: Scalars["Boolean"];
  type: Enum_Audience_Type;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type AudienceDto = {
  __typename?: "AudienceDTO";
  id: Scalars["ID"];
  isActive: Scalars["Boolean"];
  type: Scalars["String"];
};

export type AudienceEntity = {
  __typename?: "AudienceEntity";
  attributes?: Maybe<Audience>;
  id?: Maybe<Scalars["ID"]>;
};

export type AudienceEntityResponse = {
  __typename?: "AudienceEntityResponse";
  data?: Maybe<AudienceEntity>;
};

export type AudienceEntityResponseCollection = {
  __typename?: "AudienceEntityResponseCollection";
  data: Array<AudienceEntity>;
  meta: ResponseCollectionMeta;
};

export type AudienceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<AudienceFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActive?: InputMaybe<BooleanFilterInput>;
  not?: InputMaybe<AudienceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<AudienceFiltersInput>>>;
  type?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type AudienceInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  isActive?: InputMaybe<Scalars["Boolean"]>;
  type?: InputMaybe<Enum_Audience_Type>;
};

export type AudienceRelationResponseCollection = {
  __typename?: "AudienceRelationResponseCollection";
  data: Array<AudienceEntity>;
};

export type AvailableSlot = {
  __typename?: "AvailableSlot";
  day?: Maybe<Scalars["String"]>;
  exceptionId?: Maybe<Scalars["ID"]>;
  openingTime?: Maybe<Scalars["String"]>;
  slotId: Scalars["ID"];
  yearlyDayId?: Maybe<Scalars["ID"]>;
};

export type BooleanFilterInput = {
  and?: InputMaybe<Array<InputMaybe<Scalars["Boolean"]>>>;
  between?: InputMaybe<Array<InputMaybe<Scalars["Boolean"]>>>;
  contains?: InputMaybe<Scalars["Boolean"]>;
  containsi?: InputMaybe<Scalars["Boolean"]>;
  endsWith?: InputMaybe<Scalars["Boolean"]>;
  eq?: InputMaybe<Scalars["Boolean"]>;
  eqi?: InputMaybe<Scalars["Boolean"]>;
  gt?: InputMaybe<Scalars["Boolean"]>;
  gte?: InputMaybe<Scalars["Boolean"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["Boolean"]>>>;
  lt?: InputMaybe<Scalars["Boolean"]>;
  lte?: InputMaybe<Scalars["Boolean"]>;
  ne?: InputMaybe<Scalars["Boolean"]>;
  not?: InputMaybe<BooleanFilterInput>;
  notContains?: InputMaybe<Scalars["Boolean"]>;
  notContainsi?: InputMaybe<Scalars["Boolean"]>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars["Boolean"]>>>;
  notNull?: InputMaybe<Scalars["Boolean"]>;
  null?: InputMaybe<Scalars["Boolean"]>;
  or?: InputMaybe<Array<InputMaybe<Scalars["Boolean"]>>>;
  startsWith?: InputMaybe<Scalars["Boolean"]>;
};

export type Cgu = {
  __typename?: "Cgu";
  blocks?: Maybe<Array<Maybe<CguBlocksDynamicZone>>>;
  cguSubService?: Maybe<CguSubServiceEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  hasMobile?: Maybe<Scalars["Boolean"]>;
  isActivated?: Maybe<Scalars["Boolean"]>;
  title: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type CguBlocksDynamicZone =
  | ComponentBlocksFile
  | ComponentBlocksHorizontalRule
  | ComponentBlocksImage
  | ComponentBlocksSubHeading
  | ComponentBlocksVideo
  | ComponentBlocksWysiwyg
  | Error;

export type CguEntity = {
  __typename?: "CguEntity";
  attributes?: Maybe<Cgu>;
  id?: Maybe<Scalars["ID"]>;
};

export type CguEntityResponse = {
  __typename?: "CguEntityResponse";
  data?: Maybe<CguEntity>;
};

export type CguEntityResponseCollection = {
  __typename?: "CguEntityResponseCollection";
  data: Array<CguEntity>;
  meta: ResponseCollectionMeta;
};

export type CguFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<CguFiltersInput>>>;
  cguSubService?: InputMaybe<CguSubServiceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  hasMobile?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  not?: InputMaybe<CguFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<CguFiltersInput>>>;
  title?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type CguInput = {
  blocks?: InputMaybe<Array<Scalars["CguBlocksDynamicZoneInput"]>>;
  cguSubService?: InputMaybe<Scalars["ID"]>;
  hasMobile?: InputMaybe<Scalars["Boolean"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  title?: InputMaybe<Scalars["String"]>;
};

export type CguRelationResponseCollection = {
  __typename?: "CguRelationResponseCollection";
  data: Array<CguEntity>;
};

export type CguSubService = {
  __typename?: "CguSubService";
  cgus?: Maybe<CguRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  link?: Maybe<Scalars["String"]>;
  name: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type CguSubServiceCgusArgs = {
  filters?: InputMaybe<CguFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type CguSubServiceEntity = {
  __typename?: "CguSubServiceEntity";
  attributes?: Maybe<CguSubService>;
  id?: Maybe<Scalars["ID"]>;
};

export type CguSubServiceEntityResponse = {
  __typename?: "CguSubServiceEntityResponse";
  data?: Maybe<CguSubServiceEntity>;
};

export type CguSubServiceEntityResponseCollection = {
  __typename?: "CguSubServiceEntityResponseCollection";
  data: Array<CguSubServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type CguSubServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<CguSubServiceFiltersInput>>>;
  cgus?: InputMaybe<CguFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  editorialService?: InputMaybe<EditorialServiceFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  link?: InputMaybe<StringFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<CguSubServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<CguSubServiceFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type CguSubServiceInput = {
  cgus?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  description?: InputMaybe<Scalars["String"]>;
  editorialService?: InputMaybe<Scalars["ID"]>;
  link?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
};

export type ChannelType = {
  __typename?: "ChannelType";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  hasWebApp?: Maybe<Scalars["Boolean"]>;
  hasWebSite?: Maybe<Scalars["Boolean"]>;
  hasYesWeScan?: Maybe<Scalars["Boolean"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type ChannelTypeEntity = {
  __typename?: "ChannelTypeEntity";
  attributes?: Maybe<ChannelType>;
  id?: Maybe<Scalars["ID"]>;
};

export type ChannelTypeEntityResponse = {
  __typename?: "ChannelTypeEntityResponse";
  data?: Maybe<ChannelTypeEntity>;
};

export type ChannelTypeEntityResponseCollection = {
  __typename?: "ChannelTypeEntityResponseCollection";
  data: Array<ChannelTypeEntity>;
  meta: ResponseCollectionMeta;
};

export type ChannelTypeFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ChannelTypeFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  hasWebApp?: InputMaybe<BooleanFilterInput>;
  hasWebSite?: InputMaybe<BooleanFilterInput>;
  hasYesWeScan?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<ChannelTypeFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ChannelTypeFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type ChannelTypeInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  hasWebApp?: InputMaybe<Scalars["Boolean"]>;
  hasWebSite?: InputMaybe<Scalars["Boolean"]>;
  hasYesWeScan?: InputMaybe<Scalars["Boolean"]>;
};

export type ChannelTypeRelationResponseCollection = {
  __typename?: "ChannelTypeRelationResponseCollection";
  data: Array<ChannelTypeEntity>;
};

export type City = {
  __typename?: "City";
  GeoJSON?: Maybe<Scalars["JSON"]>;
  MwCounter?: Maybe<MwCounterServiceEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  department?: Maybe<Scalars["String"]>;
  epci?: Maybe<EpciEntityResponse>;
  insee?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  pickUpDays?: Maybe<PickUpDayRelationResponseCollection>;
  postalCode?: Maybe<Scalars["String"]>;
  region?: Maybe<Scalars["String"]>;
  siren?: Maybe<Scalars["String"]>;
  territories?: Maybe<TerritoryRelationResponseCollection>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type CityPickUpDaysArgs = {
  filters?: InputMaybe<PickUpDayFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type CityTerritoriesArgs = {
  filters?: InputMaybe<TerritoryFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type CityEntity = {
  __typename?: "CityEntity";
  attributes?: Maybe<City>;
  id?: Maybe<Scalars["ID"]>;
};

export type CityEntityResponse = {
  __typename?: "CityEntityResponse";
  data?: Maybe<CityEntity>;
};

export type CityEntityResponseCollection = {
  __typename?: "CityEntityResponseCollection";
  data: Array<CityEntity>;
  meta: ResponseCollectionMeta;
};

export type CityFiltersInput = {
  GeoJSON?: InputMaybe<JsonFilterInput>;
  MwCounter?: InputMaybe<MwCounterServiceFiltersInput>;
  and?: InputMaybe<Array<InputMaybe<CityFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  department?: InputMaybe<StringFilterInput>;
  epci?: InputMaybe<EpciFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  insee?: InputMaybe<StringFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<CityFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<CityFiltersInput>>>;
  pickUpDays?: InputMaybe<PickUpDayFiltersInput>;
  postalCode?: InputMaybe<StringFilterInput>;
  region?: InputMaybe<StringFilterInput>;
  siren?: InputMaybe<StringFilterInput>;
  territories?: InputMaybe<TerritoryFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type CityInformation = {
  __typename?: "CityInformation";
  department?: Maybe<Department>;
  insee?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  postalCode?: Maybe<Scalars["String"]>;
  region?: Maybe<Region>;
  siren?: Maybe<Scalars["String"]>;
};

export type CityInput = {
  GeoJSON?: InputMaybe<Scalars["JSON"]>;
  MwCounter?: InputMaybe<Scalars["ID"]>;
  department?: InputMaybe<Scalars["String"]>;
  epci?: InputMaybe<Scalars["ID"]>;
  insee?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
  pickUpDays?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  postalCode?: InputMaybe<Scalars["String"]>;
  region?: InputMaybe<Scalars["String"]>;
  siren?: InputMaybe<Scalars["String"]>;
  territories?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type CityRelationResponseCollection = {
  __typename?: "CityRelationResponseCollection";
  data: Array<CityEntity>;
};

export type CityResult = {
  __typename?: "CityResult";
  id: Scalars["ID"];
  insee?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  postalCode?: Maybe<Scalars["String"]>;
  siren?: Maybe<Scalars["String"]>;
};

export type CitySectorization = {
  __typename?: "CitySectorization";
  GeoJson?: Maybe<Scalars["String"]>;
};

export type ClientContact = {
  __typename?: "ClientContact";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  email: Scalars["String"];
  firstName: Scalars["String"];
  lastName: Scalars["String"];
  phoneNumber: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type ClientContactCreateOutput = {
  __typename?: "ClientContactCreateOutput";
  email?: Maybe<Scalars["String"]>;
  firstName?: Maybe<Scalars["String"]>;
  lastName?: Maybe<Scalars["String"]>;
  phoneNumber?: Maybe<Scalars["String"]>;
};

export type ClientContactEntity = {
  __typename?: "ClientContactEntity";
  attributes?: Maybe<ClientContact>;
  id?: Maybe<Scalars["ID"]>;
};

export type ClientContactEntityResponse = {
  __typename?: "ClientContactEntityResponse";
  data?: Maybe<ClientContactEntity>;
};

export type ClientContactEntityResponseCollection = {
  __typename?: "ClientContactEntityResponseCollection";
  data: Array<ClientContactEntity>;
  meta: ResponseCollectionMeta;
};

export type ClientContactFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ClientContactFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  email?: InputMaybe<StringFilterInput>;
  firstName?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  lastName?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<ClientContactFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ClientContactFiltersInput>>>;
  phoneNumber?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type ClientContactInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  email?: InputMaybe<Scalars["String"]>;
  firstName?: InputMaybe<Scalars["String"]>;
  lastName?: InputMaybe<Scalars["String"]>;
  phoneNumber?: InputMaybe<Scalars["String"]>;
};

export type CollectDoorToDoor = {
  __typename?: "CollectDoorToDoor";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  flows?: Maybe<FlowRelationResponseCollection>;
  grammaticalGender?: Maybe<Enum_Collectdoortodoor_Grammaticalgender>;
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type CollectDoorToDoorFlowsArgs = {
  filters?: InputMaybe<FlowFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type CollectDoorToDoorEntity = {
  __typename?: "CollectDoorToDoorEntity";
  attributes?: Maybe<CollectDoorToDoor>;
  id?: Maybe<Scalars["ID"]>;
};

export type CollectDoorToDoorEntityResponse = {
  __typename?: "CollectDoorToDoorEntityResponse";
  data?: Maybe<CollectDoorToDoorEntity>;
};

export type CollectDoorToDoorEntityResponseCollection = {
  __typename?: "CollectDoorToDoorEntityResponseCollection";
  data: Array<CollectDoorToDoorEntity>;
  meta: ResponseCollectionMeta;
};

export type CollectDoorToDoorFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<CollectDoorToDoorFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  flows?: InputMaybe<FlowFiltersInput>;
  grammaticalGender?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<CollectDoorToDoorFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<CollectDoorToDoorFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type CollectDoorToDoorInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  flows?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  grammaticalGender?: InputMaybe<Enum_Collectdoortodoor_Grammaticalgender>;
  name?: InputMaybe<Scalars["String"]>;
  picto?: InputMaybe<Scalars["ID"]>;
};

export type CollectDoorToDoorRelationResponseCollection = {
  __typename?: "CollectDoorToDoorRelationResponseCollection";
  data: Array<CollectDoorToDoorEntity>;
};

export type CollectDropOff = {
  __typename?: "CollectDropOff";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  flows?: Maybe<FlowRelationResponseCollection>;
  grammaticalGender?: Maybe<Enum_Collectdropoff_Grammaticalgender>;
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type CollectDropOffFlowsArgs = {
  filters?: InputMaybe<FlowFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type CollectDropOffEntity = {
  __typename?: "CollectDropOffEntity";
  attributes?: Maybe<CollectDropOff>;
  id?: Maybe<Scalars["ID"]>;
};

export type CollectDropOffEntityResponse = {
  __typename?: "CollectDropOffEntityResponse";
  data?: Maybe<CollectDropOffEntity>;
};

export type CollectDropOffEntityResponseCollection = {
  __typename?: "CollectDropOffEntityResponseCollection";
  data: Array<CollectDropOffEntity>;
  meta: ResponseCollectionMeta;
};

export type CollectDropOffFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<CollectDropOffFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  flows?: InputMaybe<FlowFiltersInput>;
  grammaticalGender?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<CollectDropOffFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<CollectDropOffFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type CollectDropOffInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  flows?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  grammaticalGender?: InputMaybe<Enum_Collectdropoff_Grammaticalgender>;
  name?: InputMaybe<Scalars["String"]>;
  picto?: InputMaybe<Scalars["ID"]>;
};

export type CollectDropOffRelationResponseCollection = {
  __typename?: "CollectDropOffRelationResponseCollection";
  data: Array<CollectDropOffEntity>;
};

export type CollectEntity = {
  __typename?: "CollectEntity";
  entityTypeName: Scalars["String"];
  grammaticalGender: Scalars["String"];
  name: Scalars["String"];
  originalId: Scalars["ID"];
  picto: PictoDto;
  uniqueId: Scalars["String"];
};

export type CollectVoluntary = {
  __typename?: "CollectVoluntary";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  flows?: Maybe<FlowRelationResponseCollection>;
  grammaticalGender?: Maybe<Enum_Collectvoluntary_Grammaticalgender>;
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type CollectVoluntaryFlowsArgs = {
  filters?: InputMaybe<FlowFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type CollectVoluntaryEntity = {
  __typename?: "CollectVoluntaryEntity";
  attributes?: Maybe<CollectVoluntary>;
  id?: Maybe<Scalars["ID"]>;
};

export type CollectVoluntaryEntityResponse = {
  __typename?: "CollectVoluntaryEntityResponse";
  data?: Maybe<CollectVoluntaryEntity>;
};

export type CollectVoluntaryEntityResponseCollection = {
  __typename?: "CollectVoluntaryEntityResponseCollection";
  data: Array<CollectVoluntaryEntity>;
  meta: ResponseCollectionMeta;
};

export type CollectVoluntaryFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<CollectVoluntaryFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  flows?: InputMaybe<FlowFiltersInput>;
  grammaticalGender?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<CollectVoluntaryFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<CollectVoluntaryFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type CollectVoluntaryInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  flows?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  grammaticalGender?: InputMaybe<Enum_Collectvoluntary_Grammaticalgender>;
  name?: InputMaybe<Scalars["String"]>;
  picto?: InputMaybe<Scalars["ID"]>;
};

export type CollectVoluntaryRelationResponseCollection = {
  __typename?: "CollectVoluntaryRelationResponseCollection";
  data: Array<CollectVoluntaryEntity>;
};

export type Communication = {
  __typename?: "Communication";
  alerts?: Maybe<CommunicationType>;
  evolutionServices?: Maybe<Scalars["Boolean"]>;
  sociologicalSurveys?: Maybe<Scalars["Boolean"]>;
  tips?: Maybe<CommunicationType>;
};

export type CommunicationType = {
  __typename?: "CommunicationType";
  email?: Maybe<Scalars["Boolean"]>;
  push?: Maybe<Scalars["Boolean"]>;
  sms?: Maybe<Scalars["Boolean"]>;
};

export type ComponentBlocksAttachments = {
  __typename?: "ComponentBlocksAttachments";
  attachment?: Maybe<UploadFileRelationResponseCollection>;
  attachmentLabel: Scalars["String"];
  id: Scalars["ID"];
  isMandatory: Scalars["Boolean"];
  multipleAttachments?: Maybe<Scalars["Boolean"]>;
};

export type ComponentBlocksAttachmentsAttachmentArgs = {
  filters?: InputMaybe<UploadFileFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentBlocksCheckbox = {
  __typename?: "ComponentBlocksCheckbox";
  fieldStatusCheckbox: Enum_Componentblockscheckbox_Fieldstatuscheckbox;
  id: Scalars["ID"];
  labelCheckbox: Scalars["String"];
};

export type ComponentBlocksCommentary = {
  __typename?: "ComponentBlocksCommentary";
  commentaryLabel: Scalars["String"];
  commentaryPlaceholder?: Maybe<Scalars["String"]>;
  commentaryStatus: Enum_Componentblockscommentary_Commentarystatus;
  id: Scalars["ID"];
};

export type ComponentBlocksCumbersome = {
  __typename?: "ComponentBlocksCumbersome";
  cumbersomeLabel: Scalars["String"];
  cumbersomeLimitMessage: Scalars["String"];
  id: Scalars["ID"];
  isNumberAndVolume: Scalars["Boolean"];
  maxNumberOfCumbersome?: Maybe<Scalars["Int"]>;
  maxVolumeOfCumbersome?: Maybe<Scalars["Float"]>;
};

export type ComponentBlocksDateChoice = {
  __typename?: "ComponentBlocksDateChoice";
  fieldLabelDateChoice: Scalars["String"];
  fieldStatus: Enum_Componentblocksdatechoice_Fieldstatus;
  id: Scalars["ID"];
};

export type ComponentBlocksDownloadBlock = {
  __typename?: "ComponentBlocksDownloadBlock";
  file: UploadFileEntityResponse;
  id: Scalars["ID"];
  linkText: Scalars["String"];
};

export type ComponentBlocksDownloadBlockFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ComponentBlocksDownloadBlockFiltersInput>>>;
  linkText?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<ComponentBlocksDownloadBlockFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ComponentBlocksDownloadBlockFiltersInput>>>;
};

export type ComponentBlocksDownloadBlockInput = {
  file?: InputMaybe<Scalars["ID"]>;
  id?: InputMaybe<Scalars["ID"]>;
  linkText?: InputMaybe<Scalars["String"]>;
};

export type ComponentBlocksFile = {
  __typename?: "ComponentBlocksFile";
  document?: Maybe<UploadFileEntityResponse>;
  id: Scalars["ID"];
};

export type ComponentBlocksHorizontalRule = {
  __typename?: "ComponentBlocksHorizontalRule";
  hr?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
};

export type ComponentBlocksImage = {
  __typename?: "ComponentBlocksImage";
  altText?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  isDecorative?: Maybe<Scalars["Boolean"]>;
  picture?: Maybe<UploadFileEntityResponse>;
};

export type ComponentBlocksOpeningDay = {
  __typename?: "ComponentBlocksOpeningDay";
  afterNoonEnd?: Maybe<Scalars["Time"]>;
  afterNoonStart?: Maybe<Scalars["Time"]>;
  id: Scalars["ID"];
  morningEnd?: Maybe<Scalars["Time"]>;
  morningStart?: Maybe<Scalars["Time"]>;
  weekDay: Enum_Componentblocksopeningday_Weekday;
};

export type ComponentBlocksQcm = {
  __typename?: "ComponentBlocksQcm";
  fieldLabelQCM: Scalars["String"];
  fieldStatusQCM: Enum_Componentblocksqcm_Fieldstatusqcm;
  id: Scalars["ID"];
  multipleChoice: Scalars["Boolean"];
  responses: Scalars["String"];
};

export type ComponentBlocksQuestions = {
  __typename?: "ComponentBlocksQuestions";
  height: Scalars["Boolean"];
  id: Scalars["ID"];
  questionTextLabel: Scalars["String"];
  questionTextPlaceholder: Scalars["String"];
  textStatus: Enum_Componentblocksquestions_Textstatus;
};

export type ComponentBlocksRequestSlotsExceptions = {
  __typename?: "ComponentBlocksRequestSlotsExceptions";
  exceptionType?: Maybe<Enum_Componentblocksrequestslotsexceptions_Exceptiontype>;
  id: Scalars["ID"];
  slotException?: Maybe<Scalars["JSON"]>;
};

export type ComponentBlocksRequestSlotsExceptionsFiltersInput = {
  and?: InputMaybe<
    Array<InputMaybe<ComponentBlocksRequestSlotsExceptionsFiltersInput>>
  >;
  exceptionType?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<ComponentBlocksRequestSlotsExceptionsFiltersInput>;
  or?: InputMaybe<
    Array<InputMaybe<ComponentBlocksRequestSlotsExceptionsFiltersInput>>
  >;
  slotException?: InputMaybe<JsonFilterInput>;
};

export type ComponentBlocksRequestSlotsExceptionsInput = {
  exceptionType?: InputMaybe<Enum_Componentblocksrequestslotsexceptions_Exceptiontype>;
  id?: InputMaybe<Scalars["ID"]>;
  slotException?: InputMaybe<Scalars["JSON"]>;
};

export type ComponentBlocksRequestType = {
  __typename?: "ComponentBlocksRequestType";
  email?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  isEmail?: Maybe<Scalars["Boolean"]>;
  isTSMS?: Maybe<Scalars["Boolean"]>;
  title: Scalars["String"];
};

export type ComponentBlocksRequestTypeFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ComponentBlocksRequestTypeFiltersInput>>>;
  email?: InputMaybe<StringFilterInput>;
  isEmail?: InputMaybe<BooleanFilterInput>;
  isTSMS?: InputMaybe<BooleanFilterInput>;
  not?: InputMaybe<ComponentBlocksRequestTypeFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ComponentBlocksRequestTypeFiltersInput>>>;
  title?: InputMaybe<StringFilterInput>;
};

export type ComponentBlocksRequestTypeInput = {
  email?: InputMaybe<Scalars["String"]>;
  id?: InputMaybe<Scalars["ID"]>;
  isEmail?: InputMaybe<Scalars["Boolean"]>;
  isTSMS?: InputMaybe<Scalars["Boolean"]>;
  title?: InputMaybe<Scalars["String"]>;
};

export type ComponentBlocksServices = {
  __typename?: "ComponentBlocksServices";
  id: Scalars["ID"];
  serviceLinksData?: Maybe<Scalars["JSON"]>;
};

export type ComponentBlocksServicesFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ComponentBlocksServicesFiltersInput>>>;
  not?: InputMaybe<ComponentBlocksServicesFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ComponentBlocksServicesFiltersInput>>>;
  serviceLinksData?: InputMaybe<JsonFilterInput>;
};

export type ComponentBlocksServicesInput = {
  id?: InputMaybe<Scalars["ID"]>;
  serviceLinksData?: InputMaybe<Scalars["JSON"]>;
};

export type ComponentBlocksSubHeading = {
  __typename?: "ComponentBlocksSubHeading";
  id: Scalars["ID"];
  subHeadingTag?: Maybe<Enum_Componentblockssubheading_Subheadingtag>;
  subHeadingText?: Maybe<Scalars["String"]>;
};

export type ComponentBlocksTest = {
  __typename?: "ComponentBlocksTest";
  id: Scalars["ID"];
};

export type ComponentBlocksVideo = {
  __typename?: "ComponentBlocksVideo";
  id: Scalars["ID"];
  transcriptText?: Maybe<Scalars["String"]>;
  videoLink?: Maybe<Scalars["String"]>;
};

export type ComponentBlocksWysiwyg = {
  __typename?: "ComponentBlocksWysiwyg";
  id: Scalars["ID"];
  textEditor?: Maybe<Scalars["String"]>;
};

export type ComponentLinksAlertNotification = {
  __typename?: "ComponentLinksAlertNotification";
  alertNotif?: Maybe<AlertNotificationServiceEntityResponse>;
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
};

export type ComponentLinksContactUs = {
  __typename?: "ComponentLinksContactUs";
  contactUs?: Maybe<ContactUsSubServiceRelationResponseCollection>;
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
};

export type ComponentLinksContactUsContactUsArgs = {
  filters?: InputMaybe<ContactUsSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksDropOffMap = {
  __typename?: "ComponentLinksDropOffMap";
  dropMap?: Maybe<DropOffMapServiceRelationResponseCollection>;
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
  pointToDisplayOnTheMap?: Maybe<Enum_Componentlinksdropoffmap_Pointtodisplayonthemap>;
};

export type ComponentLinksDropOffMapDropMapArgs = {
  filters?: InputMaybe<DropOffMapServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksEditoContent = {
  __typename?: "ComponentLinksEditoContent";
  event?: Maybe<EventEntityResponse>;
  freeContent?: Maybe<FreeContentEntityResponse>;
  id: Scalars["ID"];
  new?: Maybe<NewEntityResponse>;
  quiz?: Maybe<QuizEntityResponse>;
  tip?: Maybe<TipEntityResponse>;
};

export type ComponentLinksEditorial = {
  __typename?: "ComponentLinksEditorial";
  event_sub_service?: Maybe<EventSubServiceEntityResponse>;
  id: Scalars["ID"];
  isDisplayed?: Maybe<Scalars["Boolean"]>;
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
};

export type ComponentLinksEvents = {
  __typename?: "ComponentLinksEvents";
  events?: Maybe<EventSubServiceRelationResponseCollection>;
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
};

export type ComponentLinksEventsEventsArgs = {
  filters?: InputMaybe<EventSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksExternal = {
  __typename?: "ComponentLinksExternal";
  externalLink?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
};

export type ComponentLinksFrees = {
  __typename?: "ComponentLinksFrees";
  freeContents?: Maybe<FreeContentSubServiceRelationResponseCollection>;
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
};

export type ComponentLinksFreesFreeContentsArgs = {
  filters?: InputMaybe<FreeContentSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksKeyMetrics = {
  __typename?: "ComponentLinksKeyMetrics";
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  keyMetrics?: Maybe<KeyMetricsServiceRelationResponseCollection>;
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
};

export type ComponentLinksKeyMetricsKeyMetricsArgs = {
  filters?: InputMaybe<KeyMetricsServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksMyWasteCounter = {
  __typename?: "ComponentLinksMyWasteCounter";
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  myWCounter?: Maybe<MwCounterServiceRelationResponseCollection>;
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
};

export type ComponentLinksMyWasteCounterMyWCounterArgs = {
  filters?: InputMaybe<MwCounterServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksNews = {
  __typename?: "ComponentLinksNews";
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  news?: Maybe<NewsSubServiceRelationResponseCollection>;
  picto?: Maybe<UploadFileEntityResponse>;
};

export type ComponentLinksNewsNewsArgs = {
  filters?: InputMaybe<NewsSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksPickUpDay = {
  __typename?: "ComponentLinksPickUpDay";
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  pickDays?: Maybe<PickUpDayServiceRelationResponseCollection>;
  picto?: Maybe<UploadFileEntityResponse>;
};

export type ComponentLinksPickUpDayPickDaysArgs = {
  filters?: InputMaybe<PickUpDayServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksQuizzes = {
  __typename?: "ComponentLinksQuizzes";
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
  quizzes?: Maybe<QuizSubServiceRelationResponseCollection>;
};

export type ComponentLinksQuizzesQuizzesArgs = {
  filters?: InputMaybe<QuizSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksRecyclingGuide = {
  __typename?: "ComponentLinksRecyclingGuide";
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
  recyclings?: Maybe<RecyclingGuideServiceRelationResponseCollection>;
};

export type ComponentLinksRecyclingGuideRecyclingsArgs = {
  filters?: InputMaybe<RecyclingGuideServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksRequest = {
  __typename?: "ComponentLinksRequest";
  demand?: Maybe<Enum_Componentlinksrequest_Demand>;
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
  requests?: Maybe<RequestServiceRelationResponseCollection>;
};

export type ComponentLinksRequestRequestsArgs = {
  filters?: InputMaybe<RequestServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksTips = {
  __typename?: "ComponentLinksTips";
  id: Scalars["ID"];
  isDisplayed: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
  tips?: Maybe<TipSubServiceRelationResponseCollection>;
};

export type ComponentLinksTipsTipsArgs = {
  filters?: InputMaybe<TipSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ComponentLinksTopContent = {
  __typename?: "ComponentLinksTopContent";
  event?: Maybe<EventEntityResponse>;
  id: Scalars["ID"];
  new?: Maybe<NewEntityResponse>;
};

export type Confidentiality = {
  __typename?: "Confidentiality";
  blocks?: Maybe<Array<Maybe<ConfidentialityBlocksDynamicZone>>>;
  confidentialitySubService?: Maybe<ConfidentialitySubServiceEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  hasMobile?: Maybe<Scalars["Boolean"]>;
  isActivated?: Maybe<Scalars["Boolean"]>;
  title: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type ConfidentialityBlocksDynamicZone =
  | ComponentBlocksFile
  | ComponentBlocksHorizontalRule
  | ComponentBlocksImage
  | ComponentBlocksSubHeading
  | ComponentBlocksVideo
  | ComponentBlocksWysiwyg
  | Error;

export type ConfidentialityEntity = {
  __typename?: "ConfidentialityEntity";
  attributes?: Maybe<Confidentiality>;
  id?: Maybe<Scalars["ID"]>;
};

export type ConfidentialityEntityResponse = {
  __typename?: "ConfidentialityEntityResponse";
  data?: Maybe<ConfidentialityEntity>;
};

export type ConfidentialityEntityResponseCollection = {
  __typename?: "ConfidentialityEntityResponseCollection";
  data: Array<ConfidentialityEntity>;
  meta: ResponseCollectionMeta;
};

export type ConfidentialityFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ConfidentialityFiltersInput>>>;
  confidentialitySubService?: InputMaybe<ConfidentialitySubServiceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  hasMobile?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  not?: InputMaybe<ConfidentialityFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ConfidentialityFiltersInput>>>;
  title?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type ConfidentialityInput = {
  blocks?: InputMaybe<Array<Scalars["ConfidentialityBlocksDynamicZoneInput"]>>;
  confidentialitySubService?: InputMaybe<Scalars["ID"]>;
  hasMobile?: InputMaybe<Scalars["Boolean"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  title?: InputMaybe<Scalars["String"]>;
};

export type ConfidentialityRelationResponseCollection = {
  __typename?: "ConfidentialityRelationResponseCollection";
  data: Array<ConfidentialityEntity>;
};

export type ConfidentialitySubService = {
  __typename?: "ConfidentialitySubService";
  confidentialities?: Maybe<ConfidentialityRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  link?: Maybe<Scalars["String"]>;
  name: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type ConfidentialitySubServiceConfidentialitiesArgs = {
  filters?: InputMaybe<ConfidentialityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ConfidentialitySubServiceEntity = {
  __typename?: "ConfidentialitySubServiceEntity";
  attributes?: Maybe<ConfidentialitySubService>;
  id?: Maybe<Scalars["ID"]>;
};

export type ConfidentialitySubServiceEntityResponse = {
  __typename?: "ConfidentialitySubServiceEntityResponse";
  data?: Maybe<ConfidentialitySubServiceEntity>;
};

export type ConfidentialitySubServiceEntityResponseCollection = {
  __typename?: "ConfidentialitySubServiceEntityResponseCollection";
  data: Array<ConfidentialitySubServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type ConfidentialitySubServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ConfidentialitySubServiceFiltersInput>>>;
  confidentialities?: InputMaybe<ConfidentialityFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  editorialService?: InputMaybe<EditorialServiceFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  link?: InputMaybe<StringFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<ConfidentialitySubServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ConfidentialitySubServiceFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type ConfidentialitySubServiceInput = {
  confidentialities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  description?: InputMaybe<Scalars["String"]>;
  editorialService?: InputMaybe<Scalars["ID"]>;
  link?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
};

export type Consents = {
  __typename?: "Consents";
  acceptanceDate?: Maybe<Scalars["String"]>;
  version?: Maybe<Scalars["String"]>;
};

export type ContactResponse = {
  __typename?: "ContactResponse";
  city?: Maybe<Scalars["String"]>;
  contactEmail?: Maybe<Scalars["String"]>;
  phoneNumber?: Maybe<Scalars["String"]>;
  postalAddress?: Maybe<Scalars["String"]>;
  postalCode?: Maybe<Scalars["String"]>;
  serviceName?: Maybe<Scalars["String"]>;
};

export type ContactUs = {
  __typename?: "ContactUs";
  blocks?: Maybe<Array<Maybe<ContactUsBlocksDynamicZone>>>;
  contactUsSubService?: Maybe<ContactUsSubServiceEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  isActivated?: Maybe<Scalars["Boolean"]>;
  tags?: Maybe<TagRelationResponseCollection>;
  title: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type ContactUsTagsArgs = {
  filters?: InputMaybe<TagFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ContactUsBlocksDynamicZone =
  | ComponentBlocksFile
  | ComponentBlocksHorizontalRule
  | ComponentBlocksImage
  | ComponentBlocksSubHeading
  | ComponentBlocksVideo
  | ComponentBlocksWysiwyg
  | Error;

export type ContactUsEntity = {
  __typename?: "ContactUsEntity";
  attributes?: Maybe<ContactUs>;
  id?: Maybe<Scalars["ID"]>;
};

export type ContactUsEntityResponse = {
  __typename?: "ContactUsEntityResponse";
  data?: Maybe<ContactUsEntity>;
};

export type ContactUsEntityResponseCollection = {
  __typename?: "ContactUsEntityResponseCollection";
  data: Array<ContactUsEntity>;
  meta: ResponseCollectionMeta;
};

export type ContactUsFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ContactUsFiltersInput>>>;
  contactUsSubService?: InputMaybe<ContactUsSubServiceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  not?: InputMaybe<ContactUsFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ContactUsFiltersInput>>>;
  tags?: InputMaybe<TagFiltersInput>;
  title?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type ContactUsInput = {
  blocks?: InputMaybe<Array<Scalars["ContactUsBlocksDynamicZoneInput"]>>;
  contactUsSubService?: InputMaybe<Scalars["ID"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  tags?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  title?: InputMaybe<Scalars["String"]>;
};

export type ContactUsRelationResponseCollection = {
  __typename?: "ContactUsRelationResponseCollection";
  data: Array<ContactUsEntity>;
};

export type ContactUsSubService = {
  __typename?: "ContactUsSubService";
  contactUses?: Maybe<ContactUsRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  endDate?: Maybe<Scalars["Date"]>;
  isActivated?: Maybe<Scalars["Boolean"]>;
  label: Scalars["String"];
  link?: Maybe<Scalars["String"]>;
  name: Scalars["String"];
  startDate?: Maybe<Scalars["Date"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type ContactUsSubServiceContactUsesArgs = {
  filters?: InputMaybe<ContactUsFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ContactUsSubServiceEntity = {
  __typename?: "ContactUsSubServiceEntity";
  attributes?: Maybe<ContactUsSubService>;
  id?: Maybe<Scalars["ID"]>;
};

export type ContactUsSubServiceEntityResponse = {
  __typename?: "ContactUsSubServiceEntityResponse";
  data?: Maybe<ContactUsSubServiceEntity>;
};

export type ContactUsSubServiceEntityResponseCollection = {
  __typename?: "ContactUsSubServiceEntityResponseCollection";
  data: Array<ContactUsSubServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type ContactUsSubServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ContactUsSubServiceFiltersInput>>>;
  contactUses?: InputMaybe<ContactUsFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  editorialService?: InputMaybe<EditorialServiceFiltersInput>;
  endDate?: InputMaybe<DateFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  label?: InputMaybe<StringFilterInput>;
  link?: InputMaybe<StringFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<ContactUsSubServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ContactUsSubServiceFiltersInput>>>;
  startDate?: InputMaybe<DateFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type ContactUsSubServiceInput = {
  contactUses?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  description?: InputMaybe<Scalars["String"]>;
  editorialService?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  label?: InputMaybe<Scalars["String"]>;
  link?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
  startDate?: InputMaybe<Scalars["Date"]>;
};

export type ContactUsSubServiceRelationResponseCollection = {
  __typename?: "ContactUsSubServiceRelationResponseCollection";
  data: Array<ContactUsSubServiceEntity>;
};

export type ContentTypeDto = {
  __typename?: "ContentTypeDTO";
  description?: Maybe<Scalars["String"]>;
  name: Scalars["String"];
  subServiceId: Scalars["ID"];
  type: Scalars["String"];
};

export type Contract = {
  __typename?: "Contract";
  MwCounterService?: Maybe<MwCounterServiceEntityResponse>;
  alertNotificationService?: Maybe<AlertNotificationServiceEntityResponse>;
  audiences?: Maybe<AudienceRelationResponseCollection>;
  ccap?: Maybe<Scalars["Long"]>;
  channelType?: Maybe<ChannelTypeEntityResponse>;
  clear?: Maybe<Scalars["Long"]>;
  clientContact?: Maybe<ClientContactEntityResponse>;
  clientName: Scalars["String"];
  clientType: Enum_Contract_Clienttype;
  collectDoorToDoors?: Maybe<CollectDoorToDoorRelationResponseCollection>;
  collectDropOffs?: Maybe<CollectDropOffRelationResponseCollection>;
  collectVoluntaries?: Maybe<CollectVoluntaryRelationResponseCollection>;
  communityUrl?: Maybe<Scalars["String"]>;
  contractCustomization?: Maybe<ContractCustomizationEntityResponse>;
  contractMenu?: Maybe<ContractMenuEntityResponse>;
  contractStatus: Enum_Contract_Contractstatus;
  createdAt?: Maybe<Scalars["DateTime"]>;
  dropOffMapService?: Maybe<DropOffMapServiceEntityResponse>;
  dueDate?: Maybe<Scalars["DateTime"]>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  flows?: Maybe<FlowRelationResponseCollection>;
  idPianoAnalytics?: Maybe<Scalars["String"]>;
  isFreemium: Scalars["Boolean"];
  isNonExclusive: Scalars["Boolean"];
  isRVFrance: Scalars["Boolean"];
  keyMetricsService?: Maybe<KeyMetricsServiceEntityResponse>;
  logicalDelete?: Maybe<Scalars["Boolean"]>;
  logo: UploadFileEntityResponse;
  mwcSiren?: Maybe<Scalars["String"]>;
  oldClientName?: Maybe<Scalars["String"]>;
  pathId?: Maybe<Scalars["Long"]>;
  pickUpDayService?: Maybe<PickUpDayServiceEntityResponse>;
  recyclingGuideService?: Maybe<RecyclingGuideServiceEntityResponse>;
  requestService?: Maybe<RequestServiceEntityResponse>;
  sectorizations?: Maybe<SectorizationRelationResponseCollection>;
  siret?: Maybe<Scalars["Long"]>;
  tags?: Maybe<TagRelationResponseCollection>;
  territory?: Maybe<TerritoryEntityResponse>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  users?: Maybe<UsersPermissionsUserRelationResponseCollection>;
  yesWeScanServices?: Maybe<YesWeScanServiceRelationResponseCollection>;
  ywsTsmsApiKey?: Maybe<Scalars["String"]>;
};

export type ContractAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ContractCollectDoorToDoorsArgs = {
  filters?: InputMaybe<CollectDoorToDoorFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ContractCollectDropOffsArgs = {
  filters?: InputMaybe<CollectDropOffFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ContractCollectVoluntariesArgs = {
  filters?: InputMaybe<CollectVoluntaryFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ContractFlowsArgs = {
  filters?: InputMaybe<FlowFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ContractSectorizationsArgs = {
  filters?: InputMaybe<SectorizationFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ContractTagsArgs = {
  filters?: InputMaybe<TagFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ContractUsersArgs = {
  filters?: InputMaybe<UsersPermissionsUserFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ContractYesWeScanServicesArgs = {
  filters?: InputMaybe<YesWeScanServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type ContractAndClientContact =
  | ClientContactCreateOutput
  | ContractCreateOutput;

export type ContractChannelType = {
  __typename?: "ContractChannelType";
  hasWebApp?: Maybe<Scalars["Boolean"]>;
  hasWebSite?: Maybe<Scalars["Boolean"]>;
  hasYesWeScan?: Maybe<Scalars["Boolean"]>;
};

export type ContractCreateOutput = {
  __typename?: "ContractCreateOutput";
  ccap?: Maybe<Scalars["Long"]>;
  clear?: Maybe<Scalars["Long"]>;
  clientName: Scalars["String"];
  clientType?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  isRVFrance: Scalars["Boolean"];
  siret?: Maybe<Scalars["Long"]>;
};

export type ContractCustomization = {
  __typename?: "ContractCustomization";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  footer?: Maybe<FooterEntityResponse>;
  homepage?: Maybe<HomepageEntityResponse>;
  primaryColor: Scalars["String"];
  secondaryColor?: Maybe<Scalars["String"]>;
  textContrast: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type ContractCustomizationEntity = {
  __typename?: "ContractCustomizationEntity";
  attributes?: Maybe<ContractCustomization>;
  id?: Maybe<Scalars["ID"]>;
};

export type ContractCustomizationEntityResponse = {
  __typename?: "ContractCustomizationEntityResponse";
  data?: Maybe<ContractCustomizationEntity>;
};

export type ContractCustomizationEntityResponseCollection = {
  __typename?: "ContractCustomizationEntityResponseCollection";
  data: Array<ContractCustomizationEntity>;
  meta: ResponseCollectionMeta;
};

export type ContractCustomizationFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ContractCustomizationFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  footer?: InputMaybe<FooterFiltersInput>;
  homepage?: InputMaybe<HomepageFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<ContractCustomizationFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ContractCustomizationFiltersInput>>>;
  primaryColor?: InputMaybe<StringFilterInput>;
  secondaryColor?: InputMaybe<StringFilterInput>;
  textContrast?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type ContractCustomizationInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  footer?: InputMaybe<Scalars["ID"]>;
  homepage?: InputMaybe<Scalars["ID"]>;
  primaryColor?: InputMaybe<Scalars["String"]>;
  secondaryColor?: InputMaybe<Scalars["String"]>;
  textContrast?: InputMaybe<Scalars["String"]>;
};

export type ContractEntity = {
  __typename?: "ContractEntity";
  attributes?: Maybe<Contract>;
  id?: Maybe<Scalars["ID"]>;
};

export type ContractEntityResponse = {
  __typename?: "ContractEntityResponse";
  data?: Maybe<ContractEntity>;
};

export type ContractEntityResponseCollection = {
  __typename?: "ContractEntityResponseCollection";
  data: Array<ContractEntity>;
  meta: ResponseCollectionMeta;
};

export type ContractFiltersInput = {
  MwCounterService?: InputMaybe<MwCounterServiceFiltersInput>;
  alertNotificationService?: InputMaybe<AlertNotificationServiceFiltersInput>;
  and?: InputMaybe<Array<InputMaybe<ContractFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  ccap?: InputMaybe<LongFilterInput>;
  channelType?: InputMaybe<ChannelTypeFiltersInput>;
  clear?: InputMaybe<LongFilterInput>;
  clientContact?: InputMaybe<ClientContactFiltersInput>;
  clientName?: InputMaybe<StringFilterInput>;
  clientType?: InputMaybe<StringFilterInput>;
  collectDoorToDoors?: InputMaybe<CollectDoorToDoorFiltersInput>;
  collectDropOffs?: InputMaybe<CollectDropOffFiltersInput>;
  collectVoluntaries?: InputMaybe<CollectVoluntaryFiltersInput>;
  communityUrl?: InputMaybe<StringFilterInput>;
  contractCustomization?: InputMaybe<ContractCustomizationFiltersInput>;
  contractMenu?: InputMaybe<ContractMenuFiltersInput>;
  contractStatus?: InputMaybe<StringFilterInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  dropOffMapService?: InputMaybe<DropOffMapServiceFiltersInput>;
  dueDate?: InputMaybe<DateTimeFilterInput>;
  editorialService?: InputMaybe<EditorialServiceFiltersInput>;
  flows?: InputMaybe<FlowFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  idPianoAnalytics?: InputMaybe<StringFilterInput>;
  isFreemium?: InputMaybe<BooleanFilterInput>;
  isNonExclusive?: InputMaybe<BooleanFilterInput>;
  isRVFrance?: InputMaybe<BooleanFilterInput>;
  keyMetricsService?: InputMaybe<KeyMetricsServiceFiltersInput>;
  logicalDelete?: InputMaybe<BooleanFilterInput>;
  mwcSiren?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<ContractFiltersInput>;
  oldClientName?: InputMaybe<StringFilterInput>;
  or?: InputMaybe<Array<InputMaybe<ContractFiltersInput>>>;
  pathId?: InputMaybe<LongFilterInput>;
  pickUpDayService?: InputMaybe<PickUpDayServiceFiltersInput>;
  recyclingGuideService?: InputMaybe<RecyclingGuideServiceFiltersInput>;
  requestService?: InputMaybe<RequestServiceFiltersInput>;
  sectorizations?: InputMaybe<SectorizationFiltersInput>;
  siret?: InputMaybe<LongFilterInput>;
  tags?: InputMaybe<TagFiltersInput>;
  territory?: InputMaybe<TerritoryFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  users?: InputMaybe<UsersPermissionsUserFiltersInput>;
  yesWeScanServices?: InputMaybe<YesWeScanServiceFiltersInput>;
  ywsTsmsApiKey?: InputMaybe<StringFilterInput>;
};

export type ContractInput = {
  MwCounterService?: InputMaybe<Scalars["ID"]>;
  alertNotificationService?: InputMaybe<Scalars["ID"]>;
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  ccap?: InputMaybe<Scalars["Long"]>;
  channelType?: InputMaybe<Scalars["ID"]>;
  clear?: InputMaybe<Scalars["Long"]>;
  clientContact?: InputMaybe<Scalars["ID"]>;
  clientName?: InputMaybe<Scalars["String"]>;
  clientType?: InputMaybe<Enum_Contract_Clienttype>;
  collectDoorToDoors?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  collectDropOffs?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  collectVoluntaries?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  communityUrl?: InputMaybe<Scalars["String"]>;
  contractCustomization?: InputMaybe<Scalars["ID"]>;
  contractMenu?: InputMaybe<Scalars["ID"]>;
  contractStatus?: InputMaybe<Enum_Contract_Contractstatus>;
  dropOffMapService?: InputMaybe<Scalars["ID"]>;
  dueDate?: InputMaybe<Scalars["DateTime"]>;
  editorialService?: InputMaybe<Scalars["ID"]>;
  flows?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  idPianoAnalytics?: InputMaybe<Scalars["String"]>;
  isFreemium?: InputMaybe<Scalars["Boolean"]>;
  isNonExclusive?: InputMaybe<Scalars["Boolean"]>;
  isRVFrance?: InputMaybe<Scalars["Boolean"]>;
  keyMetricsService?: InputMaybe<Scalars["ID"]>;
  logicalDelete?: InputMaybe<Scalars["Boolean"]>;
  logo?: InputMaybe<Scalars["ID"]>;
  mwcSiren?: InputMaybe<Scalars["String"]>;
  oldClientName?: InputMaybe<Scalars["String"]>;
  pathId?: InputMaybe<Scalars["Long"]>;
  pickUpDayService?: InputMaybe<Scalars["ID"]>;
  recyclingGuideService?: InputMaybe<Scalars["ID"]>;
  requestService?: InputMaybe<Scalars["ID"]>;
  sectorizations?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  siret?: InputMaybe<Scalars["Long"]>;
  tags?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  territory?: InputMaybe<Scalars["ID"]>;
  users?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  yesWeScanServices?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  ywsTsmsApiKey?: InputMaybe<Scalars["String"]>;
};

export type ContractLogo = {
  __typename?: "ContractLogo";
  alternativeText?: Maybe<Scalars["String"]>;
  hash?: Maybe<Scalars["String"]>;
  mime?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  provider?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["String"]>;
  url?: Maybe<Scalars["String"]>;
};

export type ContractMenu = {
  __typename?: "ContractMenu";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  serviceLinks?: Maybe<Array<Maybe<ContractMenuServiceLinksDynamicZone>>>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type ContractMenuEntity = {
  __typename?: "ContractMenuEntity";
  attributes?: Maybe<ContractMenu>;
  id?: Maybe<Scalars["ID"]>;
};

export type ContractMenuEntityResponse = {
  __typename?: "ContractMenuEntityResponse";
  data?: Maybe<ContractMenuEntity>;
};

export type ContractMenuEntityResponseCollection = {
  __typename?: "ContractMenuEntityResponseCollection";
  data: Array<ContractMenuEntity>;
  meta: ResponseCollectionMeta;
};

export type ContractMenuFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ContractMenuFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<ContractMenuFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ContractMenuFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type ContractMenuInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  serviceLinks?: InputMaybe<
    Array<Scalars["ContractMenuServiceLinksDynamicZoneInput"]>
  >;
};

export type ContractMenuServiceLinksDynamicZone =
  | ComponentLinksAlertNotification
  | ComponentLinksContactUs
  | ComponentLinksDropOffMap
  | ComponentLinksEvents
  | ComponentLinksExternal
  | ComponentLinksFrees
  | ComponentLinksKeyMetrics
  | ComponentLinksMyWasteCounter
  | ComponentLinksNews
  | ComponentLinksPickUpDay
  | ComponentLinksQuizzes
  | ComponentLinksRecyclingGuide
  | ComponentLinksRequest
  | ComponentLinksTips
  | Error;

export type Cookie = {
  __typename?: "Cookie";
  blocks?: Maybe<Array<Maybe<CookieBlocksDynamicZone>>>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  hasMobile: Scalars["Boolean"];
  isActivated?: Maybe<Scalars["Boolean"]>;
  title: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type CookieBlocksDynamicZone =
  | ComponentBlocksFile
  | ComponentBlocksHorizontalRule
  | ComponentBlocksImage
  | ComponentBlocksSubHeading
  | ComponentBlocksVideo
  | ComponentBlocksWysiwyg
  | Error;

export type CookieEntity = {
  __typename?: "CookieEntity";
  attributes?: Maybe<Cookie>;
  id?: Maybe<Scalars["ID"]>;
};

export type CookieEntityResponse = {
  __typename?: "CookieEntityResponse";
  data?: Maybe<CookieEntity>;
};

export type CookieEntityResponseCollection = {
  __typename?: "CookieEntityResponseCollection";
  data: Array<CookieEntity>;
  meta: ResponseCollectionMeta;
};

export type CookieFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<CookieFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  hasMobile?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  not?: InputMaybe<CookieFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<CookieFiltersInput>>>;
  title?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type CookieInput = {
  blocks?: InputMaybe<Array<Scalars["CookieBlocksDynamicZoneInput"]>>;
  hasMobile?: InputMaybe<Scalars["Boolean"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  title?: InputMaybe<Scalars["String"]>;
};

export type CookieRelationResponseCollection = {
  __typename?: "CookieRelationResponseCollection";
  data: Array<CookieEntity>;
};

export type CookiesSubService = {
  __typename?: "CookiesSubService";
  cookies?: Maybe<CookieRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  link?: Maybe<Scalars["String"]>;
  name: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type CookiesSubServiceCookiesArgs = {
  filters?: InputMaybe<CookieFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type CookiesSubServiceEntity = {
  __typename?: "CookiesSubServiceEntity";
  attributes?: Maybe<CookiesSubService>;
  id?: Maybe<Scalars["ID"]>;
};

export type CookiesSubServiceEntityResponse = {
  __typename?: "CookiesSubServiceEntityResponse";
  data?: Maybe<CookiesSubServiceEntity>;
};

export type CookiesSubServiceEntityResponseCollection = {
  __typename?: "CookiesSubServiceEntityResponseCollection";
  data: Array<CookiesSubServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type CookiesSubServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<CookiesSubServiceFiltersInput>>>;
  cookies?: InputMaybe<CookieFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  editorialService?: InputMaybe<EditorialServiceFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  link?: InputMaybe<StringFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<CookiesSubServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<CookiesSubServiceFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type CookiesSubServiceInput = {
  cookies?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  description?: InputMaybe<Scalars["String"]>;
  editorialService?: InputMaybe<Scalars["ID"]>;
  link?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
};

export type Crud = {
  __typename?: "Crud";
  create?: Maybe<Scalars["Boolean"]>;
  delete?: Maybe<Scalars["Boolean"]>;
  read?: Maybe<Scalars["Boolean"]>;
  update?: Maybe<Scalars["Boolean"]>;
};

export type Cumbersome = {
  __typename?: "Cumbersome";
  category: Scalars["String"];
  cumbersomeName: Scalars["String"];
  volume: Scalars["String"];
};

export type DateFilterInput = {
  and?: InputMaybe<Array<InputMaybe<Scalars["Date"]>>>;
  between?: InputMaybe<Array<InputMaybe<Scalars["Date"]>>>;
  contains?: InputMaybe<Scalars["Date"]>;
  containsi?: InputMaybe<Scalars["Date"]>;
  endsWith?: InputMaybe<Scalars["Date"]>;
  eq?: InputMaybe<Scalars["Date"]>;
  eqi?: InputMaybe<Scalars["Date"]>;
  gt?: InputMaybe<Scalars["Date"]>;
  gte?: InputMaybe<Scalars["Date"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["Date"]>>>;
  lt?: InputMaybe<Scalars["Date"]>;
  lte?: InputMaybe<Scalars["Date"]>;
  ne?: InputMaybe<Scalars["Date"]>;
  not?: InputMaybe<DateFilterInput>;
  notContains?: InputMaybe<Scalars["Date"]>;
  notContainsi?: InputMaybe<Scalars["Date"]>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars["Date"]>>>;
  notNull?: InputMaybe<Scalars["Boolean"]>;
  null?: InputMaybe<Scalars["Boolean"]>;
  or?: InputMaybe<Array<InputMaybe<Scalars["Date"]>>>;
  startsWith?: InputMaybe<Scalars["Date"]>;
};

export type DateTimeFilterInput = {
  and?: InputMaybe<Array<InputMaybe<Scalars["DateTime"]>>>;
  between?: InputMaybe<Array<InputMaybe<Scalars["DateTime"]>>>;
  contains?: InputMaybe<Scalars["DateTime"]>;
  containsi?: InputMaybe<Scalars["DateTime"]>;
  endsWith?: InputMaybe<Scalars["DateTime"]>;
  eq?: InputMaybe<Scalars["DateTime"]>;
  eqi?: InputMaybe<Scalars["DateTime"]>;
  gt?: InputMaybe<Scalars["DateTime"]>;
  gte?: InputMaybe<Scalars["DateTime"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["DateTime"]>>>;
  lt?: InputMaybe<Scalars["DateTime"]>;
  lte?: InputMaybe<Scalars["DateTime"]>;
  ne?: InputMaybe<Scalars["DateTime"]>;
  not?: InputMaybe<DateTimeFilterInput>;
  notContains?: InputMaybe<Scalars["DateTime"]>;
  notContainsi?: InputMaybe<Scalars["DateTime"]>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars["DateTime"]>>>;
  notNull?: InputMaybe<Scalars["Boolean"]>;
  null?: InputMaybe<Scalars["Boolean"]>;
  or?: InputMaybe<Array<InputMaybe<Scalars["DateTime"]>>>;
  startsWith?: InputMaybe<Scalars["DateTime"]>;
};

export type Deactivation = {
  __typename?: "Deactivation";
  contractId?: Maybe<Scalars["ID"]>;
  hasOtherActivationTypes?: Maybe<Scalars["Boolean"]>;
  typeDeactivation?: Maybe<Scalars["String"]>;
};

export type DeletedMessage = {
  __typename?: "DeletedMessage";
  id?: Maybe<Scalars["ID"]>;
  message?: Maybe<Scalars["String"]>;
};

export type Department = {
  __typename?: "Department";
  code?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
};

export type DescriptionService = {
  __typename?: "DescriptionService";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  name?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type DescriptionServiceAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type DescriptionServiceEntity = {
  __typename?: "DescriptionServiceEntity";
  attributes?: Maybe<DescriptionService>;
  id?: Maybe<Scalars["ID"]>;
};

export type DescriptionServiceEntityResponse = {
  __typename?: "DescriptionServiceEntityResponse";
  data?: Maybe<DescriptionServiceEntity>;
};

export type DescriptionServiceEntityResponseCollection = {
  __typename?: "DescriptionServiceEntityResponseCollection";
  data: Array<DescriptionServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type DescriptionServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<DescriptionServiceFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<DescriptionServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<DescriptionServiceFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type DescriptionServiceInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  name?: InputMaybe<Scalars["String"]>;
};

export type Document = {
  __typename?: "Document";
  createdAt?: Maybe<Scalars["DateTime"]>;
  document: UploadFileEntityResponse;
  event?: Maybe<EventEntityResponse>;
  name: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type DocumentEntity = {
  __typename?: "DocumentEntity";
  attributes?: Maybe<Document>;
  id?: Maybe<Scalars["ID"]>;
};

export type DocumentEntityResponse = {
  __typename?: "DocumentEntityResponse";
  data?: Maybe<DocumentEntity>;
};

export type DocumentEntityResponseCollection = {
  __typename?: "DocumentEntityResponseCollection";
  data: Array<DocumentEntity>;
  meta: ResponseCollectionMeta;
};

export type DocumentFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<DocumentFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  event?: InputMaybe<EventFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<DocumentFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<DocumentFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type DocumentInput = {
  document?: InputMaybe<Scalars["ID"]>;
  event?: InputMaybe<Scalars["ID"]>;
  name?: InputMaybe<Scalars["String"]>;
};

export type DocumentRelationResponseCollection = {
  __typename?: "DocumentRelationResponseCollection";
  data: Array<DocumentEntity>;
};

export type DropOffMap = {
  __typename?: "DropOffMap";
  BANFeatureProperties?: Maybe<Scalars["JSON"]>;
  address?: Maybe<Scalars["String"]>;
  audiences?: Maybe<AudienceRelationResponseCollection>;
  city?: Maybe<Scalars["String"]>;
  collectDropOff?: Maybe<CollectDropOffEntityResponse>;
  collectVoluntary?: Maybe<CollectVoluntaryEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  customAddress?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  downloadableFiles?: Maybe<Array<Maybe<ComponentBlocksDownloadBlock>>>;
  dropOffMapService?: Maybe<DropOffMapServiceEntityResponse>;
  hasCustomAddress?: Maybe<Scalars["Boolean"]>;
  latitude?: Maybe<Scalars["Float"]>;
  longitude?: Maybe<Scalars["Float"]>;
  mustKnow?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  openingHoursBlocks?: Maybe<
    Array<Maybe<DropOffMapOpeningHoursBlocksDynamicZone>>
  >;
  phoneNumber?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  wasteFormsList?: Maybe<WasteFormRelationResponseCollection>;
  wasteFormsStatus?: Maybe<Enum_Dropoffmap_Wasteformsstatus>;
};

export type DropOffMapAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type DropOffMapDownloadableFilesArgs = {
  filters?: InputMaybe<ComponentBlocksDownloadBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type DropOffMapWasteFormsListArgs = {
  filters?: InputMaybe<WasteFormFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type DropOffMapDto = {
  __typename?: "DropOffMapDTO";
  BANFeatureProperties?: Maybe<Scalars["JSON"]>;
  address?: Maybe<Scalars["String"]>;
  audiences?: Maybe<Array<Maybe<AudienceDto>>>;
  city?: Maybe<Scalars["String"]>;
  collect?: Maybe<CollectEntity>;
  customAddress?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  downloadableFiles?: Maybe<Array<Maybe<ComponentBlocksDownloadBlock>>>;
  hasCustomAddress?: Maybe<Scalars["Boolean"]>;
  id: Scalars["String"];
  latitude: Scalars["Float"];
  longitude: Scalars["Float"];
  mustKnow?: Maybe<Scalars["String"]>;
  name: Scalars["String"];
  openingHoursBlocks?: Maybe<
    Array<Maybe<DropOffMapOpeningHoursBlocksDynamicZone>>
  >;
  phoneNumber?: Maybe<Scalars["String"]>;
};

export type DropOffMapDtoDownloadableFilesArgs = {
  filters?: InputMaybe<ComponentBlocksDownloadBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type DropOffMapEntity = {
  __typename?: "DropOffMapEntity";
  attributes?: Maybe<DropOffMap>;
  id?: Maybe<Scalars["ID"]>;
};

export type DropOffMapEntityResponse = {
  __typename?: "DropOffMapEntityResponse";
  data?: Maybe<DropOffMapEntity>;
};

export type DropOffMapEntityResponseCollection = {
  __typename?: "DropOffMapEntityResponseCollection";
  data: Array<DropOffMapEntity>;
  meta: ResponseCollectionMeta;
};

export type DropOffMapFiltersInput = {
  BANFeatureProperties?: InputMaybe<JsonFilterInput>;
  address?: InputMaybe<StringFilterInput>;
  and?: InputMaybe<Array<InputMaybe<DropOffMapFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  city?: InputMaybe<StringFilterInput>;
  collectDropOff?: InputMaybe<CollectDropOffFiltersInput>;
  collectVoluntary?: InputMaybe<CollectVoluntaryFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  customAddress?: InputMaybe<StringFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  downloadableFiles?: InputMaybe<ComponentBlocksDownloadBlockFiltersInput>;
  dropOffMapService?: InputMaybe<DropOffMapServiceFiltersInput>;
  hasCustomAddress?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  latitude?: InputMaybe<FloatFilterInput>;
  longitude?: InputMaybe<FloatFilterInput>;
  mustKnow?: InputMaybe<StringFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<DropOffMapFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<DropOffMapFiltersInput>>>;
  phoneNumber?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  wasteFormsList?: InputMaybe<WasteFormFiltersInput>;
  wasteFormsStatus?: InputMaybe<StringFilterInput>;
};

export type DropOffMapInput = {
  BANFeatureProperties?: InputMaybe<Scalars["JSON"]>;
  address?: InputMaybe<Scalars["String"]>;
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  city?: InputMaybe<Scalars["String"]>;
  collectDropOff?: InputMaybe<Scalars["ID"]>;
  collectVoluntary?: InputMaybe<Scalars["ID"]>;
  customAddress?: InputMaybe<Scalars["String"]>;
  description?: InputMaybe<Scalars["String"]>;
  downloadableFiles?: InputMaybe<
    Array<InputMaybe<ComponentBlocksDownloadBlockInput>>
  >;
  dropOffMapService?: InputMaybe<Scalars["ID"]>;
  hasCustomAddress?: InputMaybe<Scalars["Boolean"]>;
  latitude?: InputMaybe<Scalars["Float"]>;
  longitude?: InputMaybe<Scalars["Float"]>;
  mustKnow?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
  openingHoursBlocks?: InputMaybe<
    Array<Scalars["DropOffMapOpeningHoursBlocksDynamicZoneInput"]>
  >;
  phoneNumber?: InputMaybe<Scalars["String"]>;
  wasteFormsList?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  wasteFormsStatus?: InputMaybe<Enum_Dropoffmap_Wasteformsstatus>;
};

export type DropOffMapOpeningHoursBlocksDynamicZone =
  | ComponentBlocksOpeningDay
  | Error;

export type DropOffMapRelationResponseCollection = {
  __typename?: "DropOffMapRelationResponseCollection";
  data: Array<DropOffMapEntity>;
};

export type DropOffMapService = {
  __typename?: "DropOffMapService";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  cities?: Maybe<CityRelationResponseCollection>;
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  dropOffMaps?: Maybe<DropOffMapRelationResponseCollection>;
  endDate?: Maybe<Scalars["Date"]>;
  isActivated: Scalars["Boolean"];
  name?: Maybe<Scalars["String"]>;
  startDate?: Maybe<Scalars["Date"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type DropOffMapServiceAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type DropOffMapServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type DropOffMapServiceDropOffMapsArgs = {
  filters?: InputMaybe<DropOffMapFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type DropOffMapServiceEntity = {
  __typename?: "DropOffMapServiceEntity";
  attributes?: Maybe<DropOffMapService>;
  id?: Maybe<Scalars["ID"]>;
};

export type DropOffMapServiceEntityResponse = {
  __typename?: "DropOffMapServiceEntityResponse";
  data?: Maybe<DropOffMapServiceEntity>;
};

export type DropOffMapServiceEntityResponseCollection = {
  __typename?: "DropOffMapServiceEntityResponseCollection";
  data: Array<DropOffMapServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type DropOffMapServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<DropOffMapServiceFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  cities?: InputMaybe<CityFiltersInput>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  dropOffMaps?: InputMaybe<DropOffMapFiltersInput>;
  endDate?: InputMaybe<DateFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<DropOffMapServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<DropOffMapServiceFiltersInput>>>;
  startDate?: InputMaybe<DateFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type DropOffMapServiceInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  contract?: InputMaybe<Scalars["ID"]>;
  dropOffMaps?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  endDate?: InputMaybe<Scalars["Date"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  startDate?: InputMaybe<Scalars["Date"]>;
};

export type DropOffMapServiceRelationResponseCollection = {
  __typename?: "DropOffMapServiceRelationResponseCollection";
  data: Array<DropOffMapServiceEntity>;
};

export enum Enum_Accessibility_Status {
  Archived = "archived",
  Draft = "draft",
  Published = "published",
}

export enum Enum_Audience_Type {
  Collectifs = "Collectifs",
  Particuliers = "Particuliers",
  Professionnels = "Professionnels",
}

export enum Enum_Collectdoortodoor_Grammaticalgender {
  Feminin = "feminin",
  Masculin = "masculin",
}

export enum Enum_Collectdropoff_Grammaticalgender {
  Feminin = "feminin",
  Masculin = "masculin",
}

export enum Enum_Collectvoluntary_Grammaticalgender {
  Feminin = "feminin",
  Masculin = "masculin",
}

export enum Enum_Componentblockscheckbox_Fieldstatuscheckbox {
  Obligatoire = "Obligatoire",
  Optionnel = "Optionnel",
}

export enum Enum_Componentblockscommentary_Commentarystatus {
  Facultatif = "Facultatif",
  Obligatoire = "Obligatoire",
}

export enum Enum_Componentblocksdatechoice_Fieldstatus {
  Obligatoire = "Obligatoire",
  Optionnel = "Optionnel",
}

export enum Enum_Componentblocksopeningday_Weekday {
  Dimanche = "Dimanche",
  Jeudi = "Jeudi",
  Lundi = "Lundi",
  Mardi = "Mardi",
  Mercredi = "Mercredi",
  Samedi = "Samedi",
  Vendredi = "Vendredi",
}

export enum Enum_Componentblocksqcm_Fieldstatusqcm {
  Obligatoire = "Obligatoire",
  Optionnel = "Optionnel",
}

export enum Enum_Componentblocksquestions_Textstatus {
  Obligatoire = "Obligatoire",
  Optionnel = "Optionnel",
}

export enum Enum_Componentblocksrequestslotsexceptions_Exceptiontype {
  Daily = "daily",
  DateRange = "dateRange",
}

export enum Enum_Componentblockssubheading_Subheadingtag {
  H2 = "h2",
  H3 = "h3",
  H4 = "h4",
  H5 = "h5",
  H6 = "h6",
}

export enum Enum_Componentlinksdropoffmap_Pointtodisplayonthemap {
  A = "A",
  B = "B",
  C = "C",
  D = "D",
  E = "E",
}

export enum Enum_Componentlinksrequest_Demand {
  A = "A",
  B = "B",
  C = "C",
  D = "D",
  E = "E",
}

export enum Enum_Contract_Clienttype {
  City = "city",
  Epci = "epci",
  Union = "union",
}

export enum Enum_Contract_Contractstatus {
  Actif = "Actif",
  Desactive = "Desactive",
  EnCours = "En_cours",
  Initialisation = "Initialisation",
}

export enum Enum_Dropoffmap_Wasteformsstatus {
  Accepted = "accepted",
  Refused = "refused",
}

export enum Enum_Editocontentdto_Status {
  Archived = "archived",
  Draft = "draft",
  Published = "published",
}

export enum Enum_Event_Status {
  Archived = "archived",
  Draft = "draft",
  Published = "published",
}

export enum Enum_Exportentity_Status {
  Finished = "Finished",
  InProgress = "In_progress",
  New = "New",
}

export enum Enum_Flow_Recyclinggesture {
  NoTrash = "no_trash",
  ToSort = "to_sort",
  ToTrash = "to_trash",
}

export enum Enum_Footer_Accessibilitylevel {
  Conform = "conform",
  NotConform = "not_conform",
  PartiallyConform = "partially_conform",
}

export enum Enum_Freecontent_Status {
  Archived = "archived",
  Draft = "draft",
  Published = "published",
}

export enum Enum_Mwcflow_Weightsystem {
  Dynamic = "Dynamic",
  Outlet = "Outlet",
}

export enum Enum_New_Status {
  Archived = "archived",
  Draft = "draft",
  Published = "published",
}

export enum Enum_Pickupday_Periodicity {
  Hebdomadaire = "hebdomadaire",
  Mensuel = "mensuel",
  SemaineImpaire = "semaineImpaire",
  SemainePaire = "semainePaire",
}

export enum Enum_Quiz_Status {
  Archived = "archived",
  Draft = "draft",
  Published = "published",
}

export enum Enum_Requestslot_Slottype {
  Personalized = "personalized",
  Weekly = "weekly",
}

export enum Enum_Tip_Status {
  Archived = "archived",
  Draft = "draft",
  Published = "published",
}

export enum Enum_Topcontentdto_Status {
  Archived = "archived",
  Draft = "draft",
  Published = "published",
}

export enum Enum_Wasteform_Status {
  Archived = "archived",
  Draft = "draft",
  Published = "published",
}

export enum Enum_Yeswescanform_Picturestatus {
  Mandatory = "mandatory",
  Masked = "masked",
  Optional = "optional",
}

export enum Enum_Yeswescanqrcode_Typeassociation {
  DropOffMap = "dropOffMap",
  SignalmentZone = "signalmentZone",
}

export type EditoBlock = {
  __typename?: "EditoBlock";
  audience?: Maybe<AudienceEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  displayBlock: Scalars["Boolean"];
  editoContents?: Maybe<Array<Maybe<EditoBlockEditoContentsDynamicZone>>>;
  homepage?: Maybe<HomepageEntityResponse>;
  titleContent: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type EditoBlockDto = {
  __typename?: "EditoBlockDTO";
  audienceId: Scalars["ID"];
  displayBlock: Scalars["Boolean"];
  editoContents?: Maybe<Array<Maybe<EditoContentDto>>>;
  id: Scalars["ID"];
  titleContent: Scalars["String"];
};

export type EditoBlockEditoContentsDynamicZone =
  | ComponentLinksEditoContent
  | Error;

export type EditoBlockEntity = {
  __typename?: "EditoBlockEntity";
  attributes?: Maybe<EditoBlock>;
  id?: Maybe<Scalars["ID"]>;
};

export type EditoBlockEntityResponse = {
  __typename?: "EditoBlockEntityResponse";
  data?: Maybe<EditoBlockEntity>;
};

export type EditoBlockEntityResponseCollection = {
  __typename?: "EditoBlockEntityResponseCollection";
  data: Array<EditoBlockEntity>;
  meta: ResponseCollectionMeta;
};

export type EditoBlockFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<EditoBlockFiltersInput>>>;
  audience?: InputMaybe<AudienceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  displayBlock?: InputMaybe<BooleanFilterInput>;
  homepage?: InputMaybe<HomepageFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<EditoBlockFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<EditoBlockFiltersInput>>>;
  titleContent?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type EditoBlockInput = {
  audience?: InputMaybe<Scalars["ID"]>;
  displayBlock?: InputMaybe<Scalars["Boolean"]>;
  editoContents?: InputMaybe<
    Array<Scalars["EditoBlockEditoContentsDynamicZoneInput"]>
  >;
  homepage?: InputMaybe<Scalars["ID"]>;
  titleContent?: InputMaybe<Scalars["String"]>;
};

export type EditoBlockRelationResponseCollection = {
  __typename?: "EditoBlockRelationResponseCollection";
  data: Array<EditoBlockEntity>;
};

export type EditoContentDto = {
  __typename?: "EditoContentDTO";
  attributes: EditoContentDtoAttributes;
  audienceId?: Maybe<Scalars["ID"]>;
  componentId?: Maybe<Scalars["ID"]>;
  contentType: Scalars["String"];
  id: Scalars["ID"];
  typeName: Scalars["String"];
  uniqueId: Scalars["ID"];
};

export type EditoContentDtoAttributes = {
  __typename?: "EditoContentDTOAttributes";
  publishedDate?: Maybe<Scalars["DateTime"]>;
  status?: Maybe<Enum_Editocontentdto_Status>;
  title: Scalars["String"];
};

export type EditorialService = {
  __typename?: "EditorialService";
  accessibilitySubService?: Maybe<AccessibilitySubServiceEntityResponse>;
  cguSubService?: Maybe<CguSubServiceEntityResponse>;
  cities?: Maybe<CityRelationResponseCollection>;
  confidentialitySubService?: Maybe<ConfidentialitySubServiceEntityResponse>;
  contactUsSubService?: Maybe<ContactUsSubServiceEntityResponse>;
  contract?: Maybe<ContractEntityResponse>;
  cookiesSubService?: Maybe<CookiesSubServiceEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  eventSubService?: Maybe<EventSubServiceEntityResponse>;
  freeContentSubServices?: Maybe<FreeContentSubServiceRelationResponseCollection>;
  newsSubService?: Maybe<NewsSubServiceEntityResponse>;
  quizSubService?: Maybe<QuizSubServiceEntityResponse>;
  tipSubService?: Maybe<TipSubServiceEntityResponse>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type EditorialServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type EditorialServiceFreeContentSubServicesArgs = {
  filters?: InputMaybe<FreeContentSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type EditorialServiceEntity = {
  __typename?: "EditorialServiceEntity";
  attributes?: Maybe<EditorialService>;
  id?: Maybe<Scalars["ID"]>;
};

export type EditorialServiceEntityResponse = {
  __typename?: "EditorialServiceEntityResponse";
  data?: Maybe<EditorialServiceEntity>;
};

export type EditorialServiceEntityResponseCollection = {
  __typename?: "EditorialServiceEntityResponseCollection";
  data: Array<EditorialServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type EditorialServiceFiltersInput = {
  accessibilitySubService?: InputMaybe<AccessibilitySubServiceFiltersInput>;
  and?: InputMaybe<Array<InputMaybe<EditorialServiceFiltersInput>>>;
  cguSubService?: InputMaybe<CguSubServiceFiltersInput>;
  cities?: InputMaybe<CityFiltersInput>;
  confidentialitySubService?: InputMaybe<ConfidentialitySubServiceFiltersInput>;
  contactUsSubService?: InputMaybe<ContactUsSubServiceFiltersInput>;
  contract?: InputMaybe<ContractFiltersInput>;
  cookiesSubService?: InputMaybe<CookiesSubServiceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  eventSubService?: InputMaybe<EventSubServiceFiltersInput>;
  freeContentSubServices?: InputMaybe<FreeContentSubServiceFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  newsSubService?: InputMaybe<NewsSubServiceFiltersInput>;
  not?: InputMaybe<EditorialServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<EditorialServiceFiltersInput>>>;
  quizSubService?: InputMaybe<QuizSubServiceFiltersInput>;
  tipSubService?: InputMaybe<TipSubServiceFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type EditorialServiceInput = {
  accessibilitySubService?: InputMaybe<Scalars["ID"]>;
  cguSubService?: InputMaybe<Scalars["ID"]>;
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  confidentialitySubService?: InputMaybe<Scalars["ID"]>;
  contactUsSubService?: InputMaybe<Scalars["ID"]>;
  contract?: InputMaybe<Scalars["ID"]>;
  cookiesSubService?: InputMaybe<Scalars["ID"]>;
  eventSubService?: InputMaybe<Scalars["ID"]>;
  freeContentSubServices?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  newsSubService?: InputMaybe<Scalars["ID"]>;
  quizSubService?: InputMaybe<Scalars["ID"]>;
  tipSubService?: InputMaybe<Scalars["ID"]>;
};

export type EnrichRequest = {
  __typename?: "EnrichRequest";
  dynamicAppointments?: Maybe<Scalars["Int"]>;
  requestId?: Maybe<Scalars["ID"]>;
  requestName?: Maybe<Scalars["String"]>;
};

export type Epci = {
  __typename?: "Epci";
  createdAt?: Maybe<Scalars["DateTime"]>;
  name?: Maybe<Scalars["String"]>;
  siren: Scalars["String"];
  territories?: Maybe<TerritoryRelationResponseCollection>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type EpciTerritoriesArgs = {
  filters?: InputMaybe<TerritoryFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type EpciEntity = {
  __typename?: "EpciEntity";
  attributes?: Maybe<Epci>;
  id?: Maybe<Scalars["ID"]>;
};

export type EpciEntityResponse = {
  __typename?: "EpciEntityResponse";
  data?: Maybe<EpciEntity>;
};

export type EpciEntityResponseCollection = {
  __typename?: "EpciEntityResponseCollection";
  data: Array<EpciEntity>;
  meta: ResponseCollectionMeta;
};

export type EpciFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<EpciFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<EpciFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<EpciFiltersInput>>>;
  siren?: InputMaybe<StringFilterInput>;
  territories?: InputMaybe<TerritoryFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type EpciInformation = {
  __typename?: "EpciInformation";
  code?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
};

export type EpciInput = {
  name?: InputMaybe<Scalars["String"]>;
  siren?: InputMaybe<Scalars["String"]>;
  territories?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type EpciRelationResponseCollection = {
  __typename?: "EpciRelationResponseCollection";
  data: Array<EpciEntity>;
};

export type Error = {
  __typename?: "Error";
  code: Scalars["String"];
  message?: Maybe<Scalars["String"]>;
};

export type Event = {
  __typename?: "Event";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  blocks?: Maybe<Array<Maybe<EventBlocksDynamicZone>>>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  customId?: Maybe<Scalars["String"]>;
  documents?: Maybe<DocumentRelationResponseCollection>;
  draftCreationId?: Maybe<Scalars["String"]>;
  eventSubService?: Maybe<EventSubServiceEntityResponse>;
  events?: Maybe<EventRelationResponseCollection>;
  hasDraft?: Maybe<Scalars["Boolean"]>;
  image: UploadFileEntityResponse;
  publishedDate?: Maybe<Scalars["DateTime"]>;
  shortDescription?: Maybe<Scalars["String"]>;
  status?: Maybe<Enum_Event_Status>;
  tags?: Maybe<TagRelationResponseCollection>;
  title: Scalars["String"];
  toBeUpdated?: Maybe<Scalars["Boolean"]>;
  unpublishedDate?: Maybe<Scalars["DateTime"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  versionNumber?: Maybe<Scalars["Int"]>;
};

export type EventAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type EventDocumentsArgs = {
  filters?: InputMaybe<DocumentFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type EventEventsArgs = {
  filters?: InputMaybe<EventFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type EventTagsArgs = {
  filters?: InputMaybe<TagFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type EventBlocksDynamicZone =
  | ComponentBlocksFile
  | ComponentBlocksHorizontalRule
  | ComponentBlocksImage
  | ComponentBlocksServices
  | ComponentBlocksSubHeading
  | ComponentBlocksVideo
  | ComponentBlocksWysiwyg
  | Error;

export type EventEntity = {
  __typename?: "EventEntity";
  attributes?: Maybe<Event>;
  id?: Maybe<Scalars["ID"]>;
};

export type EventEntityResponse = {
  __typename?: "EventEntityResponse";
  data?: Maybe<EventEntity>;
};

export type EventEntityResponseCollection = {
  __typename?: "EventEntityResponseCollection";
  data: Array<EventEntity>;
  meta: ResponseCollectionMeta;
};

export type EventFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<EventFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  customId?: InputMaybe<StringFilterInput>;
  documents?: InputMaybe<DocumentFiltersInput>;
  draftCreationId?: InputMaybe<StringFilterInput>;
  eventSubService?: InputMaybe<EventSubServiceFiltersInput>;
  events?: InputMaybe<EventFiltersInput>;
  hasDraft?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<EventFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<EventFiltersInput>>>;
  publishedDate?: InputMaybe<DateTimeFilterInput>;
  shortDescription?: InputMaybe<StringFilterInput>;
  status?: InputMaybe<StringFilterInput>;
  tags?: InputMaybe<TagFiltersInput>;
  title?: InputMaybe<StringFilterInput>;
  toBeUpdated?: InputMaybe<BooleanFilterInput>;
  unpublishedDate?: InputMaybe<DateTimeFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  versionNumber?: InputMaybe<IntFilterInput>;
};

export type EventInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  blocks?: InputMaybe<Array<Scalars["EventBlocksDynamicZoneInput"]>>;
  customId?: InputMaybe<Scalars["String"]>;
  documents?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  draftCreationId?: InputMaybe<Scalars["String"]>;
  eventSubService?: InputMaybe<Scalars["ID"]>;
  events?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  hasDraft?: InputMaybe<Scalars["Boolean"]>;
  image?: InputMaybe<Scalars["ID"]>;
  publishedDate?: InputMaybe<Scalars["DateTime"]>;
  shortDescription?: InputMaybe<Scalars["String"]>;
  status?: InputMaybe<Enum_Event_Status>;
  tags?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  title?: InputMaybe<Scalars["String"]>;
  toBeUpdated?: InputMaybe<Scalars["Boolean"]>;
  unpublishedDate?: InputMaybe<Scalars["DateTime"]>;
  versionNumber?: InputMaybe<Scalars["Int"]>;
};

export type EventOrNews = {
  __typename?: "EventOrNews";
  image?: Maybe<UploadFile>;
  originalId: Scalars["ID"];
  publishedDate: Scalars["DateTime"];
  shortDescription?: Maybe<Scalars["String"]>;
  tags?: Maybe<Array<Maybe<Tag>>>;
  title: Scalars["String"];
  type: EventsOrNewsType;
};

export type EventRelationResponseCollection = {
  __typename?: "EventRelationResponseCollection";
  data: Array<EventEntity>;
};

export type EventSubService = {
  __typename?: "EventSubService";
  cities?: Maybe<CityRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  endDate?: Maybe<Scalars["Date"]>;
  events?: Maybe<EventRelationResponseCollection>;
  isActivated: Scalars["Boolean"];
  name: Scalars["String"];
  startDate?: Maybe<Scalars["Date"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type EventSubServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type EventSubServiceEventsArgs = {
  filters?: InputMaybe<EventFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type EventSubServiceEntity = {
  __typename?: "EventSubServiceEntity";
  attributes?: Maybe<EventSubService>;
  id?: Maybe<Scalars["ID"]>;
};

export type EventSubServiceEntityResponse = {
  __typename?: "EventSubServiceEntityResponse";
  data?: Maybe<EventSubServiceEntity>;
};

export type EventSubServiceEntityResponseCollection = {
  __typename?: "EventSubServiceEntityResponseCollection";
  data: Array<EventSubServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type EventSubServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<EventSubServiceFiltersInput>>>;
  cities?: InputMaybe<CityFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  editorialService?: InputMaybe<EditorialServiceFiltersInput>;
  endDate?: InputMaybe<DateFilterInput>;
  events?: InputMaybe<EventFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<EventSubServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<EventSubServiceFiltersInput>>>;
  startDate?: InputMaybe<DateFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type EventSubServiceInput = {
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  description?: InputMaybe<Scalars["String"]>;
  editorialService?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  events?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  startDate?: InputMaybe<Scalars["Date"]>;
};

export type EventSubServiceRelationResponseCollection = {
  __typename?: "EventSubServiceRelationResponseCollection";
  data: Array<EventSubServiceEntity>;
};

export enum EventsOrNewsType {
  Event = "event",
  New = "new",
}

export type ExportEntity = {
  __typename?: "ExportEntity";
  createdAt?: Maybe<Scalars["DateTime"]>;
  displayName?: Maybe<Scalars["String"]>;
  filePath?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  status?: Maybe<Enum_Exportentity_Status>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type ExportEntityEntity = {
  __typename?: "ExportEntityEntity";
  attributes?: Maybe<ExportEntity>;
  id?: Maybe<Scalars["ID"]>;
};

export type ExportEntityEntityResponse = {
  __typename?: "ExportEntityEntityResponse";
  data?: Maybe<ExportEntityEntity>;
};

export type ExportEntityEntityResponseCollection = {
  __typename?: "ExportEntityEntityResponseCollection";
  data: Array<ExportEntityEntity>;
  meta: ResponseCollectionMeta;
};

export type ExportEntityFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ExportEntityFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  displayName?: InputMaybe<StringFilterInput>;
  filePath?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<ExportEntityFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ExportEntityFiltersInput>>>;
  status?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type ExportEntityInput = {
  displayName?: InputMaybe<Scalars["String"]>;
  filePath?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
  status?: InputMaybe<Enum_Exportentity_Status>;
};

export type File = {
  __typename?: "File";
  id: Scalars["Int"];
  name: Scalars["String"];
  url: Scalars["String"];
};

export type FileInfoInput = {
  alternativeText?: InputMaybe<Scalars["String"]>;
  caption?: InputMaybe<Scalars["String"]>;
  folder?: InputMaybe<Scalars["ID"]>;
  name?: InputMaybe<Scalars["String"]>;
};

export type Files = {
  __typename?: "Files";
  alternativeText?: Maybe<Scalars["String"]>;
  folderPath?: Maybe<Scalars["String"]>;
  formats?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["ID"]>;
  mime?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
};

export type FloatFilterInput = {
  and?: InputMaybe<Array<InputMaybe<Scalars["Float"]>>>;
  between?: InputMaybe<Array<InputMaybe<Scalars["Float"]>>>;
  contains?: InputMaybe<Scalars["Float"]>;
  containsi?: InputMaybe<Scalars["Float"]>;
  endsWith?: InputMaybe<Scalars["Float"]>;
  eq?: InputMaybe<Scalars["Float"]>;
  eqi?: InputMaybe<Scalars["Float"]>;
  gt?: InputMaybe<Scalars["Float"]>;
  gte?: InputMaybe<Scalars["Float"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["Float"]>>>;
  lt?: InputMaybe<Scalars["Float"]>;
  lte?: InputMaybe<Scalars["Float"]>;
  ne?: InputMaybe<Scalars["Float"]>;
  not?: InputMaybe<FloatFilterInput>;
  notContains?: InputMaybe<Scalars["Float"]>;
  notContainsi?: InputMaybe<Scalars["Float"]>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars["Float"]>>>;
  notNull?: InputMaybe<Scalars["Boolean"]>;
  null?: InputMaybe<Scalars["Boolean"]>;
  or?: InputMaybe<Array<InputMaybe<Scalars["Float"]>>>;
  startsWith?: InputMaybe<Scalars["Float"]>;
};

export type Flow = {
  __typename?: "Flow";
  code?: Maybe<Scalars["String"]>;
  collectDoorToDoors?: Maybe<CollectDoorToDoorRelationResponseCollection>;
  collectDropOffs?: Maybe<CollectDropOffRelationResponseCollection>;
  collectVoluntaries?: Maybe<CollectVoluntaryRelationResponseCollection>;
  color?: Maybe<FlowColorEntityResponse>;
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  isActivated?: Maybe<Scalars["Boolean"]>;
  mwcFlow?: Maybe<MwcFlowEntityResponse>;
  name?: Maybe<Scalars["String"]>;
  pickUpDays?: Maybe<PickUpDayRelationResponseCollection>;
  recyclingGesture: Enum_Flow_Recyclinggesture;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  wasteForms?: Maybe<WasteFormRelationResponseCollection>;
};

export type FlowCollectDoorToDoorsArgs = {
  filters?: InputMaybe<CollectDoorToDoorFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type FlowCollectDropOffsArgs = {
  filters?: InputMaybe<CollectDropOffFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type FlowCollectVoluntariesArgs = {
  filters?: InputMaybe<CollectVoluntaryFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type FlowPickUpDaysArgs = {
  filters?: InputMaybe<PickUpDayFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type FlowWasteFormsArgs = {
  filters?: InputMaybe<WasteFormFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type FlowColor = {
  __typename?: "FlowColor";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  hexaCode: Scalars["String"];
  name: Scalars["String"];
  shouldChangeHexaCode: Scalars["Boolean"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type FlowColorEntity = {
  __typename?: "FlowColorEntity";
  attributes?: Maybe<FlowColor>;
  id?: Maybe<Scalars["ID"]>;
};

export type FlowColorEntityResponse = {
  __typename?: "FlowColorEntityResponse";
  data?: Maybe<FlowColorEntity>;
};

export type FlowColorEntityResponseCollection = {
  __typename?: "FlowColorEntityResponseCollection";
  data: Array<FlowColorEntity>;
  meta: ResponseCollectionMeta;
};

export type FlowColorFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<FlowColorFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  hexaCode?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<FlowColorFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<FlowColorFiltersInput>>>;
  shouldChangeHexaCode?: InputMaybe<BooleanFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type FlowColorInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  hexaCode?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
  shouldChangeHexaCode?: InputMaybe<Scalars["Boolean"]>;
};

export type FlowEntity = {
  __typename?: "FlowEntity";
  attributes?: Maybe<Flow>;
  id?: Maybe<Scalars["ID"]>;
};

export type FlowEntityResponse = {
  __typename?: "FlowEntityResponse";
  data?: Maybe<FlowEntity>;
};

export type FlowEntityResponseCollection = {
  __typename?: "FlowEntityResponseCollection";
  data: Array<FlowEntity>;
  meta: ResponseCollectionMeta;
};

export type FlowFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<FlowFiltersInput>>>;
  code?: InputMaybe<StringFilterInput>;
  collectDoorToDoors?: InputMaybe<CollectDoorToDoorFiltersInput>;
  collectDropOffs?: InputMaybe<CollectDropOffFiltersInput>;
  collectVoluntaries?: InputMaybe<CollectVoluntaryFiltersInput>;
  color?: InputMaybe<FlowColorFiltersInput>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  mwcFlow?: InputMaybe<MwcFlowFiltersInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<FlowFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<FlowFiltersInput>>>;
  pickUpDays?: InputMaybe<PickUpDayFiltersInput>;
  recyclingGesture?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  wasteForms?: InputMaybe<WasteFormFiltersInput>;
};

export type FlowInput = {
  code?: InputMaybe<Scalars["String"]>;
  collectDoorToDoors?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  collectDropOffs?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  collectVoluntaries?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  color?: InputMaybe<Scalars["ID"]>;
  contract?: InputMaybe<Scalars["ID"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  mwcFlow?: InputMaybe<Scalars["ID"]>;
  name?: InputMaybe<Scalars["String"]>;
  pickUpDays?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  recyclingGesture?: InputMaybe<Enum_Flow_Recyclinggesture>;
  wasteForms?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type FlowRelationResponseCollection = {
  __typename?: "FlowRelationResponseCollection";
  data: Array<FlowEntity>;
};

export type Folders = {
  __typename?: "Folders";
  id?: Maybe<Scalars["ID"]>;
  name?: Maybe<Scalars["String"]>;
  path?: Maybe<Scalars["String"]>;
  pathId?: Maybe<Scalars["String"]>;
};

export type Footer = {
  __typename?: "Footer";
  accessibilityLevel?: Maybe<Enum_Footer_Accessibilitylevel>;
  accessibilitySubService?: Maybe<AccessibilitySubServiceEntityResponse>;
  cguSubService?: Maybe<CguSubServiceEntityResponse>;
  confidentialitySubService?: Maybe<ConfidentialitySubServiceEntityResponse>;
  contactUsSubService?: Maybe<ContactUsSubServiceEntityResponse>;
  contractCustomization?: Maybe<ContractCustomizationEntityResponse>;
  cookiesSubService?: Maybe<CookiesSubServiceEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  displayLink?: Maybe<Scalars["Boolean"]>;
  linkName?: Maybe<Scalars["String"]>;
  linkUrl?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type FooterEntity = {
  __typename?: "FooterEntity";
  attributes?: Maybe<Footer>;
  id?: Maybe<Scalars["ID"]>;
};

export type FooterEntityResponse = {
  __typename?: "FooterEntityResponse";
  data?: Maybe<FooterEntity>;
};

export type FooterEntityResponseCollection = {
  __typename?: "FooterEntityResponseCollection";
  data: Array<FooterEntity>;
  meta: ResponseCollectionMeta;
};

export type FooterFiltersInput = {
  accessibilityLevel?: InputMaybe<StringFilterInput>;
  accessibilitySubService?: InputMaybe<AccessibilitySubServiceFiltersInput>;
  and?: InputMaybe<Array<InputMaybe<FooterFiltersInput>>>;
  cguSubService?: InputMaybe<CguSubServiceFiltersInput>;
  confidentialitySubService?: InputMaybe<ConfidentialitySubServiceFiltersInput>;
  contactUsSubService?: InputMaybe<ContactUsSubServiceFiltersInput>;
  contractCustomization?: InputMaybe<ContractCustomizationFiltersInput>;
  cookiesSubService?: InputMaybe<CookiesSubServiceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  displayLink?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  linkName?: InputMaybe<StringFilterInput>;
  linkUrl?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<FooterFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<FooterFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type FooterInput = {
  accessibilityLevel?: InputMaybe<Enum_Footer_Accessibilitylevel>;
  accessibilitySubService?: InputMaybe<Scalars["ID"]>;
  cguSubService?: InputMaybe<Scalars["ID"]>;
  confidentialitySubService?: InputMaybe<Scalars["ID"]>;
  contactUsSubService?: InputMaybe<Scalars["ID"]>;
  contractCustomization?: InputMaybe<Scalars["ID"]>;
  cookiesSubService?: InputMaybe<Scalars["ID"]>;
  displayLink?: InputMaybe<Scalars["Boolean"]>;
  linkName?: InputMaybe<Scalars["String"]>;
  linkUrl?: InputMaybe<Scalars["String"]>;
};

export type FreeContent = {
  __typename?: "FreeContent";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  blocks?: Maybe<Array<Maybe<FreeContentBlocksDynamicZone>>>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  customId?: Maybe<Scalars["String"]>;
  draftCreationId?: Maybe<Scalars["String"]>;
  freeContentSubService?: Maybe<FreeContentSubServiceEntityResponse>;
  hasDraft?: Maybe<Scalars["Boolean"]>;
  image: UploadFileEntityResponse;
  publishedDate?: Maybe<Scalars["DateTime"]>;
  shortDescription?: Maybe<Scalars["String"]>;
  status?: Maybe<Enum_Freecontent_Status>;
  tags?: Maybe<TagRelationResponseCollection>;
  title: Scalars["String"];
  toBeUpdated?: Maybe<Scalars["Boolean"]>;
  unpublishedDate?: Maybe<Scalars["DateTime"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  versionNumber?: Maybe<Scalars["Int"]>;
};

export type FreeContentAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type FreeContentTagsArgs = {
  filters?: InputMaybe<TagFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type FreeContentBlocksDynamicZone =
  | ComponentBlocksFile
  | ComponentBlocksHorizontalRule
  | ComponentBlocksImage
  | ComponentBlocksServices
  | ComponentBlocksSubHeading
  | ComponentBlocksVideo
  | ComponentBlocksWysiwyg
  | Error;

export type FreeContentEntity = {
  __typename?: "FreeContentEntity";
  attributes?: Maybe<FreeContent>;
  id?: Maybe<Scalars["ID"]>;
};

export type FreeContentEntityResponse = {
  __typename?: "FreeContentEntityResponse";
  data?: Maybe<FreeContentEntity>;
};

export type FreeContentEntityResponseCollection = {
  __typename?: "FreeContentEntityResponseCollection";
  data: Array<FreeContentEntity>;
  meta: ResponseCollectionMeta;
};

export type FreeContentFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<FreeContentFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  customId?: InputMaybe<StringFilterInput>;
  draftCreationId?: InputMaybe<StringFilterInput>;
  freeContentSubService?: InputMaybe<FreeContentSubServiceFiltersInput>;
  hasDraft?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<FreeContentFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<FreeContentFiltersInput>>>;
  publishedDate?: InputMaybe<DateTimeFilterInput>;
  shortDescription?: InputMaybe<StringFilterInput>;
  status?: InputMaybe<StringFilterInput>;
  tags?: InputMaybe<TagFiltersInput>;
  title?: InputMaybe<StringFilterInput>;
  toBeUpdated?: InputMaybe<BooleanFilterInput>;
  unpublishedDate?: InputMaybe<DateTimeFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  versionNumber?: InputMaybe<IntFilterInput>;
};

export type FreeContentInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  blocks?: InputMaybe<Array<Scalars["FreeContentBlocksDynamicZoneInput"]>>;
  customId?: InputMaybe<Scalars["String"]>;
  draftCreationId?: InputMaybe<Scalars["String"]>;
  freeContentSubService?: InputMaybe<Scalars["ID"]>;
  hasDraft?: InputMaybe<Scalars["Boolean"]>;
  image?: InputMaybe<Scalars["ID"]>;
  publishedDate?: InputMaybe<Scalars["DateTime"]>;
  shortDescription?: InputMaybe<Scalars["String"]>;
  status?: InputMaybe<Enum_Freecontent_Status>;
  tags?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  title?: InputMaybe<Scalars["String"]>;
  toBeUpdated?: InputMaybe<Scalars["Boolean"]>;
  unpublishedDate?: InputMaybe<Scalars["DateTime"]>;
  versionNumber?: InputMaybe<Scalars["Int"]>;
};

export type FreeContentRelationResponseCollection = {
  __typename?: "FreeContentRelationResponseCollection";
  data: Array<FreeContentEntity>;
};

export type FreeContentSubService = {
  __typename?: "FreeContentSubService";
  cities?: Maybe<CityRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  endDate?: Maybe<Scalars["Date"]>;
  freeContents?: Maybe<FreeContentRelationResponseCollection>;
  isActivated: Scalars["Boolean"];
  name: Scalars["String"];
  startDate?: Maybe<Scalars["Date"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type FreeContentSubServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type FreeContentSubServiceFreeContentsArgs = {
  filters?: InputMaybe<FreeContentFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type FreeContentSubServiceEntity = {
  __typename?: "FreeContentSubServiceEntity";
  attributes?: Maybe<FreeContentSubService>;
  id?: Maybe<Scalars["ID"]>;
};

export type FreeContentSubServiceEntityResponse = {
  __typename?: "FreeContentSubServiceEntityResponse";
  data?: Maybe<FreeContentSubServiceEntity>;
};

export type FreeContentSubServiceEntityResponseCollection = {
  __typename?: "FreeContentSubServiceEntityResponseCollection";
  data: Array<FreeContentSubServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type FreeContentSubServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<FreeContentSubServiceFiltersInput>>>;
  cities?: InputMaybe<CityFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  editorialService?: InputMaybe<EditorialServiceFiltersInput>;
  endDate?: InputMaybe<DateFilterInput>;
  freeContents?: InputMaybe<FreeContentFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<FreeContentSubServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<FreeContentSubServiceFiltersInput>>>;
  startDate?: InputMaybe<DateFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type FreeContentSubServiceInput = {
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  description?: InputMaybe<Scalars["String"]>;
  editorialService?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  freeContents?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  startDate?: InputMaybe<Scalars["Date"]>;
};

export type FreeContentSubServiceRelationResponseCollection = {
  __typename?: "FreeContentSubServiceRelationResponseCollection";
  data: Array<FreeContentSubServiceEntity>;
};

export type GenericMorph =
  | Accessibility
  | AccessibilitySubService
  | AlertNotification
  | AlertNotificationService
  | AlertUserStorage
  | Audience
  | Cgu
  | CguSubService
  | ChannelType
  | City
  | ClientContact
  | CollectDoorToDoor
  | CollectDropOff
  | CollectVoluntary
  | ComponentBlocksAttachments
  | ComponentBlocksCheckbox
  | ComponentBlocksCommentary
  | ComponentBlocksCumbersome
  | ComponentBlocksDateChoice
  | ComponentBlocksDownloadBlock
  | ComponentBlocksFile
  | ComponentBlocksHorizontalRule
  | ComponentBlocksImage
  | ComponentBlocksOpeningDay
  | ComponentBlocksQcm
  | ComponentBlocksQuestions
  | ComponentBlocksRequestSlotsExceptions
  | ComponentBlocksRequestType
  | ComponentBlocksServices
  | ComponentBlocksSubHeading
  | ComponentBlocksTest
  | ComponentBlocksVideo
  | ComponentBlocksWysiwyg
  | ComponentLinksAlertNotification
  | ComponentLinksContactUs
  | ComponentLinksDropOffMap
  | ComponentLinksEditoContent
  | ComponentLinksEditorial
  | ComponentLinksEvents
  | ComponentLinksExternal
  | ComponentLinksFrees
  | ComponentLinksKeyMetrics
  | ComponentLinksMyWasteCounter
  | ComponentLinksNews
  | ComponentLinksPickUpDay
  | ComponentLinksQuizzes
  | ComponentLinksRecyclingGuide
  | ComponentLinksRequest
  | ComponentLinksTips
  | ComponentLinksTopContent
  | Confidentiality
  | ConfidentialitySubService
  | ContactUs
  | ContactUsSubService
  | Contract
  | ContractCustomization
  | ContractMenu
  | Cookie
  | CookiesSubService
  | DescriptionService
  | Document
  | DropOffMap
  | DropOffMapService
  | EditoBlock
  | EditorialService
  | Epci
  | Event
  | EventSubService
  | ExportEntity
  | Flow
  | FlowColor
  | Footer
  | FreeContent
  | FreeContentSubService
  | Global
  | Homepage
  | I18NLocale
  | InformationMessage
  | KeyMetric
  | KeyMetricsService
  | MwCounterService
  | MwcFlow
  | New
  | NewsSubService
  | PickUpDay
  | PickUpDayService
  | Quiz
  | QuizAndTipsBlock
  | QuizSubService
  | RecyclingGuideBlock
  | RecyclingGuideService
  | Request
  | RequestAggregate
  | RequestService
  | RequestSlot
  | RequestTaked
  | SearchEngineBlock
  | Sectorization
  | ServicesBlock
  | Tag
  | Territory
  | TerritoryType
  | Tip
  | TipSubService
  | TopContentBlock
  | UploadFile
  | UploadFolder
  | UserDataStorage
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | WasteFamily
  | WasteForm
  | WelcomeMessageBlock
  | YesWeScanForm
  | YesWeScanQrCode
  | YesWeScanService;

export type Global = {
  __typename?: "Global";
  createdAt?: Maybe<Scalars["DateTime"]>;
  favicon?: Maybe<UploadFileEntityResponse>;
  siteDescription: Scalars["String"];
  siteName: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type GlobalEntity = {
  __typename?: "GlobalEntity";
  attributes?: Maybe<Global>;
  id?: Maybe<Scalars["ID"]>;
};

export type GlobalEntityResponse = {
  __typename?: "GlobalEntityResponse";
  data?: Maybe<GlobalEntity>;
};

export type GlobalInput = {
  favicon?: InputMaybe<Scalars["ID"]>;
  siteDescription?: InputMaybe<Scalars["String"]>;
  siteName?: InputMaybe<Scalars["String"]>;
};

export type Historic = {
  __typename?: "Historic";
  city?: Maybe<Scalars["String"]>;
  date?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  recipient?: Maybe<Scalars["String"]>;
  type?: Maybe<Scalars["String"]>;
};

export type Homepage = {
  __typename?: "Homepage";
  contractCustomization?: Maybe<ContractCustomizationEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  editoBlocks?: Maybe<EditoBlockRelationResponseCollection>;
  quizAndTipsBlocks?: Maybe<QuizAndTipsBlockRelationResponseCollection>;
  recyclingGuideBlock?: Maybe<RecyclingGuideBlockEntityResponse>;
  searchEngineBlock?: Maybe<SearchEngineBlockEntityResponse>;
  services?: Maybe<ComponentBlocksServices>;
  servicesBlocks?: Maybe<ServicesBlockRelationResponseCollection>;
  topContentBlocks?: Maybe<TopContentBlockRelationResponseCollection>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  welcomeMessageBlock?: Maybe<WelcomeMessageBlockEntityResponse>;
};

export type HomepageEditoBlocksArgs = {
  filters?: InputMaybe<EditoBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type HomepageQuizAndTipsBlocksArgs = {
  filters?: InputMaybe<QuizAndTipsBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type HomepageServicesBlocksArgs = {
  filters?: InputMaybe<ServicesBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type HomepageTopContentBlocksArgs = {
  filters?: InputMaybe<TopContentBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type HomepageEntity = {
  __typename?: "HomepageEntity";
  attributes?: Maybe<Homepage>;
  id?: Maybe<Scalars["ID"]>;
};

export type HomepageEntityResponse = {
  __typename?: "HomepageEntityResponse";
  data?: Maybe<HomepageEntity>;
};

export type HomepageEntityResponseCollection = {
  __typename?: "HomepageEntityResponseCollection";
  data: Array<HomepageEntity>;
  meta: ResponseCollectionMeta;
};

export type HomepageFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<HomepageFiltersInput>>>;
  contractCustomization?: InputMaybe<ContractCustomizationFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  editoBlocks?: InputMaybe<EditoBlockFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<HomepageFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<HomepageFiltersInput>>>;
  quizAndTipsBlocks?: InputMaybe<QuizAndTipsBlockFiltersInput>;
  recyclingGuideBlock?: InputMaybe<RecyclingGuideBlockFiltersInput>;
  searchEngineBlock?: InputMaybe<SearchEngineBlockFiltersInput>;
  services?: InputMaybe<ComponentBlocksServicesFiltersInput>;
  servicesBlocks?: InputMaybe<ServicesBlockFiltersInput>;
  topContentBlocks?: InputMaybe<TopContentBlockFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  welcomeMessageBlock?: InputMaybe<WelcomeMessageBlockFiltersInput>;
};

export type HomepageInput = {
  contractCustomization?: InputMaybe<Scalars["ID"]>;
  editoBlocks?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  quizAndTipsBlocks?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  recyclingGuideBlock?: InputMaybe<Scalars["ID"]>;
  searchEngineBlock?: InputMaybe<Scalars["ID"]>;
  services?: InputMaybe<ComponentBlocksServicesInput>;
  servicesBlocks?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  topContentBlocks?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  welcomeMessageBlock?: InputMaybe<Scalars["ID"]>;
};

export type I18NLocale = {
  __typename?: "I18NLocale";
  code?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  name?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type I18NLocaleEntity = {
  __typename?: "I18NLocaleEntity";
  attributes?: Maybe<I18NLocale>;
  id?: Maybe<Scalars["ID"]>;
};

export type I18NLocaleEntityResponse = {
  __typename?: "I18NLocaleEntityResponse";
  data?: Maybe<I18NLocaleEntity>;
};

export type I18NLocaleEntityResponseCollection = {
  __typename?: "I18NLocaleEntityResponseCollection";
  data: Array<I18NLocaleEntity>;
  meta: ResponseCollectionMeta;
};

export type I18NLocaleFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<I18NLocaleFiltersInput>>>;
  code?: InputMaybe<StringFilterInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<I18NLocaleFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<I18NLocaleFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type IdFilterInput = {
  and?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  between?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  contains?: InputMaybe<Scalars["ID"]>;
  containsi?: InputMaybe<Scalars["ID"]>;
  endsWith?: InputMaybe<Scalars["ID"]>;
  eq?: InputMaybe<Scalars["ID"]>;
  eqi?: InputMaybe<Scalars["ID"]>;
  gt?: InputMaybe<Scalars["ID"]>;
  gte?: InputMaybe<Scalars["ID"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  lt?: InputMaybe<Scalars["ID"]>;
  lte?: InputMaybe<Scalars["ID"]>;
  ne?: InputMaybe<Scalars["ID"]>;
  not?: InputMaybe<IdFilterInput>;
  notContains?: InputMaybe<Scalars["ID"]>;
  notContainsi?: InputMaybe<Scalars["ID"]>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  notNull?: InputMaybe<Scalars["Boolean"]>;
  null?: InputMaybe<Scalars["Boolean"]>;
  or?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  startsWith?: InputMaybe<Scalars["ID"]>;
};

export type Image = {
  __typename?: "Image";
  alternativeText?: Maybe<Scalars["String"]>;
  hash?: Maybe<Scalars["String"]>;
  height?: Maybe<Scalars["String"]>;
  mime?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["String"]>;
  url?: Maybe<Scalars["String"]>;
  width?: Maybe<Scalars["String"]>;
};

export type InformationMessage = {
  __typename?: "InformationMessage";
  createdAt?: Maybe<Scalars["DateTime"]>;
  dateEnd?: Maybe<Scalars["String"]>;
  dateStart: Scalars["String"];
  infoMessage: Scalars["String"];
  pickUpDays?: Maybe<PickUpDayRelationResponseCollection>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type InformationMessagePickUpDaysArgs = {
  filters?: InputMaybe<PickUpDayFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type InformationMessageEntity = {
  __typename?: "InformationMessageEntity";
  attributes?: Maybe<InformationMessage>;
  id?: Maybe<Scalars["ID"]>;
};

export type InformationMessageEntityResponse = {
  __typename?: "InformationMessageEntityResponse";
  data?: Maybe<InformationMessageEntity>;
};

export type InformationMessageEntityResponseCollection = {
  __typename?: "InformationMessageEntityResponseCollection";
  data: Array<InformationMessageEntity>;
  meta: ResponseCollectionMeta;
};

export type InformationMessageFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<InformationMessageFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  dateEnd?: InputMaybe<StringFilterInput>;
  dateStart?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  infoMessage?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<InformationMessageFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<InformationMessageFiltersInput>>>;
  pickUpDays?: InputMaybe<PickUpDayFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type InformationMessageInput = {
  dateEnd?: InputMaybe<Scalars["String"]>;
  dateStart?: InputMaybe<Scalars["String"]>;
  infoMessage?: InputMaybe<Scalars["String"]>;
  pickUpDays?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type IntFilterInput = {
  and?: InputMaybe<Array<InputMaybe<Scalars["Int"]>>>;
  between?: InputMaybe<Array<InputMaybe<Scalars["Int"]>>>;
  contains?: InputMaybe<Scalars["Int"]>;
  containsi?: InputMaybe<Scalars["Int"]>;
  endsWith?: InputMaybe<Scalars["Int"]>;
  eq?: InputMaybe<Scalars["Int"]>;
  eqi?: InputMaybe<Scalars["Int"]>;
  gt?: InputMaybe<Scalars["Int"]>;
  gte?: InputMaybe<Scalars["Int"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["Int"]>>>;
  lt?: InputMaybe<Scalars["Int"]>;
  lte?: InputMaybe<Scalars["Int"]>;
  ne?: InputMaybe<Scalars["Int"]>;
  not?: InputMaybe<IntFilterInput>;
  notContains?: InputMaybe<Scalars["Int"]>;
  notContainsi?: InputMaybe<Scalars["Int"]>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars["Int"]>>>;
  notNull?: InputMaybe<Scalars["Boolean"]>;
  null?: InputMaybe<Scalars["Boolean"]>;
  or?: InputMaybe<Array<InputMaybe<Scalars["Int"]>>>;
  startsWith?: InputMaybe<Scalars["Int"]>;
};

export type JsonFilterInput = {
  and?: InputMaybe<Array<InputMaybe<Scalars["JSON"]>>>;
  between?: InputMaybe<Array<InputMaybe<Scalars["JSON"]>>>;
  contains?: InputMaybe<Scalars["JSON"]>;
  containsi?: InputMaybe<Scalars["JSON"]>;
  endsWith?: InputMaybe<Scalars["JSON"]>;
  eq?: InputMaybe<Scalars["JSON"]>;
  eqi?: InputMaybe<Scalars["JSON"]>;
  gt?: InputMaybe<Scalars["JSON"]>;
  gte?: InputMaybe<Scalars["JSON"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["JSON"]>>>;
  lt?: InputMaybe<Scalars["JSON"]>;
  lte?: InputMaybe<Scalars["JSON"]>;
  ne?: InputMaybe<Scalars["JSON"]>;
  not?: InputMaybe<JsonFilterInput>;
  notContains?: InputMaybe<Scalars["JSON"]>;
  notContainsi?: InputMaybe<Scalars["JSON"]>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars["JSON"]>>>;
  notNull?: InputMaybe<Scalars["Boolean"]>;
  null?: InputMaybe<Scalars["Boolean"]>;
  or?: InputMaybe<Array<InputMaybe<Scalars["JSON"]>>>;
  startsWith?: InputMaybe<Scalars["JSON"]>;
};

export type KeyMetric = {
  __typename?: "KeyMetric";
  createdAt?: Maybe<Scalars["DateTime"]>;
  publishedAt?: Maybe<Scalars["DateTime"]>;
  title: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type KeyMetricEntity = {
  __typename?: "KeyMetricEntity";
  attributes?: Maybe<KeyMetric>;
  id?: Maybe<Scalars["ID"]>;
};

export type KeyMetricEntityResponse = {
  __typename?: "KeyMetricEntityResponse";
  data?: Maybe<KeyMetricEntity>;
};

export type KeyMetricEntityResponseCollection = {
  __typename?: "KeyMetricEntityResponseCollection";
  data: Array<KeyMetricEntity>;
  meta: ResponseCollectionMeta;
};

export type KeyMetricFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<KeyMetricFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<KeyMetricFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<KeyMetricFiltersInput>>>;
  publishedAt?: InputMaybe<DateTimeFilterInput>;
  title?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type KeyMetricInput = {
  publishedAt?: InputMaybe<Scalars["DateTime"]>;
  title?: InputMaybe<Scalars["String"]>;
};

export type KeyMetricRelationResponseCollection = {
  __typename?: "KeyMetricRelationResponseCollection";
  data: Array<KeyMetricEntity>;
};

export type KeyMetricsService = {
  __typename?: "KeyMetricsService";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  cities?: Maybe<CityRelationResponseCollection>;
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  endDate?: Maybe<Scalars["Date"]>;
  isActivated: Scalars["Boolean"];
  keyMetrics?: Maybe<KeyMetricRelationResponseCollection>;
  name: Scalars["String"];
  startDate?: Maybe<Scalars["Date"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type KeyMetricsServiceAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type KeyMetricsServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type KeyMetricsServiceKeyMetricsArgs = {
  filters?: InputMaybe<KeyMetricFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  publicationState?: InputMaybe<PublicationState>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type KeyMetricsServiceEntity = {
  __typename?: "KeyMetricsServiceEntity";
  attributes?: Maybe<KeyMetricsService>;
  id?: Maybe<Scalars["ID"]>;
};

export type KeyMetricsServiceEntityResponse = {
  __typename?: "KeyMetricsServiceEntityResponse";
  data?: Maybe<KeyMetricsServiceEntity>;
};

export type KeyMetricsServiceEntityResponseCollection = {
  __typename?: "KeyMetricsServiceEntityResponseCollection";
  data: Array<KeyMetricsServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type KeyMetricsServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<KeyMetricsServiceFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  cities?: InputMaybe<CityFiltersInput>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  endDate?: InputMaybe<DateFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  keyMetrics?: InputMaybe<KeyMetricFiltersInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<KeyMetricsServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<KeyMetricsServiceFiltersInput>>>;
  startDate?: InputMaybe<DateFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type KeyMetricsServiceInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  contract?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  keyMetrics?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  name?: InputMaybe<Scalars["String"]>;
  startDate?: InputMaybe<Scalars["Date"]>;
};

export type KeyMetricsServiceRelationResponseCollection = {
  __typename?: "KeyMetricsServiceRelationResponseCollection";
  data: Array<KeyMetricsServiceEntity>;
};

export enum LinkServiceType {
  AlertNotificationService = "alertNotificationService",
  DropOffMapService = "dropOffMapService",
  EditorialService = "editorialService",
  PickUpDayService = "pickUpDayService",
  RecyclingGuideService = "recyclingGuideService",
  RequestService = "requestService",
}

export type LinkedServices = {
  __typename?: "LinkedServices";
  id: Scalars["ID"];
  idFreeContentSubService?: Maybe<Scalars["ID"]>;
  name: Scalars["String"];
  type?: Maybe<Scalars["String"]>;
};

export type LongFilterInput = {
  and?: InputMaybe<Array<InputMaybe<Scalars["Long"]>>>;
  between?: InputMaybe<Array<InputMaybe<Scalars["Long"]>>>;
  contains?: InputMaybe<Scalars["Long"]>;
  containsi?: InputMaybe<Scalars["Long"]>;
  endsWith?: InputMaybe<Scalars["Long"]>;
  eq?: InputMaybe<Scalars["Long"]>;
  eqi?: InputMaybe<Scalars["Long"]>;
  gt?: InputMaybe<Scalars["Long"]>;
  gte?: InputMaybe<Scalars["Long"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["Long"]>>>;
  lt?: InputMaybe<Scalars["Long"]>;
  lte?: InputMaybe<Scalars["Long"]>;
  ne?: InputMaybe<Scalars["Long"]>;
  not?: InputMaybe<LongFilterInput>;
  notContains?: InputMaybe<Scalars["Long"]>;
  notContainsi?: InputMaybe<Scalars["Long"]>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars["Long"]>>>;
  notNull?: InputMaybe<Scalars["Boolean"]>;
  null?: InputMaybe<Scalars["Boolean"]>;
  or?: InputMaybe<Array<InputMaybe<Scalars["Long"]>>>;
  startsWith?: InputMaybe<Scalars["Long"]>;
};

export type Mutation = {
  __typename?: "Mutation";
  addBanPropertiesOnMigratedDropOffMaps?: Maybe<Scalars["Boolean"]>;
  bulkDeleteMedias?: Maybe<Array<Maybe<DeletedMessage>>>;
  bulkMoveMedias?: Maybe<Array<Maybe<RequestFileOrFolder>>>;
  changeContractStatus?: Maybe<ContractStatus>;
  /** Change user password. Confirm with the current password. */
  changePassword?: Maybe<UsersPermissionsLoginPayload>;
  channelsActivation?: Maybe<Array<Maybe<ActivationAndService>>>;
  channelsDeactivation?: Maybe<Deactivation>;
  checkUnpublishedDate?: Maybe<Scalars["Boolean"]>;
  cleanUnrelatedServicesLinks?: Maybe<Scalars["Boolean"]>;
  createAccessibility?: Maybe<AccessibilityEntityResponse>;
  createAccessibilitySubService?: Maybe<AccessibilitySubServiceEntityResponse>;
  createAlertNotification?: Maybe<AlertNotificationEntityResponse>;
  createAlertNotificationService?: Maybe<AlertNotificationServiceEntityResponse>;
  createAlertUserStorage?: Maybe<AlertUserStorageEntityResponse>;
  createAudience?: Maybe<AudienceEntityResponse>;
  createCgu?: Maybe<CguEntityResponse>;
  createCguSubService?: Maybe<CguSubServiceEntityResponse>;
  createChannelType?: Maybe<ChannelTypeEntityResponse>;
  createCity?: Maybe<CityEntityResponse>;
  createClientContact?: Maybe<ClientContactEntityResponse>;
  createCollectDoorToDoor?: Maybe<CollectDoorToDoorEntityResponse>;
  createCollectDropOff?: Maybe<CollectDropOffEntityResponse>;
  createCollectVoluntary?: Maybe<CollectVoluntaryEntityResponse>;
  createConfidentiality?: Maybe<ConfidentialityEntityResponse>;
  createConfidentialitySubService?: Maybe<ConfidentialitySubServiceEntityResponse>;
  createContactUs?: Maybe<ContactUsEntityResponse>;
  createContactUsSubService?: Maybe<ContactUsSubServiceEntityResponse>;
  createContentTypeForContractId?: Maybe<FreeContentSubServiceEntity>;
  createContract?: Maybe<ContractEntityResponse>;
  createContractCustomization?: Maybe<ContractCustomizationEntityResponse>;
  createContractMenu?: Maybe<ContractMenuEntityResponse>;
  createCookie?: Maybe<CookieEntityResponse>;
  createCookiesSubService?: Maybe<CookiesSubServiceEntityResponse>;
  createDescriptionService?: Maybe<DescriptionServiceEntityResponse>;
  createDocument?: Maybe<DocumentEntityResponse>;
  createDropOffMap?: Maybe<DropOffMapEntityResponse>;
  createDropOffMapService?: Maybe<DropOffMapServiceEntityResponse>;
  createEditoBlock?: Maybe<EditoBlockEntityResponse>;
  createEditorialService?: Maybe<EditorialServiceEntityResponse>;
  createEmptyContract?: Maybe<Array<Maybe<ContractAndClientContact>>>;
  createEpci?: Maybe<EpciEntityResponse>;
  createEvent?: Maybe<EventEntityResponse>;
  createEventSubService?: Maybe<EventSubServiceEntityResponse>;
  createExportEntity?: Maybe<ExportEntityEntityResponse>;
  createFlow?: Maybe<FlowEntityResponse>;
  createFlowColor?: Maybe<FlowColorEntityResponse>;
  createFooter?: Maybe<FooterEntityResponse>;
  createFreeContent?: Maybe<FreeContentEntityResponse>;
  createFreeContentSubService?: Maybe<FreeContentSubServiceEntityResponse>;
  createHomepage?: Maybe<HomepageEntityResponse>;
  createInformationMessage?: Maybe<InformationMessageEntityResponse>;
  createKeyMetric?: Maybe<KeyMetricEntityResponse>;
  createKeyMetricsService?: Maybe<KeyMetricsServiceEntityResponse>;
  createMwCounterService?: Maybe<MwCounterServiceEntityResponse>;
  createMwcFlow?: Maybe<MwcFlowEntityResponse>;
  createNew?: Maybe<NewEntityResponse>;
  createNewFolder?: Maybe<RequestFolderEntity>;
  createNewTag?: Maybe<RequestTagEntity>;
  createNewsSubService?: Maybe<NewsSubServiceEntityResponse>;
  createPickUpDay?: Maybe<PickUpDayEntityResponse>;
  createPickUpDayService?: Maybe<PickUpDayServiceEntityResponse>;
  createQuiz?: Maybe<QuizEntityResponse>;
  createQuizAndTipsBlock?: Maybe<QuizAndTipsBlockEntityResponse>;
  createQuizSubService?: Maybe<QuizSubServiceEntityResponse>;
  createRecyclingGuideBlock?: Maybe<RecyclingGuideBlockEntityResponse>;
  createRecyclingGuideService?: Maybe<RecyclingGuideServiceEntityResponse>;
  createRequest?: Maybe<RequestEntityResponse>;
  createRequestAggregate?: Maybe<RequestAggregateEntityResponse>;
  createRequestService?: Maybe<RequestServiceEntityResponse>;
  createRequestSlot?: Maybe<RequestSlotEntityResponse>;
  createRequestTaked?: Maybe<RequestTakedEntityResponse>;
  createSearchEngineBlock?: Maybe<SearchEngineBlockEntityResponse>;
  createSectorization?: Maybe<SectorizationEntityResponse>;
  createServicesBlock?: Maybe<ServicesBlockEntityResponse>;
  createTag?: Maybe<TagEntityResponse>;
  createTerritory?: Maybe<TerritoryEntityResponse>;
  createTerritoryType?: Maybe<TerritoryTypeEntityResponse>;
  createTip?: Maybe<TipEntityResponse>;
  createTipSubService?: Maybe<TipSubServiceEntityResponse>;
  createTopContentBlock?: Maybe<TopContentBlockEntityResponse>;
  createUploadFile?: Maybe<UploadFileEntityResponse>;
  createUploadFolder?: Maybe<UploadFolderEntityResponse>;
  createUserDataStorage?: Maybe<UserDataStorageEntityResponse>;
  /** Create a new role */
  createUsersPermissionsRole?: Maybe<UsersPermissionsCreateRolePayload>;
  /** Create a new user */
  createUsersPermissionsUser: UsersPermissionsUserEntityResponse;
  createWasteFamily?: Maybe<WasteFamilyEntityResponse>;
  createWasteForm?: Maybe<WasteFormEntityResponse>;
  createWelcomeMessageBlock?: Maybe<WelcomeMessageBlockEntityResponse>;
  createYesWeScanForm?: Maybe<YesWeScanFormEntityResponse>;
  createYesWeScanQrCode?: Maybe<YesWeScanQrCodeEntityResponse>;
  createYesWeScanService?: Maybe<YesWeScanServiceEntityResponse>;
  createYwsService?: Maybe<YesWeScanServiceEntity>;
  deleteAccessibility?: Maybe<AccessibilityEntityResponse>;
  deleteAccessibilitySubService?: Maybe<AccessibilitySubServiceEntityResponse>;
  deleteAlertNotification?: Maybe<AlertNotificationEntityResponse>;
  deleteAlertNotificationService?: Maybe<AlertNotificationServiceEntityResponse>;
  deleteAlertUserStorage?: Maybe<AlertUserStorageEntityResponse>;
  deleteAlertUserStorageComplete?: Maybe<Scalars["Int"]>;
  deleteAudience?: Maybe<AudienceEntityResponse>;
  deleteCgu?: Maybe<CguEntityResponse>;
  deleteCguSubService?: Maybe<CguSubServiceEntityResponse>;
  deleteChannelType?: Maybe<ChannelTypeEntityResponse>;
  deleteCity?: Maybe<CityEntityResponse>;
  deleteClientContact?: Maybe<ClientContactEntityResponse>;
  deleteCollectDoorToDoor?: Maybe<CollectDoorToDoorEntityResponse>;
  deleteCollectDropOff?: Maybe<CollectDropOffEntityResponse>;
  deleteCollectVoluntary?: Maybe<CollectVoluntaryEntityResponse>;
  deleteConfidentiality?: Maybe<ConfidentialityEntityResponse>;
  deleteConfidentialitySubService?: Maybe<ConfidentialitySubServiceEntityResponse>;
  deleteContactUs?: Maybe<ContactUsEntityResponse>;
  deleteContactUsSubService?: Maybe<ContactUsSubServiceEntityResponse>;
  deleteContent?: Maybe<Scalars["Boolean"]>;
  deleteContract?: Maybe<ContractEntityResponse>;
  deleteContractCustomization?: Maybe<ContractCustomizationEntityResponse>;
  deleteContractMenu?: Maybe<ContractMenuEntityResponse>;
  deleteCookie?: Maybe<CookieEntityResponse>;
  deleteCookiesSubService?: Maybe<CookiesSubServiceEntityResponse>;
  deleteDescriptionService?: Maybe<DescriptionServiceEntityResponse>;
  deleteDocument?: Maybe<DocumentEntityResponse>;
  deleteDropOffMap?: Maybe<DropOffMapEntityResponse>;
  deleteDropOffMapService?: Maybe<DropOffMapServiceEntityResponse>;
  deleteEditoBlock?: Maybe<EditoBlockEntityResponse>;
  deleteEditorialService?: Maybe<EditorialServiceEntityResponse>;
  deleteEpci?: Maybe<EpciEntityResponse>;
  deleteEvent?: Maybe<EventEntityResponse>;
  deleteEventSubService?: Maybe<EventSubServiceEntityResponse>;
  deleteExportEntity?: Maybe<ExportEntityEntityResponse>;
  deleteFlow?: Maybe<FlowEntityResponse>;
  deleteFlowColor?: Maybe<FlowColorEntityResponse>;
  deleteFooter?: Maybe<FooterEntityResponse>;
  deleteFreeContent?: Maybe<FreeContentEntityResponse>;
  deleteFreeContentSubService?: Maybe<FreeContentSubServiceEntityResponse>;
  deleteGlobal?: Maybe<GlobalEntityResponse>;
  deleteHomepage?: Maybe<HomepageEntityResponse>;
  deleteInformationMessage?: Maybe<InformationMessageEntityResponse>;
  deleteKeyMetric?: Maybe<KeyMetricEntityResponse>;
  deleteKeyMetricsService?: Maybe<KeyMetricsServiceEntityResponse>;
  deleteMwCounterService?: Maybe<MwCounterServiceEntityResponse>;
  deleteMwcFlow?: Maybe<MwcFlowEntityResponse>;
  deleteNew?: Maybe<NewEntityResponse>;
  deleteNewsSubService?: Maybe<NewsSubServiceEntityResponse>;
  deletePickUpDay?: Maybe<PickUpDayEntityResponse>;
  deletePickUpDayService?: Maybe<PickUpDayServiceEntityResponse>;
  deleteQuiz?: Maybe<QuizEntityResponse>;
  deleteQuizAndTipsBlock?: Maybe<QuizAndTipsBlockEntityResponse>;
  deleteQuizSubService?: Maybe<QuizSubServiceEntityResponse>;
  deleteRecyclingGuideBlock?: Maybe<RecyclingGuideBlockEntityResponse>;
  deleteRecyclingGuideService?: Maybe<RecyclingGuideServiceEntityResponse>;
  deleteRequest?: Maybe<RequestEntityResponse>;
  deleteRequestAggregate?: Maybe<RequestAggregateEntityResponse>;
  deleteRequestService?: Maybe<RequestServiceEntityResponse>;
  deleteRequestSlot?: Maybe<RequestSlotEntityResponse>;
  deleteRequestTaked?: Maybe<RequestTakedEntityResponse>;
  deleteSearchEngineBlock?: Maybe<SearchEngineBlockEntityResponse>;
  deleteSectorization?: Maybe<SectorizationEntityResponse>;
  deleteServicesBlock?: Maybe<ServicesBlockEntityResponse>;
  deleteTag?: Maybe<TagEntityResponse>;
  deleteTerritory?: Maybe<TerritoryEntityResponse>;
  deleteTerritoryType?: Maybe<TerritoryTypeEntityResponse>;
  deleteTip?: Maybe<TipEntityResponse>;
  deleteTipSubService?: Maybe<TipSubServiceEntityResponse>;
  deleteTopContentBlock?: Maybe<TopContentBlockEntityResponse>;
  deleteUnpublishedMedia?: Maybe<Array<Maybe<Scalars["ID"]>>>;
  deleteUnusedSectors?: Maybe<Sectorization>;
  deleteUploadFile?: Maybe<UploadFileEntityResponse>;
  deleteUploadFolder?: Maybe<UploadFolderEntityResponse>;
  deleteUserDataStorage?: Maybe<UserDataStorageEntityResponse>;
  /** Delete an existing role */
  deleteUsersPermissionsRole?: Maybe<UsersPermissionsDeleteRolePayload>;
  /** Delete an existing user */
  deleteUsersPermissionsUser: UsersPermissionsUserEntityResponse;
  deleteWasteFamily?: Maybe<WasteFamilyEntityResponse>;
  deleteWasteForm?: Maybe<WasteFormEntityResponse>;
  deleteWelcomeMessageBlock?: Maybe<WelcomeMessageBlockEntityResponse>;
  deleteYesWeScanForm?: Maybe<YesWeScanFormEntityResponse>;
  deleteYesWeScanQrCode?: Maybe<YesWeScanQrCodeEntityResponse>;
  deleteYesWeScanService?: Maybe<YesWeScanServiceEntityResponse>;
  duplicateContent?: Maybe<Scalars["Boolean"]>;
  /** Confirm an email users email address */
  emailConfirmation?: Maybe<UsersPermissionsLoginPayload>;
  endDateServices?: Maybe<Array<Maybe<ServicesDeactivated>>>;
  exportMunicipalities?: Maybe<Scalars["ID"]>;
  /** Request a reset password token */
  forgotPassword?: Maybe<UsersPermissionsPasswordPayload>;
  importMunicipalities?: Maybe<Scalars["String"]>;
  importSiren?: Maybe<Scalars["Boolean"]>;
  launchPipeline?: Maybe<Scalars["Boolean"]>;
  logicalDeleteContract?: Maybe<Scalars["Boolean"]>;
  login: UsersPermissionsLoginPayload;
  multipleUpload: Array<Maybe<UploadFileEntityResponse>>;
  programmedSend?: Maybe<Scalars["String"]>;
  /** Register a user */
  register: UsersPermissionsLoginPayload;
  removeFile?: Maybe<UploadFileEntityResponse>;
  requestResetCronTask?: Maybe<Scalars["Boolean"]>;
  /** Reset user password. Confirm with a code (resetToken from forgotPassword) */
  resetPassword?: Maybe<UsersPermissionsLoginPayload>;
  sendEmail?: Maybe<Scalars["String"]>;
  sendSMS?: Maybe<Scalars["String"]>;
  servicesActivation?: Maybe<ServiceActivated>;
  setFlowIsActivated?: Maybe<FlowEntity>;
  singleUploadCustom: File;
  updateAccessibility?: Maybe<AccessibilityEntityResponse>;
  updateAccessibilitySubService?: Maybe<AccessibilitySubServiceEntityResponse>;
  updateAlertNotification?: Maybe<AlertNotificationEntityResponse>;
  updateAlertNotificationService?: Maybe<AlertNotificationServiceEntityResponse>;
  updateAlertNotificationsX?: Maybe<AlertNotification>;
  updateAlertUserStorage?: Maybe<AlertUserStorageEntityResponse>;
  updateAudience?: Maybe<AudienceEntityResponse>;
  updateBrokenFlows?: Maybe<Scalars["Boolean"]>;
  updateCgu?: Maybe<CguEntityResponse>;
  updateCguSubService?: Maybe<CguSubServiceEntityResponse>;
  updateChannelType?: Maybe<ChannelTypeEntityResponse>;
  updateCity?: Maybe<CityEntityResponse>;
  updateClientContact?: Maybe<ClientContactEntityResponse>;
  updateCollectDoorToDoor?: Maybe<CollectDoorToDoorEntityResponse>;
  updateCollectDropOff?: Maybe<CollectDropOffEntityResponse>;
  updateCollectVoluntary?: Maybe<CollectVoluntaryEntityResponse>;
  updateConfidentiality?: Maybe<ConfidentialityEntityResponse>;
  updateConfidentialitySubService?: Maybe<ConfidentialitySubServiceEntityResponse>;
  updateContactMwc?: Maybe<ContactResponse>;
  updateContactUs?: Maybe<ContactUsEntityResponse>;
  updateContactUsSubService?: Maybe<ContactUsSubServiceEntityResponse>;
  updateContract?: Maybe<ContractEntityResponse>;
  updateContractCustomization?: Maybe<ContractCustomizationEntityResponse>;
  updateContractMenu?: Maybe<ContractMenuEntityResponse>;
  updateContractNumberOfInhabitants?: Maybe<Scalars["Boolean"]>;
  updateCookie?: Maybe<CookieEntityResponse>;
  updateCookiesSubService?: Maybe<CookiesSubServiceEntityResponse>;
  updateCounterStatus?: Maybe<User>;
  updateDescriptionService?: Maybe<DescriptionServiceEntityResponse>;
  updateDocument?: Maybe<DocumentEntityResponse>;
  updateDropOffMap?: Maybe<DropOffMapEntityResponse>;
  updateDropOffMapService?: Maybe<DropOffMapServiceEntityResponse>;
  updateEditoBlock?: Maybe<EditoBlockEntityResponse>;
  updateEditorialService?: Maybe<EditorialServiceEntityResponse>;
  updateEpci?: Maybe<EpciEntityResponse>;
  updateEvent?: Maybe<EventEntityResponse>;
  updateEventSubService?: Maybe<EventSubServiceEntityResponse>;
  updateExistingsReferentials?: Maybe<Scalars["Boolean"]>;
  updateExportEntity?: Maybe<ExportEntityEntityResponse>;
  updateFileInfo: UploadFileEntityResponse;
  updateFlow?: Maybe<FlowEntityResponse>;
  updateFlowColor?: Maybe<FlowColorEntityResponse>;
  updateFooter?: Maybe<FooterEntityResponse>;
  updateFreeContent?: Maybe<FreeContentEntityResponse>;
  updateFreeContentSubService?: Maybe<FreeContentSubServiceEntityResponse>;
  updateFullContract?: Maybe<Scalars["Boolean"]>;
  updateGlobal?: Maybe<GlobalEntityResponse>;
  updateHomepage?: Maybe<HomepageEntityResponse>;
  updateInformationMessage?: Maybe<InformationMessageEntityResponse>;
  updateKeyMetric?: Maybe<KeyMetricEntityResponse>;
  updateKeyMetricsService?: Maybe<KeyMetricsServiceEntityResponse>;
  updateMwCounterService?: Maybe<MwCounterServiceEntityResponse>;
  updateMwcFlow?: Maybe<MwcFlowEntityResponse>;
  updateNew?: Maybe<NewEntityResponse>;
  updateNewsSubService?: Maybe<NewsSubServiceEntityResponse>;
  updatePickUpDay?: Maybe<PickUpDayEntityResponse>;
  updatePickUpDayService?: Maybe<PickUpDayServiceEntityResponse>;
  updatePlanningsCronTask?: Maybe<Scalars["Boolean"]>;
  updateQuiz?: Maybe<QuizEntityResponse>;
  updateQuizAndTipsBlock?: Maybe<QuizAndTipsBlockEntityResponse>;
  updateQuizSubService?: Maybe<QuizSubServiceEntityResponse>;
  updateRecyclingGuideBlock?: Maybe<RecyclingGuideBlockEntityResponse>;
  updateRecyclingGuideService?: Maybe<RecyclingGuideServiceEntityResponse>;
  updateRequest?: Maybe<RequestEntityResponse>;
  updateRequestAggregate?: Maybe<RequestAggregateEntityResponse>;
  updateRequestAggregateOrder?: Maybe<Array<Maybe<OrderRequestAggregate>>>;
  updateRequestService?: Maybe<RequestServiceEntityResponse>;
  updateRequestSlot?: Maybe<RequestSlotEntityResponse>;
  updateRequestTaked?: Maybe<RequestTakedEntityResponse>;
  updateSearchEngineBlock?: Maybe<SearchEngineBlockEntityResponse>;
  updateSectorization?: Maybe<SectorizationEntityResponse>;
  updateServicesBlock?: Maybe<ServicesBlockEntityResponse>;
  updateShortName?: Maybe<YesWeScanFormEntity>;
  updateTag?: Maybe<TagEntityResponse>;
  updateTerritory?: Maybe<TerritoryEntityResponse>;
  updateTerritoryType?: Maybe<TerritoryTypeEntityResponse>;
  updateTip?: Maybe<TipEntityResponse>;
  updateTipSubService?: Maybe<TipSubServiceEntityResponse>;
  updateTopContentBlock?: Maybe<TopContentBlockEntityResponse>;
  updateUploadFile?: Maybe<UploadFileEntityResponse>;
  updateUploadFolder?: Maybe<UploadFolderEntityResponse>;
  updateUserDataStorage?: Maybe<UserDataStorageEntityResponse>;
  /** Update an existing role */
  updateUsersPermissionsRole?: Maybe<UsersPermissionsUpdateRolePayload>;
  /** Update an existing user */
  updateUsersPermissionsUser: UsersPermissionsUserEntityResponse;
  updateWasteFamily?: Maybe<WasteFamilyEntityResponse>;
  updateWasteForm?: Maybe<WasteFormEntityResponse>;
  updateWelcomeMessageBlock?: Maybe<WelcomeMessageBlockEntityResponse>;
  updateYesWeScanForm?: Maybe<YesWeScanFormEntityResponse>;
  updateYesWeScanQrCode?: Maybe<YesWeScanQrCodeEntityResponse>;
  updateYesWeScanService?: Maybe<YesWeScanServiceEntityResponse>;
  upload: UploadFileEntityResponse;
  uploadFileAndGetId?: Maybe<UploadResult>;
  uploadGraphQL?: Maybe<Scalars["Boolean"]>;
  urlUploader?: Maybe<Scalars["Boolean"]>;
  validateRequest?: Maybe<Scalars["Boolean"]>;
  validateYesWeScanForm?: Maybe<Scalars["Boolean"]>;
  versioningHandler?: Maybe<VersioningEntityResponse>;
  ywsActivation?: Maybe<ChannelTypeEntity>;
  ywsDeactivation?: Maybe<ChannelTypeEntity>;
};

export type MutationBulkDeleteMediasArgs = {
  fileRequests: Array<InputMaybe<RequestFile>>;
  folderRequests: Array<InputMaybe<RequestFolder>>;
};

export type MutationBulkMoveMediasArgs = {
  fileRequests?: InputMaybe<Array<InputMaybe<RequestFile>>>;
  folderId: Scalars["ID"];
  folderRequests?: InputMaybe<Array<InputMaybe<RequestFolder>>>;
  path: Scalars["String"];
};

export type MutationChangeContractStatusArgs = {
  contractId: Scalars["ID"];
  status: Statuses;
};

export type MutationChangePasswordArgs = {
  currentPassword: Scalars["String"];
  password: Scalars["String"];
  passwordConfirmation: Scalars["String"];
};

export type MutationChannelsActivationArgs = {
  contractId: Scalars["ID"];
  typeActivation: Scalars["String"];
};

export type MutationChannelsDeactivationArgs = {
  contractId: Scalars["ID"];
  typeDeactivation: Scalars["String"];
};

export type MutationCheckUnpublishedDateArgs = {
  date?: InputMaybe<Scalars["String"]>;
};

export type MutationCreateAccessibilityArgs = {
  data: AccessibilityInput;
};

export type MutationCreateAccessibilitySubServiceArgs = {
  data: AccessibilitySubServiceInput;
};

export type MutationCreateAlertNotificationArgs = {
  data: AlertNotificationInput;
};

export type MutationCreateAlertNotificationServiceArgs = {
  data: AlertNotificationServiceInput;
};

export type MutationCreateAlertUserStorageArgs = {
  data: AlertUserStorageInput;
};

export type MutationCreateAudienceArgs = {
  data: AudienceInput;
};

export type MutationCreateCguArgs = {
  data: CguInput;
};

export type MutationCreateCguSubServiceArgs = {
  data: CguSubServiceInput;
};

export type MutationCreateChannelTypeArgs = {
  data: ChannelTypeInput;
};

export type MutationCreateCityArgs = {
  data: CityInput;
};

export type MutationCreateClientContactArgs = {
  data: ClientContactInput;
};

export type MutationCreateCollectDoorToDoorArgs = {
  data: CollectDoorToDoorInput;
};

export type MutationCreateCollectDropOffArgs = {
  data: CollectDropOffInput;
};

export type MutationCreateCollectVoluntaryArgs = {
  data: CollectVoluntaryInput;
};

export type MutationCreateConfidentialityArgs = {
  data: ConfidentialityInput;
};

export type MutationCreateConfidentialitySubServiceArgs = {
  data: ConfidentialitySubServiceInput;
};

export type MutationCreateContactUsArgs = {
  data: ContactUsInput;
};

export type MutationCreateContactUsSubServiceArgs = {
  data: ContactUsSubServiceInput;
};

export type MutationCreateContentTypeForContractIdArgs = {
  contractId?: InputMaybe<Scalars["ID"]>;
  description?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
};

export type MutationCreateContractArgs = {
  data: ContractInput;
};

export type MutationCreateContractCustomizationArgs = {
  data: ContractCustomizationInput;
};

export type MutationCreateContractMenuArgs = {
  data: ContractMenuInput;
};

export type MutationCreateCookieArgs = {
  data: CookieInput;
};

export type MutationCreateCookiesSubServiceArgs = {
  data: CookiesSubServiceInput;
};

export type MutationCreateDescriptionServiceArgs = {
  data: DescriptionServiceInput;
};

export type MutationCreateDocumentArgs = {
  data: DocumentInput;
};

export type MutationCreateDropOffMapArgs = {
  data: DropOffMapInput;
};

export type MutationCreateDropOffMapServiceArgs = {
  data: DropOffMapServiceInput;
};

export type MutationCreateEditoBlockArgs = {
  data: EditoBlockInput;
};

export type MutationCreateEditorialServiceArgs = {
  data: EditorialServiceInput;
};

export type MutationCreateEmptyContractArgs = {
  ccap?: InputMaybe<Scalars["Long"]>;
  clear?: InputMaybe<Scalars["Long"]>;
  clientName: Scalars["String"];
  clientType: Scalars["String"];
  contactEmail: Scalars["String"];
  contactFirstName: Scalars["String"];
  contactLastName: Scalars["String"];
  contactPhoneNumber: Scalars["String"];
  isFreemium: Scalars["Boolean"];
  isNonExclusive: Scalars["Boolean"];
  isRVFrance: Scalars["Boolean"];
  servicesToActivate: Array<InputMaybe<ServiceType>>;
  siretNumber?: InputMaybe<Scalars["Long"]>;
};

export type MutationCreateEpciArgs = {
  data: EpciInput;
};

export type MutationCreateEventArgs = {
  data: EventInput;
};

export type MutationCreateEventSubServiceArgs = {
  data: EventSubServiceInput;
};

export type MutationCreateExportEntityArgs = {
  data: ExportEntityInput;
};

export type MutationCreateFlowArgs = {
  data: FlowInput;
};

export type MutationCreateFlowColorArgs = {
  data: FlowColorInput;
};

export type MutationCreateFooterArgs = {
  data: FooterInput;
};

export type MutationCreateFreeContentArgs = {
  data: FreeContentInput;
};

export type MutationCreateFreeContentSubServiceArgs = {
  data: FreeContentSubServiceInput;
};

export type MutationCreateHomepageArgs = {
  data: HomepageInput;
};

export type MutationCreateInformationMessageArgs = {
  data: InformationMessageInput;
};

export type MutationCreateKeyMetricArgs = {
  data: KeyMetricInput;
};

export type MutationCreateKeyMetricsServiceArgs = {
  data: KeyMetricsServiceInput;
};

export type MutationCreateMwCounterServiceArgs = {
  data: MwCounterServiceInput;
};

export type MutationCreateMwcFlowArgs = {
  data: MwcFlowInput;
};

export type MutationCreateNewArgs = {
  data: NewInput;
};

export type MutationCreateNewFolderArgs = {
  name: Scalars["String"];
  parentFolderPath: Scalars["String"];
  parentFolderPathId: Scalars["ID"];
};

export type MutationCreateNewTagArgs = {
  contractId: Scalars["ID"];
  tagName: Scalars["String"];
};

export type MutationCreateNewsSubServiceArgs = {
  data: NewsSubServiceInput;
};

export type MutationCreatePickUpDayArgs = {
  data: PickUpDayInput;
};

export type MutationCreatePickUpDayServiceArgs = {
  data: PickUpDayServiceInput;
};

export type MutationCreateQuizArgs = {
  data: QuizInput;
};

export type MutationCreateQuizAndTipsBlockArgs = {
  data: QuizAndTipsBlockInput;
};

export type MutationCreateQuizSubServiceArgs = {
  data: QuizSubServiceInput;
};

export type MutationCreateRecyclingGuideBlockArgs = {
  data: RecyclingGuideBlockInput;
};

export type MutationCreateRecyclingGuideServiceArgs = {
  data: RecyclingGuideServiceInput;
};

export type MutationCreateRequestArgs = {
  data: RequestInput;
};

export type MutationCreateRequestAggregateArgs = {
  data: RequestAggregateInput;
};

export type MutationCreateRequestServiceArgs = {
  data: RequestServiceInput;
};

export type MutationCreateRequestSlotArgs = {
  data: RequestSlotInput;
};

export type MutationCreateRequestTakedArgs = {
  data: RequestTakedInput;
};

export type MutationCreateSearchEngineBlockArgs = {
  data: SearchEngineBlockInput;
};

export type MutationCreateSectorizationArgs = {
  data: SectorizationInput;
};

export type MutationCreateServicesBlockArgs = {
  data: ServicesBlockInput;
};

export type MutationCreateTagArgs = {
  data: TagInput;
};

export type MutationCreateTerritoryArgs = {
  data: TerritoryInput;
};

export type MutationCreateTerritoryTypeArgs = {
  data: TerritoryTypeInput;
};

export type MutationCreateTipArgs = {
  data: TipInput;
};

export type MutationCreateTipSubServiceArgs = {
  data: TipSubServiceInput;
};

export type MutationCreateTopContentBlockArgs = {
  data: TopContentBlockInput;
};

export type MutationCreateUploadFileArgs = {
  data: UploadFileInput;
};

export type MutationCreateUploadFolderArgs = {
  data: UploadFolderInput;
};

export type MutationCreateUserDataStorageArgs = {
  data: UserDataStorageInput;
};

export type MutationCreateUsersPermissionsRoleArgs = {
  data: UsersPermissionsRoleInput;
};

export type MutationCreateUsersPermissionsUserArgs = {
  data: UsersPermissionsUserInput;
};

export type MutationCreateWasteFamilyArgs = {
  data: WasteFamilyInput;
};

export type MutationCreateWasteFormArgs = {
  data: WasteFormInput;
};

export type MutationCreateWelcomeMessageBlockArgs = {
  data: WelcomeMessageBlockInput;
};

export type MutationCreateYesWeScanFormArgs = {
  data: YesWeScanFormInput;
};

export type MutationCreateYesWeScanQrCodeArgs = {
  data: YesWeScanQrCodeInput;
};

export type MutationCreateYesWeScanServiceArgs = {
  data: YesWeScanServiceInput;
};

export type MutationCreateYwsServiceArgs = {
  contractId: Scalars["ID"];
  service: ServiceInput;
};

export type MutationDeleteAccessibilityArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteAccessibilitySubServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteAlertNotificationArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteAlertNotificationServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteAlertUserStorageArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteAlertUserStorageCompleteArgs = {
  email?: InputMaybe<Scalars["String"]>;
  phoneNumber?: InputMaybe<Scalars["String"]>;
};

export type MutationDeleteAudienceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteCguArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteCguSubServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteChannelTypeArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteCityArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteClientContactArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteCollectDoorToDoorArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteCollectDropOffArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteCollectVoluntaryArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteConfidentialityArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteConfidentialitySubServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteContactUsArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteContactUsSubServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteContentArgs = {
  id: Scalars["ID"];
  type?: InputMaybe<Scalars["String"]>;
};

export type MutationDeleteContractArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteContractCustomizationArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteContractMenuArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteCookieArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteCookiesSubServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteDescriptionServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteDocumentArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteDropOffMapArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteDropOffMapServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteEditoBlockArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteEditorialServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteEpciArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteEventArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteEventSubServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteExportEntityArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteFlowArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteFlowColorArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteFooterArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteFreeContentArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteFreeContentSubServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteHomepageArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteInformationMessageArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteKeyMetricArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteKeyMetricsServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteMwCounterServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteMwcFlowArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteNewArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteNewsSubServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeletePickUpDayArgs = {
  id: Scalars["ID"];
};

export type MutationDeletePickUpDayServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteQuizArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteQuizAndTipsBlockArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteQuizSubServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteRecyclingGuideBlockArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteRecyclingGuideServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteRequestArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteRequestAggregateArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteRequestServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteRequestSlotArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteRequestTakedArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteSearchEngineBlockArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteSectorizationArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteServicesBlockArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteTagArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteTerritoryArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteTerritoryTypeArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteTipArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteTipSubServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteTopContentBlockArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteUnpublishedMediaArgs = {
  imageIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type MutationDeleteUnusedSectorsArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteUploadFileArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteUploadFolderArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteUserDataStorageArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteUsersPermissionsRoleArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteUsersPermissionsUserArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteWasteFamilyArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteWasteFormArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteWelcomeMessageBlockArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteYesWeScanFormArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteYesWeScanQrCodeArgs = {
  id: Scalars["ID"];
};

export type MutationDeleteYesWeScanServiceArgs = {
  id: Scalars["ID"];
};

export type MutationDuplicateContentArgs = {
  id: Scalars["ID"];
  type?: InputMaybe<Scalars["String"]>;
};

export type MutationEmailConfirmationArgs = {
  confirmation: Scalars["String"];
};

export type MutationForgotPasswordArgs = {
  email: Scalars["String"];
};

export type MutationImportMunicipalitiesArgs = {
  contractId?: InputMaybe<Scalars["ID"]>;
  file: Scalars["String"];
};

export type MutationImportSirenArgs = {
  contractId?: InputMaybe<Scalars["ID"]>;
  file: Scalars["String"];
};

export type MutationLaunchPipelineArgs = {
  contractId: Scalars["ID"];
};

export type MutationLogicalDeleteContractArgs = {
  contractId: Scalars["ID"];
};

export type MutationLoginArgs = {
  input: UsersPermissionsLoginInput;
};

export type MutationMultipleUploadArgs = {
  field?: InputMaybe<Scalars["String"]>;
  files: Array<InputMaybe<Scalars["Upload"]>>;
  ref?: InputMaybe<Scalars["String"]>;
  refId?: InputMaybe<Scalars["ID"]>;
};

export type MutationProgrammedSendArgs = {
  alertMailMessage?: InputMaybe<Scalars["String"]>;
  alertSmsMessage?: InputMaybe<Scalars["String"]>;
  isEmail?: InputMaybe<Scalars["Boolean"]>;
  isSMS?: InputMaybe<Scalars["Boolean"]>;
  mailSubject?: InputMaybe<Scalars["String"]>;
  recipientEmails?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  recipientnumbers?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  scheduledAt?: InputMaybe<Scalars["Date"]>;
  smsTitle?: InputMaybe<Scalars["String"]>;
  time?: InputMaybe<Scalars["String"]>;
};

export type MutationRegisterArgs = {
  input: UsersPermissionsRegisterInput;
};

export type MutationRemoveFileArgs = {
  id: Scalars["ID"];
};

export type MutationResetPasswordArgs = {
  code: Scalars["String"];
  password: Scalars["String"];
  passwordConfirmation: Scalars["String"];
};

export type MutationSendEmailArgs = {
  content?: InputMaybe<Scalars["String"]>;
  isRegistration?: InputMaybe<Scalars["Boolean"]>;
  recipientEmails: Array<InputMaybe<Scalars["String"]>>;
  subject?: InputMaybe<Scalars["String"]>;
  templateId?: InputMaybe<Scalars["Int"]>;
};

export type MutationSendSmsArgs = {
  content: Scalars["String"];
  phoneNumber: Array<InputMaybe<Scalars["String"]>>;
  scheduledAt?: InputMaybe<Scalars["String"]>;
  sendMultiple?: InputMaybe<Scalars["Boolean"]>;
};

export type MutationServicesActivationArgs = {
  ServiceName: ServiceType;
  contractId: Scalars["ID"];
  endDate?: InputMaybe<Scalars["Date"]>;
  isActivated: Scalars["Boolean"];
  isUpdated: Scalars["Boolean"];
  serviceId: Scalars["ID"];
  startDate?: InputMaybe<Scalars["Date"]>;
};

export type MutationSetFlowIsActivatedArgs = {
  code: Scalars["String"];
  id: Scalars["ID"];
  isActivated: Scalars["Boolean"];
};

export type MutationSingleUploadCustomArgs = {
  file: Scalars["Upload"];
};

export type MutationUpdateAccessibilityArgs = {
  data: AccessibilityInput;
  id: Scalars["ID"];
};

export type MutationUpdateAccessibilitySubServiceArgs = {
  data: AccessibilitySubServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateAlertNotificationArgs = {
  data: AlertNotificationInput;
  id: Scalars["ID"];
};

export type MutationUpdateAlertNotificationServiceArgs = {
  data: AlertNotificationServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateAlertNotificationsXArgs = {
  alertDescription?: InputMaybe<Scalars["String"]>;
  alertMessage?: InputMaybe<Scalars["String"]>;
  alertNotifService?: InputMaybe<Scalars["ID"]>;
  alertTitle?: InputMaybe<Scalars["String"]>;
  alertUserStorages?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  cities?: InputMaybe<Scalars["String"]>;
  idAlertNotification?: InputMaybe<Scalars["ID"]>;
  scheduledAt?: InputMaybe<Scalars["Date"]>;
  scheduledAtTime?: InputMaybe<Scalars["String"]>;
  sectorizations?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  sendMail?: InputMaybe<Scalars["Boolean"]>;
  sendSMS?: InputMaybe<Scalars["Boolean"]>;
  subject?: InputMaybe<Scalars["String"]>;
};

export type MutationUpdateAlertUserStorageArgs = {
  data: AlertUserStorageInput;
  id: Scalars["ID"];
};

export type MutationUpdateAudienceArgs = {
  data: AudienceInput;
  id: Scalars["ID"];
};

export type MutationUpdateBrokenFlowsArgs = {
  status?: InputMaybe<Scalars["Boolean"]>;
};

export type MutationUpdateCguArgs = {
  data: CguInput;
  id: Scalars["ID"];
};

export type MutationUpdateCguSubServiceArgs = {
  data: CguSubServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateChannelTypeArgs = {
  data: ChannelTypeInput;
  id: Scalars["ID"];
};

export type MutationUpdateCityArgs = {
  data: CityInput;
  id: Scalars["ID"];
};

export type MutationUpdateClientContactArgs = {
  data: ClientContactInput;
  id: Scalars["ID"];
};

export type MutationUpdateCollectDoorToDoorArgs = {
  data: CollectDoorToDoorInput;
  id: Scalars["ID"];
};

export type MutationUpdateCollectDropOffArgs = {
  data: CollectDropOffInput;
  id: Scalars["ID"];
};

export type MutationUpdateCollectVoluntaryArgs = {
  data: CollectVoluntaryInput;
  id: Scalars["ID"];
};

export type MutationUpdateConfidentialityArgs = {
  data: ConfidentialityInput;
  id: Scalars["ID"];
};

export type MutationUpdateConfidentialitySubServiceArgs = {
  data: ConfidentialitySubServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateContactMwcArgs = {
  city?: InputMaybe<Scalars["String"]>;
  contactEmail?: InputMaybe<Scalars["String"]>;
  contractId: Scalars["ID"];
  phoneNumber?: InputMaybe<Scalars["String"]>;
  postalAddress?: InputMaybe<Scalars["String"]>;
  postalCode?: InputMaybe<Scalars["String"]>;
  serviceName?: InputMaybe<Scalars["String"]>;
};

export type MutationUpdateContactUsArgs = {
  data: ContactUsInput;
  id: Scalars["ID"];
};

export type MutationUpdateContactUsSubServiceArgs = {
  data: ContactUsSubServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateContractArgs = {
  data: ContractInput;
  id: Scalars["ID"];
};

export type MutationUpdateContractCustomizationArgs = {
  data: ContractCustomizationInput;
  id: Scalars["ID"];
};

export type MutationUpdateContractMenuArgs = {
  data: ContractMenuInput;
  id: Scalars["ID"];
};

export type MutationUpdateContractNumberOfInhabitantsArgs = {
  contractId: Scalars["ID"];
  numberOfInhabitants: Scalars["Int"];
};

export type MutationUpdateCookieArgs = {
  data: CookieInput;
  id: Scalars["ID"];
};

export type MutationUpdateCookiesSubServiceArgs = {
  data: CookiesSubServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateCounterStatusArgs = {
  activeCounter: Scalars["Boolean"];
  uuid: Scalars["String"];
};

export type MutationUpdateDescriptionServiceArgs = {
  data: DescriptionServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateDocumentArgs = {
  data: DocumentInput;
  id: Scalars["ID"];
};

export type MutationUpdateDropOffMapArgs = {
  data: DropOffMapInput;
  id: Scalars["ID"];
};

export type MutationUpdateDropOffMapServiceArgs = {
  data: DropOffMapServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateEditoBlockArgs = {
  data: EditoBlockInput;
  id: Scalars["ID"];
};

export type MutationUpdateEditorialServiceArgs = {
  data: EditorialServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateEpciArgs = {
  data: EpciInput;
  id: Scalars["ID"];
};

export type MutationUpdateEventArgs = {
  data: EventInput;
  id: Scalars["ID"];
};

export type MutationUpdateEventSubServiceArgs = {
  data: EventSubServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateExistingsReferentialsArgs = {
  onlyPictos?: InputMaybe<Scalars["Boolean"]>;
};

export type MutationUpdateExportEntityArgs = {
  data: ExportEntityInput;
  id: Scalars["ID"];
};

export type MutationUpdateFileInfoArgs = {
  id: Scalars["ID"];
  info?: InputMaybe<FileInfoInput>;
};

export type MutationUpdateFlowArgs = {
  data: FlowInput;
  id: Scalars["ID"];
};

export type MutationUpdateFlowColorArgs = {
  data: FlowColorInput;
  id: Scalars["ID"];
};

export type MutationUpdateFooterArgs = {
  data: FooterInput;
  id: Scalars["ID"];
};

export type MutationUpdateFreeContentArgs = {
  data: FreeContentInput;
  id: Scalars["ID"];
};

export type MutationUpdateFreeContentSubServiceArgs = {
  data: FreeContentSubServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateFullContractArgs = {
  clientData: ClientContactInput;
  contractData: ContractInput;
  contractId: Scalars["ID"];
};

export type MutationUpdateGlobalArgs = {
  data: GlobalInput;
};

export type MutationUpdateHomepageArgs = {
  data: HomepageInput;
  id: Scalars["ID"];
};

export type MutationUpdateInformationMessageArgs = {
  data: InformationMessageInput;
  id: Scalars["ID"];
};

export type MutationUpdateKeyMetricArgs = {
  data: KeyMetricInput;
  id: Scalars["ID"];
};

export type MutationUpdateKeyMetricsServiceArgs = {
  data: KeyMetricsServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateMwCounterServiceArgs = {
  data: MwCounterServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateMwcFlowArgs = {
  data: MwcFlowInput;
  id: Scalars["ID"];
};

export type MutationUpdateNewArgs = {
  data: NewInput;
  id: Scalars["ID"];
};

export type MutationUpdateNewsSubServiceArgs = {
  data: NewsSubServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdatePickUpDayArgs = {
  data: PickUpDayInput;
  id: Scalars["ID"];
};

export type MutationUpdatePickUpDayServiceArgs = {
  data: PickUpDayServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateQuizArgs = {
  data: QuizInput;
  id: Scalars["ID"];
};

export type MutationUpdateQuizAndTipsBlockArgs = {
  data: QuizAndTipsBlockInput;
  id: Scalars["ID"];
};

export type MutationUpdateQuizSubServiceArgs = {
  data: QuizSubServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateRecyclingGuideBlockArgs = {
  data: RecyclingGuideBlockInput;
  id: Scalars["ID"];
};

export type MutationUpdateRecyclingGuideServiceArgs = {
  data: RecyclingGuideServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateRequestArgs = {
  data: RequestInput;
  id: Scalars["ID"];
};

export type MutationUpdateRequestAggregateArgs = {
  data: RequestAggregateInput;
  id: Scalars["ID"];
};

export type MutationUpdateRequestAggregateOrderArgs = {
  requestAggregateOrder: Array<InputMaybe<Scalars["ID"]>>;
};

export type MutationUpdateRequestServiceArgs = {
  data: RequestServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateRequestSlotArgs = {
  data: RequestSlotInput;
  id: Scalars["ID"];
};

export type MutationUpdateRequestTakedArgs = {
  data: RequestTakedInput;
  id: Scalars["ID"];
};

export type MutationUpdateSearchEngineBlockArgs = {
  data: SearchEngineBlockInput;
  id: Scalars["ID"];
};

export type MutationUpdateSectorizationArgs = {
  data: SectorizationInput;
  id: Scalars["ID"];
};

export type MutationUpdateServicesBlockArgs = {
  data: ServicesBlockInput;
  id: Scalars["ID"];
};

export type MutationUpdateShortNameArgs = {
  formId: Scalars["ID"];
  shortName: Scalars["String"];
};

export type MutationUpdateTagArgs = {
  data: TagInput;
  id: Scalars["ID"];
};

export type MutationUpdateTerritoryArgs = {
  data: TerritoryInput;
  id: Scalars["ID"];
};

export type MutationUpdateTerritoryTypeArgs = {
  data: TerritoryTypeInput;
  id: Scalars["ID"];
};

export type MutationUpdateTipArgs = {
  data: TipInput;
  id: Scalars["ID"];
};

export type MutationUpdateTipSubServiceArgs = {
  data: TipSubServiceInput;
  id: Scalars["ID"];
};

export type MutationUpdateTopContentBlockArgs = {
  data: TopContentBlockInput;
  id: Scalars["ID"];
};

export type MutationUpdateUploadFileArgs = {
  data: UploadFileInput;
  id: Scalars["ID"];
};

export type MutationUpdateUploadFolderArgs = {
  data: UploadFolderInput;
  id: Scalars["ID"];
};

export type MutationUpdateUserDataStorageArgs = {
  data: UserDataStorageInput;
  id: Scalars["ID"];
};

export type MutationUpdateUsersPermissionsRoleArgs = {
  data: UsersPermissionsRoleInput;
  id: Scalars["ID"];
};

export type MutationUpdateUsersPermissionsUserArgs = {
  data: UsersPermissionsUserInput;
  id: Scalars["ID"];
};

export type MutationUpdateWasteFamilyArgs = {
  data: WasteFamilyInput;
  id: Scalars["ID"];
};

export type MutationUpdateWasteFormArgs = {
  data: WasteFormInput;
  id: Scalars["ID"];
};

export type MutationUpdateWelcomeMessageBlockArgs = {
  data: WelcomeMessageBlockInput;
  id: Scalars["ID"];
};

export type MutationUpdateYesWeScanFormArgs = {
  data: YesWeScanFormInput;
  id: Scalars["ID"];
};

export type MutationUpdateYesWeScanQrCodeArgs = {
  data: YesWeScanQrCodeInput;
  id: Scalars["ID"];
};

export type MutationUpdateYesWeScanServiceArgs = {
  data: YesWeScanServiceInput;
  id: Scalars["ID"];
};

export type MutationUploadArgs = {
  field?: InputMaybe<Scalars["String"]>;
  file: Scalars["Upload"];
  info?: InputMaybe<FileInfoInput>;
  ref?: InputMaybe<Scalars["String"]>;
  refId?: InputMaybe<Scalars["ID"]>;
};

export type MutationUploadFileAndGetIdArgs = {
  path: Scalars["String"];
};

export type MutationUploadGraphQlArgs = {
  field?: InputMaybe<Scalars["String"]>;
  file: Scalars["Upload"];
  info?: InputMaybe<FileInfoInput>;
  ref?: InputMaybe<Scalars["String"]>;
  refId?: InputMaybe<Scalars["ID"]>;
};

export type MutationUrlUploaderArgs = {
  imageName: Scalars["String"];
  url: Scalars["String"];
};

export type MutationValidateRequestArgs = {
  requestJSON?: InputMaybe<Scalars["JSON"]>;
};

export type MutationValidateYesWeScanFormArgs = {
  yesWeScanFormJSON: Scalars["JSON"];
};

export type MutationVersioningHandlerArgs = {
  data: Scalars["JSON"];
  entity: Scalars["String"];
};

export type MutationYwsActivationArgs = {
  contractId: Scalars["ID"];
};

export type MutationYwsDeactivationArgs = {
  contractId: Scalars["ID"];
};

export type MwCounterService = {
  __typename?: "MwCounterService";
  barometerParams?: Maybe<Scalars["JSON"]>;
  cities?: Maybe<CityRelationResponseCollection>;
  city?: Maybe<Scalars["String"]>;
  contactEmail?: Maybe<Scalars["String"]>;
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  endDate?: Maybe<Scalars["Date"]>;
  hasTips?: Maybe<Scalars["Boolean"]>;
  isActivated: Scalars["Boolean"];
  mwcFlows?: Maybe<MwcFlowRelationResponseCollection>;
  name?: Maybe<Scalars["String"]>;
  phoneNumber?: Maybe<Scalars["String"]>;
  postalAddress?: Maybe<Scalars["String"]>;
  postalCode?: Maybe<Scalars["String"]>;
  serviceName?: Maybe<Scalars["String"]>;
  startDate?: Maybe<Scalars["Date"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type MwCounterServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type MwCounterServiceMwcFlowsArgs = {
  filters?: InputMaybe<MwcFlowFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type MwCounterServiceEntity = {
  __typename?: "MwCounterServiceEntity";
  attributes?: Maybe<MwCounterService>;
  id?: Maybe<Scalars["ID"]>;
};

export type MwCounterServiceEntityResponse = {
  __typename?: "MwCounterServiceEntityResponse";
  data?: Maybe<MwCounterServiceEntity>;
};

export type MwCounterServiceEntityResponseCollection = {
  __typename?: "MwCounterServiceEntityResponseCollection";
  data: Array<MwCounterServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type MwCounterServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<MwCounterServiceFiltersInput>>>;
  barometerParams?: InputMaybe<JsonFilterInput>;
  cities?: InputMaybe<CityFiltersInput>;
  city?: InputMaybe<StringFilterInput>;
  contactEmail?: InputMaybe<StringFilterInput>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  endDate?: InputMaybe<DateFilterInput>;
  hasTips?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  mwcFlows?: InputMaybe<MwcFlowFiltersInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<MwCounterServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<MwCounterServiceFiltersInput>>>;
  phoneNumber?: InputMaybe<StringFilterInput>;
  postalAddress?: InputMaybe<StringFilterInput>;
  postalCode?: InputMaybe<StringFilterInput>;
  serviceName?: InputMaybe<StringFilterInput>;
  startDate?: InputMaybe<DateFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type MwCounterServiceInput = {
  barometerParams?: InputMaybe<Scalars["JSON"]>;
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  city?: InputMaybe<Scalars["String"]>;
  contactEmail?: InputMaybe<Scalars["String"]>;
  contract?: InputMaybe<Scalars["ID"]>;
  description?: InputMaybe<Scalars["String"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  hasTips?: InputMaybe<Scalars["Boolean"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  mwcFlows?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  name?: InputMaybe<Scalars["String"]>;
  phoneNumber?: InputMaybe<Scalars["String"]>;
  postalAddress?: InputMaybe<Scalars["String"]>;
  postalCode?: InputMaybe<Scalars["String"]>;
  serviceName?: InputMaybe<Scalars["String"]>;
  startDate?: InputMaybe<Scalars["Date"]>;
};

export type MwCounterServiceRelationResponseCollection = {
  __typename?: "MwCounterServiceRelationResponseCollection";
  data: Array<MwCounterServiceEntity>;
};

export type MwcFlow = {
  __typename?: "MwcFlow";
  averageProductionPerson?: Maybe<Scalars["Long"]>;
  blocks?: Maybe<Array<Maybe<MwcFlowBlocksDynamicZone>>>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  editoContent?: Maybe<Array<Maybe<MwcFlowEditoContentDynamicZone>>>;
  flow?: Maybe<FlowEntityResponse>;
  hasEdito?: Maybe<Scalars["Boolean"]>;
  mwCounterService?: Maybe<MwCounterServiceEntityResponse>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  weightSystem?: Maybe<Enum_Mwcflow_Weightsystem>;
};

export type MwcFlowBlocksDynamicZone =
  | ComponentBlocksImage
  | ComponentBlocksSubHeading
  | ComponentBlocksVideo
  | ComponentBlocksWysiwyg
  | Error;

export type MwcFlowEditoContentDynamicZone = ComponentLinksEditoContent | Error;

export type MwcFlowEntity = {
  __typename?: "MwcFlowEntity";
  attributes?: Maybe<MwcFlow>;
  id?: Maybe<Scalars["ID"]>;
};

export type MwcFlowEntityResponse = {
  __typename?: "MwcFlowEntityResponse";
  data?: Maybe<MwcFlowEntity>;
};

export type MwcFlowEntityResponseCollection = {
  __typename?: "MwcFlowEntityResponseCollection";
  data: Array<MwcFlowEntity>;
  meta: ResponseCollectionMeta;
};

export type MwcFlowFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<MwcFlowFiltersInput>>>;
  averageProductionPerson?: InputMaybe<LongFilterInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  flow?: InputMaybe<FlowFiltersInput>;
  hasEdito?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  mwCounterService?: InputMaybe<MwCounterServiceFiltersInput>;
  not?: InputMaybe<MwcFlowFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<MwcFlowFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  weightSystem?: InputMaybe<StringFilterInput>;
};

export type MwcFlowInput = {
  averageProductionPerson?: InputMaybe<Scalars["Long"]>;
  blocks?: InputMaybe<Array<Scalars["MwcFlowBlocksDynamicZoneInput"]>>;
  editoContent?: InputMaybe<
    Array<Scalars["MwcFlowEditoContentDynamicZoneInput"]>
  >;
  flow?: InputMaybe<Scalars["ID"]>;
  hasEdito?: InputMaybe<Scalars["Boolean"]>;
  mwCounterService?: InputMaybe<Scalars["ID"]>;
  weightSystem?: InputMaybe<Enum_Mwcflow_Weightsystem>;
};

export type MwcFlowRelationResponseCollection = {
  __typename?: "MwcFlowRelationResponseCollection";
  data: Array<MwcFlowEntity>;
};

export type New = {
  __typename?: "New";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  blocks?: Maybe<Array<Maybe<NewBlocksDynamicZone>>>;
  channels?: Maybe<ChannelTypeRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  customId?: Maybe<Scalars["String"]>;
  draftCreationId?: Maybe<Scalars["String"]>;
  hasDraft?: Maybe<Scalars["Boolean"]>;
  image: UploadFileEntityResponse;
  newsSubService?: Maybe<NewsSubServiceEntityResponse>;
  publishedDate?: Maybe<Scalars["DateTime"]>;
  shortDescription?: Maybe<Scalars["String"]>;
  status?: Maybe<Enum_New_Status>;
  tags?: Maybe<TagRelationResponseCollection>;
  title: Scalars["String"];
  toBeUpdated?: Maybe<Scalars["Boolean"]>;
  unpublishedDate?: Maybe<Scalars["DateTime"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  versionNumber?: Maybe<Scalars["Int"]>;
};

export type NewAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type NewChannelsArgs = {
  filters?: InputMaybe<ChannelTypeFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type NewTagsArgs = {
  filters?: InputMaybe<TagFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type NewBlocksDynamicZone =
  | ComponentBlocksFile
  | ComponentBlocksHorizontalRule
  | ComponentBlocksImage
  | ComponentBlocksServices
  | ComponentBlocksSubHeading
  | ComponentBlocksVideo
  | ComponentBlocksWysiwyg
  | Error;

export type NewEntity = {
  __typename?: "NewEntity";
  attributes?: Maybe<New>;
  id?: Maybe<Scalars["ID"]>;
};

export type NewEntityResponse = {
  __typename?: "NewEntityResponse";
  data?: Maybe<NewEntity>;
};

export type NewEntityResponseCollection = {
  __typename?: "NewEntityResponseCollection";
  data: Array<NewEntity>;
  meta: ResponseCollectionMeta;
};

export type NewFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<NewFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  channels?: InputMaybe<ChannelTypeFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  customId?: InputMaybe<StringFilterInput>;
  draftCreationId?: InputMaybe<StringFilterInput>;
  hasDraft?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  newsSubService?: InputMaybe<NewsSubServiceFiltersInput>;
  not?: InputMaybe<NewFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<NewFiltersInput>>>;
  publishedDate?: InputMaybe<DateTimeFilterInput>;
  shortDescription?: InputMaybe<StringFilterInput>;
  status?: InputMaybe<StringFilterInput>;
  tags?: InputMaybe<TagFiltersInput>;
  title?: InputMaybe<StringFilterInput>;
  toBeUpdated?: InputMaybe<BooleanFilterInput>;
  unpublishedDate?: InputMaybe<DateTimeFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  versionNumber?: InputMaybe<IntFilterInput>;
};

export type NewInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  blocks?: InputMaybe<Array<Scalars["NewBlocksDynamicZoneInput"]>>;
  channels?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  customId?: InputMaybe<Scalars["String"]>;
  draftCreationId?: InputMaybe<Scalars["String"]>;
  hasDraft?: InputMaybe<Scalars["Boolean"]>;
  image?: InputMaybe<Scalars["ID"]>;
  newsSubService?: InputMaybe<Scalars["ID"]>;
  publishedDate?: InputMaybe<Scalars["DateTime"]>;
  shortDescription?: InputMaybe<Scalars["String"]>;
  status?: InputMaybe<Enum_New_Status>;
  tags?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  title?: InputMaybe<Scalars["String"]>;
  toBeUpdated?: InputMaybe<Scalars["Boolean"]>;
  unpublishedDate?: InputMaybe<Scalars["DateTime"]>;
  versionNumber?: InputMaybe<Scalars["Int"]>;
};

export type NewRelationResponseCollection = {
  __typename?: "NewRelationResponseCollection";
  data: Array<NewEntity>;
};

export type NewsSubService = {
  __typename?: "NewsSubService";
  cities?: Maybe<CityRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  endDate?: Maybe<Scalars["Date"]>;
  isActivated: Scalars["Boolean"];
  name: Scalars["String"];
  news?: Maybe<NewRelationResponseCollection>;
  startDate?: Maybe<Scalars["Date"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type NewsSubServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type NewsSubServiceNewsArgs = {
  filters?: InputMaybe<NewFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type NewsSubServiceEntity = {
  __typename?: "NewsSubServiceEntity";
  attributes?: Maybe<NewsSubService>;
  id?: Maybe<Scalars["ID"]>;
};

export type NewsSubServiceEntityResponse = {
  __typename?: "NewsSubServiceEntityResponse";
  data?: Maybe<NewsSubServiceEntity>;
};

export type NewsSubServiceEntityResponseCollection = {
  __typename?: "NewsSubServiceEntityResponseCollection";
  data: Array<NewsSubServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type NewsSubServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<NewsSubServiceFiltersInput>>>;
  cities?: InputMaybe<CityFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  editorialService?: InputMaybe<EditorialServiceFiltersInput>;
  endDate?: InputMaybe<DateFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  news?: InputMaybe<NewFiltersInput>;
  not?: InputMaybe<NewsSubServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<NewsSubServiceFiltersInput>>>;
  startDate?: InputMaybe<DateFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type NewsSubServiceInput = {
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  description?: InputMaybe<Scalars["String"]>;
  editorialService?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  news?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  startDate?: InputMaybe<Scalars["Date"]>;
};

export type NewsSubServiceRelationResponseCollection = {
  __typename?: "NewsSubServiceRelationResponseCollection";
  data: Array<NewsSubServiceEntity>;
};

export type NextAvailableSlots = {
  __typename?: "NextAvailableSlots";
  nextAvailableSlots?: Maybe<Array<Maybe<AvailableSlot>>>;
  noSlotMessage?: Maybe<Scalars["String"]>;
  slotMessage?: Maybe<Scalars["String"]>;
};

export type OldQrCodeMapping = {
  __typename?: "OldQrCodeMapping";
  idNewQrcode: Scalars["String"];
  newShortname: Scalars["String"];
};

export type OrderRequestAggregate = {
  __typename?: "OrderRequestAggregate";
  oid?: Maybe<Scalars["ID"]>;
};

export type Pagination = {
  __typename?: "Pagination";
  page: Scalars["Int"];
  pageCount: Scalars["Int"];
  pageSize: Scalars["Int"];
  total: Scalars["Int"];
};

export type PaginationArg = {
  limit?: InputMaybe<Scalars["Int"]>;
  page?: InputMaybe<Scalars["Int"]>;
  pageSize?: InputMaybe<Scalars["Int"]>;
  start?: InputMaybe<Scalars["Int"]>;
};

export type PickUpDay = {
  __typename?: "PickUpDay";
  advancedSelection: Scalars["JSON"];
  audiences?: Maybe<AudienceRelationResponseCollection>;
  buttonLabel?: Maybe<Scalars["String"]>;
  cities?: Maybe<CityRelationResponseCollection>;
  collectDoorToDoor?: Maybe<CollectDoorToDoorEntityResponse>;
  collectVoluntary?: Maybe<CollectVoluntaryEntityResponse>;
  complementaryMention?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  externalLink?: Maybe<Scalars["String"]>;
  flow: FlowEntityResponse;
  includeHoliday: Scalars["Boolean"];
  informationMessage?: Maybe<InformationMessageEntityResponse>;
  name: Scalars["String"];
  periodicity?: Maybe<Enum_Pickupday_Periodicity>;
  pickUpDayService?: Maybe<PickUpDayServiceEntityResponse>;
  pickUpHours?: Maybe<Scalars["String"]>;
  request?: Maybe<RequestEntityResponse>;
  sectorizations?: Maybe<SectorizationRelationResponseCollection>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type PickUpDayAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type PickUpDayCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type PickUpDaySectorizationsArgs = {
  filters?: InputMaybe<SectorizationFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type PickUpDayEntity = {
  __typename?: "PickUpDayEntity";
  attributes?: Maybe<PickUpDay>;
  id?: Maybe<Scalars["ID"]>;
};

export type PickUpDayEntityResponse = {
  __typename?: "PickUpDayEntityResponse";
  data?: Maybe<PickUpDayEntity>;
};

export type PickUpDayEntityResponseCollection = {
  __typename?: "PickUpDayEntityResponseCollection";
  data: Array<PickUpDayEntity>;
  meta: ResponseCollectionMeta;
};

export type PickUpDayFiltersInput = {
  advancedSelection?: InputMaybe<JsonFilterInput>;
  and?: InputMaybe<Array<InputMaybe<PickUpDayFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  buttonLabel?: InputMaybe<StringFilterInput>;
  cities?: InputMaybe<CityFiltersInput>;
  collectDoorToDoor?: InputMaybe<CollectDoorToDoorFiltersInput>;
  collectVoluntary?: InputMaybe<CollectVoluntaryFiltersInput>;
  complementaryMention?: InputMaybe<StringFilterInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  externalLink?: InputMaybe<StringFilterInput>;
  flow?: InputMaybe<FlowFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  includeHoliday?: InputMaybe<BooleanFilterInput>;
  informationMessage?: InputMaybe<InformationMessageFiltersInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<PickUpDayFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<PickUpDayFiltersInput>>>;
  periodicity?: InputMaybe<StringFilterInput>;
  pickUpDayService?: InputMaybe<PickUpDayServiceFiltersInput>;
  pickUpHours?: InputMaybe<StringFilterInput>;
  request?: InputMaybe<RequestFiltersInput>;
  sectorizations?: InputMaybe<SectorizationFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type PickUpDayInput = {
  advancedSelection?: InputMaybe<Scalars["JSON"]>;
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  buttonLabel?: InputMaybe<Scalars["String"]>;
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  collectDoorToDoor?: InputMaybe<Scalars["ID"]>;
  collectVoluntary?: InputMaybe<Scalars["ID"]>;
  complementaryMention?: InputMaybe<Scalars["String"]>;
  description?: InputMaybe<Scalars["String"]>;
  externalLink?: InputMaybe<Scalars["String"]>;
  flow?: InputMaybe<Scalars["ID"]>;
  includeHoliday?: InputMaybe<Scalars["Boolean"]>;
  informationMessage?: InputMaybe<Scalars["ID"]>;
  name?: InputMaybe<Scalars["String"]>;
  periodicity?: InputMaybe<Enum_Pickupday_Periodicity>;
  pickUpDayService?: InputMaybe<Scalars["ID"]>;
  pickUpHours?: InputMaybe<Scalars["String"]>;
  request?: InputMaybe<Scalars["ID"]>;
  sectorizations?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type PickUpDayRelationResponseCollection = {
  __typename?: "PickUpDayRelationResponseCollection";
  data: Array<PickUpDayEntity>;
};

export type PickUpDayService = {
  __typename?: "PickUpDayService";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  cities?: Maybe<CityRelationResponseCollection>;
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  endDate?: Maybe<Scalars["Date"]>;
  isActivated: Scalars["Boolean"];
  name: Scalars["String"];
  pickUpDays?: Maybe<PickUpDayRelationResponseCollection>;
  startDate?: Maybe<Scalars["Date"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type PickUpDayServiceAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type PickUpDayServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type PickUpDayServicePickUpDaysArgs = {
  filters?: InputMaybe<PickUpDayFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type PickUpDayServiceEntity = {
  __typename?: "PickUpDayServiceEntity";
  attributes?: Maybe<PickUpDayService>;
  id?: Maybe<Scalars["ID"]>;
};

export type PickUpDayServiceEntityResponse = {
  __typename?: "PickUpDayServiceEntityResponse";
  data?: Maybe<PickUpDayServiceEntity>;
};

export type PickUpDayServiceEntityResponseCollection = {
  __typename?: "PickUpDayServiceEntityResponseCollection";
  data: Array<PickUpDayServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type PickUpDayServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<PickUpDayServiceFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  cities?: InputMaybe<CityFiltersInput>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  endDate?: InputMaybe<DateFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<PickUpDayServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<PickUpDayServiceFiltersInput>>>;
  pickUpDays?: InputMaybe<PickUpDayFiltersInput>;
  startDate?: InputMaybe<DateFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type PickUpDayServiceInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  contract?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  pickUpDays?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  startDate?: InputMaybe<Scalars["Date"]>;
};

export type PickUpDayServiceRelationResponseCollection = {
  __typename?: "PickUpDayServiceRelationResponseCollection";
  data: Array<PickUpDayServiceEntity>;
};

export type PictoDto = {
  __typename?: "PictoDTO";
  alternativeText?: Maybe<Scalars["String"]>;
  id: Scalars["String"];
  name: Scalars["String"];
  url: Scalars["String"];
};

export enum PublicationState {
  Live = "LIVE",
  Preview = "PREVIEW",
}

export type Query = {
  __typename?: "Query";
  accessibilities?: Maybe<AccessibilityEntityResponseCollection>;
  accessibility?: Maybe<AccessibilityEntityResponse>;
  accessibilitySubService?: Maybe<AccessibilitySubServiceEntityResponse>;
  accessibilitySubServices?: Maybe<AccessibilitySubServiceEntityResponseCollection>;
  alertNotification?: Maybe<AlertNotificationEntityResponse>;
  alertNotificationService?: Maybe<AlertNotificationServiceEntityResponse>;
  alertNotificationServices?: Maybe<AlertNotificationServiceEntityResponseCollection>;
  alertNotifications?: Maybe<AlertNotificationEntityResponseCollection>;
  alertUserStorage?: Maybe<AlertUserStorageEntityResponse>;
  alertUserStorages?: Maybe<AlertUserStorageEntityResponseCollection>;
  audience?: Maybe<AudienceEntityResponse>;
  audiences?: Maybe<AudienceEntityResponseCollection>;
  cgu?: Maybe<CguEntityResponse>;
  cguSubService?: Maybe<CguSubServiceEntityResponse>;
  cguSubServices?: Maybe<CguSubServiceEntityResponseCollection>;
  cgus?: Maybe<CguEntityResponseCollection>;
  channelType?: Maybe<ChannelTypeEntityResponse>;
  channelTypes?: Maybe<ChannelTypeEntityResponseCollection>;
  cities?: Maybe<CityEntityResponseCollection>;
  city?: Maybe<CityEntityResponse>;
  clientContact?: Maybe<ClientContactEntityResponse>;
  clientContacts?: Maybe<ClientContactEntityResponseCollection>;
  collectDoorToDoor?: Maybe<CollectDoorToDoorEntityResponse>;
  collectDoorToDoors?: Maybe<CollectDoorToDoorEntityResponseCollection>;
  collectDropOff?: Maybe<CollectDropOffEntityResponse>;
  collectDropOffs?: Maybe<CollectDropOffEntityResponseCollection>;
  collectVoluntaries?: Maybe<CollectVoluntaryEntityResponseCollection>;
  collectVoluntary?: Maybe<CollectVoluntaryEntityResponse>;
  confidentialities?: Maybe<ConfidentialityEntityResponseCollection>;
  confidentiality?: Maybe<ConfidentialityEntityResponse>;
  confidentialitySubService?: Maybe<ConfidentialitySubServiceEntityResponse>;
  confidentialitySubServices?: Maybe<ConfidentialitySubServiceEntityResponseCollection>;
  contactUs?: Maybe<ContactUsEntityResponse>;
  contactUsSubService?: Maybe<ContactUsSubServiceEntityResponse>;
  contactUsSubServices?: Maybe<ContactUsSubServiceEntityResponseCollection>;
  contactUses?: Maybe<ContactUsEntityResponseCollection>;
  contract?: Maybe<ContractEntityResponse>;
  contractCustomization?: Maybe<ContractCustomizationEntityResponse>;
  contractCustomizations?: Maybe<ContractCustomizationEntityResponseCollection>;
  contractMenu?: Maybe<ContractMenuEntityResponse>;
  contractMenus?: Maybe<ContractMenuEntityResponseCollection>;
  contractPublication?: Maybe<ContractStatus>;
  contracts?: Maybe<ContractEntityResponseCollection>;
  cookie?: Maybe<CookieEntityResponse>;
  cookies?: Maybe<CookieEntityResponseCollection>;
  cookiesSubService?: Maybe<CookiesSubServiceEntityResponse>;
  cookiesSubServices?: Maybe<CookiesSubServiceEntityResponseCollection>;
  countContentPerTag?: Maybe<Array<Maybe<TotalCountPerTag>>>;
  createBackOfficeUser?: Maybe<User>;
  deleteBackOfficeUser?: Maybe<User>;
  descriptionService?: Maybe<DescriptionServiceEntityResponse>;
  descriptionServices?: Maybe<DescriptionServiceEntityResponseCollection>;
  document?: Maybe<DocumentEntityResponse>;
  documents?: Maybe<DocumentEntityResponseCollection>;
  dropOffMap?: Maybe<DropOffMapEntityResponse>;
  dropOffMapService?: Maybe<DropOffMapServiceEntityResponse>;
  dropOffMapServices?: Maybe<DropOffMapServiceEntityResponseCollection>;
  dropOffMaps?: Maybe<DropOffMapEntityResponseCollection>;
  editoBlock?: Maybe<EditoBlockEntityResponse>;
  editoBlocks?: Maybe<EditoBlockEntityResponseCollection>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  editorialServices?: Maybe<EditorialServiceEntityResponseCollection>;
  epci?: Maybe<EpciEntityResponse>;
  epcis?: Maybe<EpciEntityResponseCollection>;
  event?: Maybe<EventEntityResponse>;
  eventSubService?: Maybe<EventSubServiceEntityResponse>;
  eventSubServices?: Maybe<EventSubServiceEntityResponseCollection>;
  events?: Maybe<EventEntityResponseCollection>;
  exportEntities?: Maybe<ExportEntityEntityResponseCollection>;
  exportEntity?: Maybe<ExportEntityEntityResponse>;
  files: Array<Maybe<File>>;
  fixImportedSectorization?: Maybe<Scalars["Boolean"]>;
  flow?: Maybe<FlowEntityResponse>;
  flowColor?: Maybe<FlowColorEntityResponse>;
  flowColors?: Maybe<FlowColorEntityResponseCollection>;
  flows?: Maybe<FlowEntityResponseCollection>;
  footer?: Maybe<FooterEntityResponse>;
  footers?: Maybe<FooterEntityResponseCollection>;
  freeContent?: Maybe<FreeContentEntityResponse>;
  freeContentSubService?: Maybe<FreeContentSubServiceEntityResponse>;
  freeContentSubServices?: Maybe<FreeContentSubServiceEntityResponseCollection>;
  freeContents?: Maybe<FreeContentEntityResponseCollection>;
  getAddressCoordinates?: Maybe<Array<Maybe<SearchResultAddress>>>;
  getAllFoldersHierarchy?: Maybe<Array<Maybe<RequestFolders>>>;
  getAppointmentsDetails?: Maybe<AppointmentDetails>;
  getBackOfficeUserListByContractId?: Maybe<Array<Maybe<User>>>;
  getCitiesInformations?: Maybe<Array<Maybe<CityInformation>>>;
  getCityInformationsByInsee?: Maybe<CityInformation>;
  getContentTypeDTOs?: Maybe<Array<Maybe<ContentTypeDto>>>;
  getContractIdByInseeCode?: Maybe<ContractEntity>;
  getCumbersomeReferential: Array<Maybe<Cumbersome>>;
  getDropOffCollectType?: Maybe<Array<Maybe<CollectEntity>>>;
  getDropOffMaps?: Maybe<Array<Maybe<DropOffMapDto>>>;
  getEditoBlockDTO?: Maybe<EditoBlockDto>;
  getEditoContentDTOs?: Maybe<Array<Maybe<EditoContentDto>>>;
  getEditoContentLinkedServices?: Maybe<Result>;
  getEnrichRequests?: Maybe<Array<Maybe<EnrichRequest>>>;
  getEpcisInformations?: Maybe<Array<Maybe<EpciInformation>>>;
  getFilePath?: Maybe<Scalars["String"]>;
  getFolderHierarchy?: Maybe<Array<Maybe<RequestFolders>>>;
  getMwcAverageProduction?: Maybe<Scalars["Int"]>;
  getNewestTopContents?: Maybe<Array<Maybe<EventOrNews>>>;
  getNextAvailableSlots?: Maybe<NextAvailableSlots>;
  getOldQrCodeMappings?: Maybe<Scalars["JSON"]>;
  getOldQrCodeSingleMapping: OldQrCodeMapping;
  getPickUpDaysByCoordinates?: Maybe<Array<Maybe<Scalars["ID"]>>>;
  getRequestsHistoric?: Maybe<Array<Maybe<Historic>>>;
  getServiceBlockData?: Maybe<Scalars["JSON"]>;
  getStatusExport?: Maybe<Scalars["String"]>;
  getThreeRandomTips?: Maybe<Array<Maybe<Tips>>>;
  getTopContentBlockDTO?: Maybe<TopContentBlockDto>;
  getTopContentDTOs?: Maybe<Array<Maybe<EditoContentDto>>>;
  getUserContracts?: Maybe<Array<Maybe<UserContract>>>;
  getUserFromAddressOrUuid?: Maybe<Array<Maybe<User>>>;
  getYwsStatistics?: Maybe<Array<Maybe<Historic>>>;
  global?: Maybe<GlobalEntityResponse>;
  homepage?: Maybe<HomepageEntityResponse>;
  homepages?: Maybe<HomepageEntityResponseCollection>;
  i18NLocale?: Maybe<I18NLocaleEntityResponse>;
  i18NLocales?: Maybe<I18NLocaleEntityResponseCollection>;
  informationMessage?: Maybe<InformationMessageEntityResponse>;
  informationMessages?: Maybe<InformationMessageEntityResponseCollection>;
  isSlotsUpdatable?: Maybe<Scalars["Boolean"]>;
  keyMetric?: Maybe<KeyMetricEntityResponse>;
  keyMetrics?: Maybe<KeyMetricEntityResponseCollection>;
  keyMetricsService?: Maybe<KeyMetricsServiceEntityResponse>;
  keyMetricsServices?: Maybe<KeyMetricsServiceEntityResponseCollection>;
  libraryBreadcrumbTrail?: Maybe<Array<Maybe<Folders>>>;
  librarySearchEngine?: Maybe<Array<Maybe<RequestFileOrFolder>>>;
  me?: Maybe<UsersPermissionsMe>;
  mwCounterService?: Maybe<MwCounterServiceEntityResponse>;
  mwCounterServices?: Maybe<MwCounterServiceEntityResponseCollection>;
  mwcFlow?: Maybe<MwcFlowEntityResponse>;
  mwcFlows?: Maybe<MwcFlowEntityResponseCollection>;
  new?: Maybe<NewEntityResponse>;
  news?: Maybe<NewEntityResponseCollection>;
  newsSubService?: Maybe<NewsSubServiceEntityResponse>;
  newsSubServices?: Maybe<NewsSubServiceEntityResponseCollection>;
  pickUpDay?: Maybe<PickUpDayEntityResponse>;
  pickUpDayService?: Maybe<PickUpDayServiceEntityResponse>;
  pickUpDayServices?: Maybe<PickUpDayServiceEntityResponseCollection>;
  pickUpDays?: Maybe<PickUpDayEntityResponseCollection>;
  quiz?: Maybe<QuizEntityResponse>;
  quizAndTipsBlock?: Maybe<QuizAndTipsBlockEntityResponse>;
  quizAndTipsBlocks?: Maybe<QuizAndTipsBlockEntityResponseCollection>;
  quizSubService?: Maybe<QuizSubServiceEntityResponse>;
  quizSubServices?: Maybe<QuizSubServiceEntityResponseCollection>;
  quizzes?: Maybe<QuizEntityResponseCollection>;
  recyclingGuideBlock?: Maybe<RecyclingGuideBlockEntityResponse>;
  recyclingGuideBlocks?: Maybe<RecyclingGuideBlockEntityResponseCollection>;
  recyclingGuideSearchEngine?: Maybe<Array<Maybe<SearchResult>>>;
  recyclingGuideService?: Maybe<RecyclingGuideServiceEntityResponse>;
  recyclingGuideServices?: Maybe<RecyclingGuideServiceEntityResponseCollection>;
  request?: Maybe<RequestEntityResponse>;
  requestAggregate?: Maybe<RequestAggregateEntityResponse>;
  requestAggregates?: Maybe<RequestAggregateEntityResponseCollection>;
  requestService?: Maybe<RequestServiceEntityResponse>;
  requestServices?: Maybe<RequestServiceEntityResponseCollection>;
  requestSlot?: Maybe<RequestSlotEntityResponse>;
  requestSlots?: Maybe<RequestSlotEntityResponseCollection>;
  requestTaked?: Maybe<RequestTakedEntityResponse>;
  requestTakeds?: Maybe<RequestTakedEntityResponseCollection>;
  requests?: Maybe<RequestEntityResponseCollection>;
  searchCities?: Maybe<Array<Maybe<CityResult>>>;
  searchClientsByName?: Maybe<Array<Maybe<ClientName>>>;
  searchEngineBlock?: Maybe<SearchEngineBlockEntityResponse>;
  searchEngineBlocks?: Maybe<SearchEngineBlockEntityResponseCollection>;
  sectorization?: Maybe<SectorizationEntityResponse>;
  sectorizationByCity?: Maybe<CitySectorization>;
  sectorizations?: Maybe<SectorizationEntityResponseCollection>;
  sectorizationsByCoordinates?: Maybe<Array<Maybe<Scalars["ID"]>>>;
  servicesBlock?: Maybe<ServicesBlockEntityResponse>;
  servicesBlocks?: Maybe<ServicesBlockEntityResponseCollection>;
  tag?: Maybe<TagEntityResponse>;
  tags?: Maybe<TagEntityResponseCollection>;
  territories?: Maybe<TerritoryEntityResponseCollection>;
  territory?: Maybe<TerritoryEntityResponse>;
  territoryType?: Maybe<TerritoryTypeEntityResponse>;
  territoryTypes?: Maybe<TerritoryTypeEntityResponseCollection>;
  tip?: Maybe<TipEntityResponse>;
  tipSubService?: Maybe<TipSubServiceEntityResponse>;
  tipSubServices?: Maybe<TipSubServiceEntityResponseCollection>;
  tips?: Maybe<TipEntityResponseCollection>;
  topContentBlock?: Maybe<TopContentBlockEntityResponse>;
  topContentBlocks?: Maybe<TopContentBlockEntityResponseCollection>;
  updateBackOfficeUser?: Maybe<User>;
  updateBackOfficeUserPermissions?: Maybe<Array<Maybe<Rights>>>;
  uploadFile?: Maybe<UploadFileEntityResponse>;
  uploadFiles?: Maybe<UploadFileEntityResponseCollection>;
  uploadFolder?: Maybe<UploadFolderEntityResponse>;
  uploadFolders?: Maybe<UploadFolderEntityResponseCollection>;
  userDataStorage?: Maybe<UserDataStorageEntityResponse>;
  userDataStorages?: Maybe<UserDataStorageEntityResponseCollection>;
  usersPermissionsRole?: Maybe<UsersPermissionsRoleEntityResponse>;
  usersPermissionsRoles?: Maybe<UsersPermissionsRoleEntityResponseCollection>;
  usersPermissionsUser?: Maybe<UsersPermissionsUserEntityResponse>;
  usersPermissionsUsers?: Maybe<UsersPermissionsUserEntityResponseCollection>;
  wasteFamilies?: Maybe<WasteFamilyEntityResponseCollection>;
  wasteFamily?: Maybe<WasteFamilyEntityResponse>;
  wasteFamilyLength?: Maybe<Scalars["Int"]>;
  wasteForm?: Maybe<WasteFormEntityResponse>;
  wasteForms?: Maybe<WasteFormEntityResponseCollection>;
  welcomeMessageBlock?: Maybe<WelcomeMessageBlockEntityResponse>;
  welcomeMessageBlocks?: Maybe<WelcomeMessageBlockEntityResponseCollection>;
  yesWeScanForm?: Maybe<YesWeScanFormEntityResponse>;
  yesWeScanForms?: Maybe<YesWeScanFormEntityResponseCollection>;
  yesWeScanQrCode?: Maybe<YesWeScanQrCodeEntityResponse>;
  yesWeScanQrCodes?: Maybe<YesWeScanQrCodeEntityResponseCollection>;
  yesWeScanService?: Maybe<YesWeScanServiceEntityResponse>;
  yesWeScanServices?: Maybe<YesWeScanServiceEntityResponseCollection>;
};

export type QueryAccessibilitiesArgs = {
  filters?: InputMaybe<AccessibilityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryAccessibilityArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryAccessibilitySubServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryAccessibilitySubServicesArgs = {
  filters?: InputMaybe<AccessibilitySubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryAlertNotificationArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryAlertNotificationServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryAlertNotificationServicesArgs = {
  filters?: InputMaybe<AlertNotificationServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryAlertNotificationsArgs = {
  filters?: InputMaybe<AlertNotificationFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryAlertUserStorageArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryAlertUserStoragesArgs = {
  filters?: InputMaybe<AlertUserStorageFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryAudienceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryCguArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryCguSubServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryCguSubServicesArgs = {
  filters?: InputMaybe<CguSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryCgusArgs = {
  filters?: InputMaybe<CguFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryChannelTypeArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryChannelTypesArgs = {
  filters?: InputMaybe<ChannelTypeFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryCityArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryClientContactArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryClientContactsArgs = {
  filters?: InputMaybe<ClientContactFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryCollectDoorToDoorArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryCollectDoorToDoorsArgs = {
  filters?: InputMaybe<CollectDoorToDoorFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryCollectDropOffArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryCollectDropOffsArgs = {
  filters?: InputMaybe<CollectDropOffFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryCollectVoluntariesArgs = {
  filters?: InputMaybe<CollectVoluntaryFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryCollectVoluntaryArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryConfidentialitiesArgs = {
  filters?: InputMaybe<ConfidentialityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryConfidentialityArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryConfidentialitySubServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryConfidentialitySubServicesArgs = {
  filters?: InputMaybe<ConfidentialitySubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryContactUsArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryContactUsSubServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryContactUsSubServicesArgs = {
  filters?: InputMaybe<ContactUsSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryContactUsesArgs = {
  filters?: InputMaybe<ContactUsFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryContractArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryContractCustomizationArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryContractCustomizationsArgs = {
  filters?: InputMaybe<ContractCustomizationFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryContractMenuArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryContractMenusArgs = {
  filters?: InputMaybe<ContractMenuFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryContractPublicationArgs = {
  contractId: Scalars["ID"];
};

export type QueryContractsArgs = {
  filters?: InputMaybe<ContractFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryCookieArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryCookiesArgs = {
  filters?: InputMaybe<CookieFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryCookiesSubServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryCookiesSubServicesArgs = {
  filters?: InputMaybe<CookiesSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryCountContentPerTagArgs = {
  contractId: Scalars["ID"];
};

export type QueryCreateBackOfficeUserArgs = {
  contract: Scalars["String"];
  email: Scalars["String"];
  firstName: Scalars["String"];
  lastName: Scalars["String"];
  phoneNumber: Scalars["String"];
  role: Scalars["String"];
};

export type QueryDeleteBackOfficeUserArgs = {
  uuid?: InputMaybe<Scalars["String"]>;
};

export type QueryDescriptionServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryDescriptionServicesArgs = {
  filters?: InputMaybe<DescriptionServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryDocumentArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryDocumentsArgs = {
  filters?: InputMaybe<DocumentFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryDropOffMapArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryDropOffMapServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryDropOffMapServicesArgs = {
  filters?: InputMaybe<DropOffMapServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryDropOffMapsArgs = {
  filters?: InputMaybe<DropOffMapFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryEditoBlockArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryEditoBlocksArgs = {
  filters?: InputMaybe<EditoBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryEditorialServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryEditorialServicesArgs = {
  filters?: InputMaybe<EditorialServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryEpciArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryEpcisArgs = {
  filters?: InputMaybe<EpciFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryEventArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryEventSubServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryEventSubServicesArgs = {
  filters?: InputMaybe<EventSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryEventsArgs = {
  filters?: InputMaybe<EventFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryExportEntitiesArgs = {
  filters?: InputMaybe<ExportEntityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryExportEntityArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryFlowArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryFlowColorArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryFlowColorsArgs = {
  filters?: InputMaybe<FlowColorFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryFlowsArgs = {
  filters?: InputMaybe<FlowFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryFooterArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryFootersArgs = {
  filters?: InputMaybe<FooterFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryFreeContentArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryFreeContentSubServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryFreeContentSubServicesArgs = {
  filters?: InputMaybe<FreeContentSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryFreeContentsArgs = {
  filters?: InputMaybe<FreeContentFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryGetAddressCoordinatesArgs = {
  housenumber?: InputMaybe<Scalars["Boolean"]>;
  searchTerm: Scalars["String"];
};

export type QueryGetAllFoldersHierarchyArgs = {
  path: Scalars["String"];
};

export type QueryGetAppointmentsDetailsArgs = {
  requestId: Scalars["ID"];
};

export type QueryGetBackOfficeUserListByContractIdArgs = {
  contractId?: InputMaybe<Scalars["ID"]>;
};

export type QueryGetCitiesInformationsArgs = {
  prehome: Scalars["Boolean"];
  searchTerm: Scalars["String"];
};

export type QueryGetCityInformationsByInseeArgs = {
  inseeCode: Scalars["String"];
};

export type QueryGetContentTypeDtOsArgs = {
  contractId: Scalars["ID"];
};

export type QueryGetContractIdByInseeCodeArgs = {
  INSEE: Scalars["String"];
};

export type QueryGetDropOffCollectTypeArgs = {
  contractId: Scalars["ID"];
};

export type QueryGetDropOffMapsArgs = {
  audienceId: Scalars["ID"];
  dropOffMapServiceId: Scalars["ID"];
};

export type QueryGetEditoBlockDtoArgs = {
  audienceId: Scalars["ID"];
  contractId: Scalars["ID"];
};

export type QueryGetEditoContentDtOsArgs = {
  audienceId: Scalars["ID"];
  contractId: Scalars["ID"];
  status?: InputMaybe<Enum_Editocontentdto_Status>;
};

export type QueryGetEditoContentLinkedServicesArgs = {
  audience?: InputMaybe<Scalars["ID"]>;
  selectedService: LinkServiceType;
  serviceId: Scalars["ID"];
};

export type QueryGetEnrichRequestsArgs = {
  requestServiceId: Scalars["ID"];
};

export type QueryGetEpcisInformationsArgs = {
  searchTerm: Scalars["String"];
};

export type QueryGetFilePathArgs = {
  id: Scalars["ID"];
};

export type QueryGetFolderHierarchyArgs = {
  path: Scalars["String"];
};

export type QueryGetMwcAverageProductionArgs = {
  contractId?: InputMaybe<Scalars["ID"]>;
};

export type QueryGetNewestTopContentsArgs = {
  audienceId: Scalars["ID"];
  contractId: Scalars["ID"];
};

export type QueryGetNextAvailableSlotsArgs = {
  lat: Scalars["Float"];
  long: Scalars["Float"];
  requestId: Scalars["ID"];
};

export type QueryGetOldQrCodeMappingsArgs = {
  contractId: Scalars["ID"];
};

export type QueryGetOldQrCodeSingleMappingArgs = {
  contractId: Scalars["ID"];
  legacyServiceName: Scalars["String"];
  uuidLegacy: Scalars["String"];
};

export type QueryGetPickUpDaysByCoordinatesArgs = {
  lat: Scalars["Float"];
  long: Scalars["Float"];
  pickUpDayServiceId: Scalars["ID"];
};

export type QueryGetRequestsHistoricArgs = {
  requestServiceId: Scalars["Int"];
};

export type QueryGetServiceBlockDataArgs = {
  linkToServiceId: Scalars["ID"];
};

export type QueryGetStatusExportArgs = {
  id: Scalars["ID"];
};

export type QueryGetThreeRandomTipsArgs = {
  contractId: Scalars["ID"];
};

export type QueryGetTopContentBlockDtoArgs = {
  audienceId: Scalars["ID"];
  contractId: Scalars["ID"];
};

export type QueryGetTopContentDtOsArgs = {
  audienceId: Scalars["ID"];
  contractId: Scalars["ID"];
  status?: InputMaybe<Enum_Topcontentdto_Status>;
};

export type QueryGetUserContractsArgs = {
  uuid: Scalars["String"];
};

export type QueryGetUserFromAddressOrUuidArgs = {
  address?: InputMaybe<Scalars["String"]>;
  contractId?: InputMaybe<Scalars["ID"]>;
  uuid?: InputMaybe<Scalars["String"]>;
};

export type QueryGetYwsStatisticsArgs = {
  contractId: Scalars["ID"];
};

export type QueryHomepageArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryHomepagesArgs = {
  filters?: InputMaybe<HomepageFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryI18NLocaleArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryI18NLocalesArgs = {
  filters?: InputMaybe<I18NLocaleFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryInformationMessageArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryInformationMessagesArgs = {
  filters?: InputMaybe<InformationMessageFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryIsSlotsUpdatableArgs = {
  requestId: Scalars["ID"];
};

export type QueryKeyMetricArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryKeyMetricsArgs = {
  filters?: InputMaybe<KeyMetricFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  publicationState?: InputMaybe<PublicationState>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryKeyMetricsServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryKeyMetricsServicesArgs = {
  filters?: InputMaybe<KeyMetricsServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryLibraryBreadcrumbTrailArgs = {
  path: Scalars["String"];
};

export type QueryLibrarySearchEngineArgs = {
  path: Scalars["String"];
  query: Scalars["String"];
};

export type QueryMwCounterServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryMwCounterServicesArgs = {
  filters?: InputMaybe<MwCounterServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryMwcFlowArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryMwcFlowsArgs = {
  filters?: InputMaybe<MwcFlowFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryNewArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryNewsArgs = {
  filters?: InputMaybe<NewFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryNewsSubServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryNewsSubServicesArgs = {
  filters?: InputMaybe<NewsSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryPickUpDayArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryPickUpDayServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryPickUpDayServicesArgs = {
  filters?: InputMaybe<PickUpDayServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryPickUpDaysArgs = {
  filters?: InputMaybe<PickUpDayFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryQuizArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryQuizAndTipsBlockArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryQuizAndTipsBlocksArgs = {
  filters?: InputMaybe<QuizAndTipsBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryQuizSubServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryQuizSubServicesArgs = {
  filters?: InputMaybe<QuizSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryQuizzesArgs = {
  filters?: InputMaybe<QuizFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryRecyclingGuideBlockArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryRecyclingGuideBlocksArgs = {
  filters?: InputMaybe<RecyclingGuideBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryRecyclingGuideSearchEngineArgs = {
  contractId: Scalars["ID"];
  searchTerm: Scalars["String"];
};

export type QueryRecyclingGuideServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryRecyclingGuideServicesArgs = {
  filters?: InputMaybe<RecyclingGuideServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryRequestArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryRequestAggregateArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryRequestAggregatesArgs = {
  filters?: InputMaybe<RequestAggregateFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryRequestServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryRequestServicesArgs = {
  filters?: InputMaybe<RequestServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryRequestSlotArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryRequestSlotsArgs = {
  filters?: InputMaybe<RequestSlotFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryRequestTakedArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryRequestTakedsArgs = {
  filters?: InputMaybe<RequestTakedFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryRequestsArgs = {
  filters?: InputMaybe<RequestFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QuerySearchCitiesArgs = {
  contractId: Scalars["ID"];
  searchTerm: Scalars["String"];
};

export type QuerySearchClientsByNameArgs = {
  name: Scalars["String"];
};

export type QuerySearchEngineBlockArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QuerySearchEngineBlocksArgs = {
  filters?: InputMaybe<SearchEngineBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QuerySectorizationArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QuerySectorizationByCityArgs = {
  inseeCode: Scalars["String"];
};

export type QuerySectorizationsArgs = {
  filters?: InputMaybe<SectorizationFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QuerySectorizationsByCoordinatesArgs = {
  contractId: Scalars["ID"];
  lat: Scalars["Float"];
  long: Scalars["Float"];
};

export type QueryServicesBlockArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryServicesBlocksArgs = {
  filters?: InputMaybe<ServicesBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryTagArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryTagsArgs = {
  filters?: InputMaybe<TagFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryTerritoriesArgs = {
  filters?: InputMaybe<TerritoryFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryTerritoryArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryTerritoryTypeArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryTerritoryTypesArgs = {
  filters?: InputMaybe<TerritoryTypeFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryTipArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryTipSubServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryTipSubServicesArgs = {
  filters?: InputMaybe<TipSubServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryTipsArgs = {
  filters?: InputMaybe<TipFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryTopContentBlockArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryTopContentBlocksArgs = {
  filters?: InputMaybe<TopContentBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryUpdateBackOfficeUserArgs = {
  contractId: Scalars["String"];
  email: Scalars["String"];
  firstName: Scalars["String"];
  isRoleUpdated: Scalars["Boolean"];
  lastName: Scalars["String"];
  phoneNumber: Scalars["String"];
  role: Scalars["String"];
  uuid: Scalars["String"];
};

export type QueryUpdateBackOfficeUserPermissionsArgs = {
  contract: Scalars["String"];
  rights: Array<InputMaybe<Scalars["String"]>>;
  role: Scalars["String"];
};

export type QueryUploadFileArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryUploadFilesArgs = {
  filters?: InputMaybe<UploadFileFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryUploadFolderArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryUploadFoldersArgs = {
  filters?: InputMaybe<UploadFolderFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryUserDataStorageArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryUserDataStoragesArgs = {
  filters?: InputMaybe<UserDataStorageFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryUsersPermissionsRoleArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryUsersPermissionsRolesArgs = {
  filters?: InputMaybe<UsersPermissionsRoleFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryUsersPermissionsUserArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryUsersPermissionsUsersArgs = {
  filters?: InputMaybe<UsersPermissionsUserFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryWasteFamiliesArgs = {
  filters?: InputMaybe<WasteFamilyFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryWasteFamilyArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryWasteFamilyLengthArgs = {
  id: Scalars["ID"];
};

export type QueryWasteFormArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryWasteFormsArgs = {
  filters?: InputMaybe<WasteFormFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryWelcomeMessageBlockArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryWelcomeMessageBlocksArgs = {
  filters?: InputMaybe<WelcomeMessageBlockFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryYesWeScanFormArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryYesWeScanFormsArgs = {
  filters?: InputMaybe<YesWeScanFormFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryYesWeScanQrCodeArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryYesWeScanQrCodesArgs = {
  filters?: InputMaybe<YesWeScanQrCodeFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QueryYesWeScanServiceArgs = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type QueryYesWeScanServicesArgs = {
  filters?: InputMaybe<YesWeScanServiceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type Quiz = {
  __typename?: "Quiz";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  customId?: Maybe<Scalars["String"]>;
  draftCreationId?: Maybe<Scalars["String"]>;
  hasDraft?: Maybe<Scalars["Boolean"]>;
  publishedDate?: Maybe<Scalars["DateTime"]>;
  quizSubService?: Maybe<QuizSubServiceEntityResponse>;
  shortDescription?: Maybe<Scalars["String"]>;
  status?: Maybe<Enum_Quiz_Status>;
  tags?: Maybe<TagRelationResponseCollection>;
  title?: Maybe<Scalars["String"]>;
  toBeUpdated?: Maybe<Scalars["Boolean"]>;
  unpublishedDate?: Maybe<Scalars["DateTime"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  versionNumber?: Maybe<Scalars["Int"]>;
};

export type QuizAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QuizTagsArgs = {
  filters?: InputMaybe<TagFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QuizAndTipsBlock = {
  __typename?: "QuizAndTipsBlock";
  audience?: Maybe<AudienceEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  displayBlock: Scalars["Boolean"];
  displayQuiz: Scalars["Boolean"];
  displayTips: Scalars["Boolean"];
  homepage?: Maybe<HomepageEntityResponse>;
  quiz?: Maybe<QuizEntityResponse>;
  tips?: Maybe<TipRelationResponseCollection>;
  titleContent: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type QuizAndTipsBlockTipsArgs = {
  filters?: InputMaybe<TipFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QuizAndTipsBlockEntity = {
  __typename?: "QuizAndTipsBlockEntity";
  attributes?: Maybe<QuizAndTipsBlock>;
  id?: Maybe<Scalars["ID"]>;
};

export type QuizAndTipsBlockEntityResponse = {
  __typename?: "QuizAndTipsBlockEntityResponse";
  data?: Maybe<QuizAndTipsBlockEntity>;
};

export type QuizAndTipsBlockEntityResponseCollection = {
  __typename?: "QuizAndTipsBlockEntityResponseCollection";
  data: Array<QuizAndTipsBlockEntity>;
  meta: ResponseCollectionMeta;
};

export type QuizAndTipsBlockFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<QuizAndTipsBlockFiltersInput>>>;
  audience?: InputMaybe<AudienceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  displayBlock?: InputMaybe<BooleanFilterInput>;
  displayQuiz?: InputMaybe<BooleanFilterInput>;
  displayTips?: InputMaybe<BooleanFilterInput>;
  homepage?: InputMaybe<HomepageFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<QuizAndTipsBlockFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<QuizAndTipsBlockFiltersInput>>>;
  quiz?: InputMaybe<QuizFiltersInput>;
  tips?: InputMaybe<TipFiltersInput>;
  titleContent?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type QuizAndTipsBlockInput = {
  audience?: InputMaybe<Scalars["ID"]>;
  displayBlock?: InputMaybe<Scalars["Boolean"]>;
  displayQuiz?: InputMaybe<Scalars["Boolean"]>;
  displayTips?: InputMaybe<Scalars["Boolean"]>;
  homepage?: InputMaybe<Scalars["ID"]>;
  quiz?: InputMaybe<Scalars["ID"]>;
  tips?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  titleContent?: InputMaybe<Scalars["String"]>;
};

export type QuizAndTipsBlockRelationResponseCollection = {
  __typename?: "QuizAndTipsBlockRelationResponseCollection";
  data: Array<QuizAndTipsBlockEntity>;
};

export type QuizEntity = {
  __typename?: "QuizEntity";
  attributes?: Maybe<Quiz>;
  id?: Maybe<Scalars["ID"]>;
};

export type QuizEntityResponse = {
  __typename?: "QuizEntityResponse";
  data?: Maybe<QuizEntity>;
};

export type QuizEntityResponseCollection = {
  __typename?: "QuizEntityResponseCollection";
  data: Array<QuizEntity>;
  meta: ResponseCollectionMeta;
};

export type QuizFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<QuizFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  customId?: InputMaybe<StringFilterInput>;
  draftCreationId?: InputMaybe<StringFilterInput>;
  hasDraft?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<QuizFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<QuizFiltersInput>>>;
  publishedDate?: InputMaybe<DateTimeFilterInput>;
  quizSubService?: InputMaybe<QuizSubServiceFiltersInput>;
  shortDescription?: InputMaybe<StringFilterInput>;
  status?: InputMaybe<StringFilterInput>;
  tags?: InputMaybe<TagFiltersInput>;
  title?: InputMaybe<StringFilterInput>;
  toBeUpdated?: InputMaybe<BooleanFilterInput>;
  unpublishedDate?: InputMaybe<DateTimeFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  versionNumber?: InputMaybe<IntFilterInput>;
};

export type QuizInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  customId?: InputMaybe<Scalars["String"]>;
  draftCreationId?: InputMaybe<Scalars["String"]>;
  hasDraft?: InputMaybe<Scalars["Boolean"]>;
  publishedDate?: InputMaybe<Scalars["DateTime"]>;
  quizSubService?: InputMaybe<Scalars["ID"]>;
  shortDescription?: InputMaybe<Scalars["String"]>;
  status?: InputMaybe<Enum_Quiz_Status>;
  tags?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  title?: InputMaybe<Scalars["String"]>;
  toBeUpdated?: InputMaybe<Scalars["Boolean"]>;
  unpublishedDate?: InputMaybe<Scalars["DateTime"]>;
  versionNumber?: InputMaybe<Scalars["Int"]>;
};

export type QuizRelationResponseCollection = {
  __typename?: "QuizRelationResponseCollection";
  data: Array<QuizEntity>;
};

export type QuizSubService = {
  __typename?: "QuizSubService";
  cities?: Maybe<CityRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  endDate?: Maybe<Scalars["Date"]>;
  isActivated: Scalars["Boolean"];
  name: Scalars["String"];
  quizzes?: Maybe<QuizRelationResponseCollection>;
  startDate?: Maybe<Scalars["Date"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type QuizSubServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QuizSubServiceQuizzesArgs = {
  filters?: InputMaybe<QuizFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type QuizSubServiceEntity = {
  __typename?: "QuizSubServiceEntity";
  attributes?: Maybe<QuizSubService>;
  id?: Maybe<Scalars["ID"]>;
};

export type QuizSubServiceEntityResponse = {
  __typename?: "QuizSubServiceEntityResponse";
  data?: Maybe<QuizSubServiceEntity>;
};

export type QuizSubServiceEntityResponseCollection = {
  __typename?: "QuizSubServiceEntityResponseCollection";
  data: Array<QuizSubServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type QuizSubServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<QuizSubServiceFiltersInput>>>;
  cities?: InputMaybe<CityFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  editorialService?: InputMaybe<EditorialServiceFiltersInput>;
  endDate?: InputMaybe<DateFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<QuizSubServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<QuizSubServiceFiltersInput>>>;
  quizzes?: InputMaybe<QuizFiltersInput>;
  startDate?: InputMaybe<DateFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type QuizSubServiceInput = {
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  description?: InputMaybe<Scalars["String"]>;
  editorialService?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  quizzes?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  startDate?: InputMaybe<Scalars["Date"]>;
};

export type QuizSubServiceRelationResponseCollection = {
  __typename?: "QuizSubServiceRelationResponseCollection";
  data: Array<QuizSubServiceEntity>;
};

export type RecyclingGuideBlock = {
  __typename?: "RecyclingGuideBlock";
  createdAt?: Maybe<Scalars["DateTime"]>;
  homepage?: Maybe<HomepageEntityResponse>;
  recyclingGuideDisplayContent: Scalars["String"];
  subtitleContent: Scalars["String"];
  tags?: Maybe<TagRelationResponseCollection>;
  titleContent: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type RecyclingGuideBlockTagsArgs = {
  filters?: InputMaybe<TagFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RecyclingGuideBlockEntity = {
  __typename?: "RecyclingGuideBlockEntity";
  attributes?: Maybe<RecyclingGuideBlock>;
  id?: Maybe<Scalars["ID"]>;
};

export type RecyclingGuideBlockEntityResponse = {
  __typename?: "RecyclingGuideBlockEntityResponse";
  data?: Maybe<RecyclingGuideBlockEntity>;
};

export type RecyclingGuideBlockEntityResponseCollection = {
  __typename?: "RecyclingGuideBlockEntityResponseCollection";
  data: Array<RecyclingGuideBlockEntity>;
  meta: ResponseCollectionMeta;
};

export type RecyclingGuideBlockFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<RecyclingGuideBlockFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  homepage?: InputMaybe<HomepageFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<RecyclingGuideBlockFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<RecyclingGuideBlockFiltersInput>>>;
  recyclingGuideDisplayContent?: InputMaybe<StringFilterInput>;
  subtitleContent?: InputMaybe<StringFilterInput>;
  tags?: InputMaybe<TagFiltersInput>;
  titleContent?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type RecyclingGuideBlockInput = {
  homepage?: InputMaybe<Scalars["ID"]>;
  recyclingGuideDisplayContent?: InputMaybe<Scalars["String"]>;
  subtitleContent?: InputMaybe<Scalars["String"]>;
  tags?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  titleContent?: InputMaybe<Scalars["String"]>;
};

export type RecyclingGuideService = {
  __typename?: "RecyclingGuideService";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  cities?: Maybe<CityRelationResponseCollection>;
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  endDate?: Maybe<Scalars["Date"]>;
  isActivated: Scalars["Boolean"];
  memoDesc?: Maybe<Scalars["String"]>;
  memoFile?: Maybe<UploadFileEntityResponse>;
  memoName: Scalars["String"];
  memoPreview?: Maybe<UploadFileEntityResponse>;
  name: Scalars["String"];
  orderExtension?: Maybe<Scalars["Boolean"]>;
  startDate?: Maybe<Scalars["Date"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  wasteFamilies?: Maybe<WasteFamilyRelationResponseCollection>;
  wasteForms?: Maybe<WasteFormRelationResponseCollection>;
};

export type RecyclingGuideServiceAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RecyclingGuideServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RecyclingGuideServiceWasteFamiliesArgs = {
  filters?: InputMaybe<WasteFamilyFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RecyclingGuideServiceWasteFormsArgs = {
  filters?: InputMaybe<WasteFormFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RecyclingGuideServiceEntity = {
  __typename?: "RecyclingGuideServiceEntity";
  attributes?: Maybe<RecyclingGuideService>;
  id?: Maybe<Scalars["ID"]>;
};

export type RecyclingGuideServiceEntityResponse = {
  __typename?: "RecyclingGuideServiceEntityResponse";
  data?: Maybe<RecyclingGuideServiceEntity>;
};

export type RecyclingGuideServiceEntityResponseCollection = {
  __typename?: "RecyclingGuideServiceEntityResponseCollection";
  data: Array<RecyclingGuideServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type RecyclingGuideServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<RecyclingGuideServiceFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  cities?: InputMaybe<CityFiltersInput>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  endDate?: InputMaybe<DateFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  memoDesc?: InputMaybe<StringFilterInput>;
  memoName?: InputMaybe<StringFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<RecyclingGuideServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<RecyclingGuideServiceFiltersInput>>>;
  orderExtension?: InputMaybe<BooleanFilterInput>;
  startDate?: InputMaybe<DateFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  wasteFamilies?: InputMaybe<WasteFamilyFiltersInput>;
  wasteForms?: InputMaybe<WasteFormFiltersInput>;
};

export type RecyclingGuideServiceInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  contract?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  memoDesc?: InputMaybe<Scalars["String"]>;
  memoFile?: InputMaybe<Scalars["ID"]>;
  memoName?: InputMaybe<Scalars["String"]>;
  memoPreview?: InputMaybe<Scalars["ID"]>;
  name?: InputMaybe<Scalars["String"]>;
  orderExtension?: InputMaybe<Scalars["Boolean"]>;
  startDate?: InputMaybe<Scalars["Date"]>;
  wasteFamilies?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  wasteForms?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type RecyclingGuideServiceRelationResponseCollection = {
  __typename?: "RecyclingGuideServiceRelationResponseCollection";
  data: Array<RecyclingGuideServiceEntity>;
};

export type Region = {
  __typename?: "Region";
  code?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
};

export type Request = {
  __typename?: "Request";
  addableBlocks?: Maybe<Array<Maybe<RequestAddableBlocksDynamicZone>>>;
  blockText?: Maybe<Scalars["String"]>;
  confirmationMessage?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  displayUserCivility?: Maybe<Scalars["Boolean"]>;
  fieldAddressLabel?: Maybe<Scalars["String"]>;
  hasAddress: Scalars["Boolean"];
  hasAppointmentSlots?: Maybe<Scalars["Boolean"]>;
  hasSeveralRequestTypes: Scalars["Boolean"];
  hasUser: Scalars["Boolean"];
  hoursBeforeReservationIsActivated?: Maybe<Scalars["Int"]>;
  isActivated?: Maybe<Scalars["Boolean"]>;
  isUserEmailMandatory?: Maybe<Scalars["Boolean"]>;
  isUserNameMandatory?: Maybe<Scalars["Boolean"]>;
  isUserPhoneMandatory?: Maybe<Scalars["Boolean"]>;
  name?: Maybe<Scalars["String"]>;
  numberOfRequiredSlots?: Maybe<Scalars["Int"]>;
  proofOfReceiptHeader?: Maybe<Scalars["String"]>;
  proofOfReceiptSubject?: Maybe<Scalars["String"]>;
  requestAggregate?: Maybe<RequestAggregateEntityResponse>;
  requestService?: Maybe<RequestServiceEntityResponse>;
  requestSlots?: Maybe<RequestSlotRelationResponseCollection>;
  requestType?: Maybe<Array<Maybe<ComponentBlocksRequestType>>>;
  sendProofOfReceipt?: Maybe<Scalars["Boolean"]>;
  slotsReservationRules?: Maybe<Scalars["JSON"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  userAllowSMSNotification?: Maybe<Scalars["Boolean"]>;
};

export type RequestRequestSlotsArgs = {
  filters?: InputMaybe<RequestSlotFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RequestRequestTypeArgs = {
  filters?: InputMaybe<ComponentBlocksRequestTypeFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RequestAddableBlocksDynamicZone =
  | ComponentBlocksAttachments
  | ComponentBlocksCheckbox
  | ComponentBlocksCommentary
  | ComponentBlocksCumbersome
  | ComponentBlocksDateChoice
  | ComponentBlocksQcm
  | ComponentBlocksQuestions
  | Error;

export type RequestAggregate = {
  __typename?: "RequestAggregate";
  createdAt?: Maybe<Scalars["DateTime"]>;
  name: Scalars["String"];
  order?: Maybe<Scalars["Int"]>;
  requestService?: Maybe<RequestServiceEntityResponse>;
  requests?: Maybe<RequestRelationResponseCollection>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type RequestAggregateRequestsArgs = {
  filters?: InputMaybe<RequestFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RequestAggregateEntity = {
  __typename?: "RequestAggregateEntity";
  attributes?: Maybe<RequestAggregate>;
  id?: Maybe<Scalars["ID"]>;
};

export type RequestAggregateEntityResponse = {
  __typename?: "RequestAggregateEntityResponse";
  data?: Maybe<RequestAggregateEntity>;
};

export type RequestAggregateEntityResponseCollection = {
  __typename?: "RequestAggregateEntityResponseCollection";
  data: Array<RequestAggregateEntity>;
  meta: ResponseCollectionMeta;
};

export type RequestAggregateFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<RequestAggregateFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<RequestAggregateFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<RequestAggregateFiltersInput>>>;
  order?: InputMaybe<IntFilterInput>;
  requestService?: InputMaybe<RequestServiceFiltersInput>;
  requests?: InputMaybe<RequestFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type RequestAggregateInput = {
  name?: InputMaybe<Scalars["String"]>;
  order?: InputMaybe<Scalars["Int"]>;
  requestService?: InputMaybe<Scalars["ID"]>;
  requests?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type RequestAggregateRelationResponseCollection = {
  __typename?: "RequestAggregateRelationResponseCollection";
  data: Array<RequestAggregateEntity>;
};

export type RequestEntity = {
  __typename?: "RequestEntity";
  attributes?: Maybe<Request>;
  id?: Maybe<Scalars["ID"]>;
};

export type RequestEntityResponse = {
  __typename?: "RequestEntityResponse";
  data?: Maybe<RequestEntity>;
};

export type RequestEntityResponseCollection = {
  __typename?: "RequestEntityResponseCollection";
  data: Array<RequestEntity>;
  meta: ResponseCollectionMeta;
};

export type RequestFile = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type RequestFileOrFolder = Files | Folders;

export type RequestFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<RequestFiltersInput>>>;
  blockText?: InputMaybe<StringFilterInput>;
  confirmationMessage?: InputMaybe<StringFilterInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  displayUserCivility?: InputMaybe<BooleanFilterInput>;
  fieldAddressLabel?: InputMaybe<StringFilterInput>;
  hasAddress?: InputMaybe<BooleanFilterInput>;
  hasAppointmentSlots?: InputMaybe<BooleanFilterInput>;
  hasSeveralRequestTypes?: InputMaybe<BooleanFilterInput>;
  hasUser?: InputMaybe<BooleanFilterInput>;
  hoursBeforeReservationIsActivated?: InputMaybe<IntFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  isUserEmailMandatory?: InputMaybe<BooleanFilterInput>;
  isUserNameMandatory?: InputMaybe<BooleanFilterInput>;
  isUserPhoneMandatory?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<RequestFiltersInput>;
  numberOfRequiredSlots?: InputMaybe<IntFilterInput>;
  or?: InputMaybe<Array<InputMaybe<RequestFiltersInput>>>;
  proofOfReceiptHeader?: InputMaybe<StringFilterInput>;
  proofOfReceiptSubject?: InputMaybe<StringFilterInput>;
  requestAggregate?: InputMaybe<RequestAggregateFiltersInput>;
  requestService?: InputMaybe<RequestServiceFiltersInput>;
  requestSlots?: InputMaybe<RequestSlotFiltersInput>;
  requestType?: InputMaybe<ComponentBlocksRequestTypeFiltersInput>;
  sendProofOfReceipt?: InputMaybe<BooleanFilterInput>;
  slotsReservationRules?: InputMaybe<JsonFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  userAllowSMSNotification?: InputMaybe<BooleanFilterInput>;
};

export type RequestFolder = {
  id?: InputMaybe<Scalars["ID"]>;
};

export type RequestFolderEntity = {
  __typename?: "RequestFolderEntity";
  id?: Maybe<Scalars["ID"]>;
  name?: Maybe<Scalars["String"]>;
  path?: Maybe<Scalars["String"]>;
  pathId?: Maybe<Scalars["ID"]>;
};

export type RequestFolders = {
  __typename?: "RequestFolders";
  id?: Maybe<Scalars["ID"]>;
  name?: Maybe<Scalars["String"]>;
  path?: Maybe<Scalars["String"]>;
  pathId?: Maybe<Scalars["String"]>;
};

export type RequestInput = {
  addableBlocks?: InputMaybe<
    Array<Scalars["RequestAddableBlocksDynamicZoneInput"]>
  >;
  blockText?: InputMaybe<Scalars["String"]>;
  confirmationMessage?: InputMaybe<Scalars["String"]>;
  description?: InputMaybe<Scalars["String"]>;
  displayUserCivility?: InputMaybe<Scalars["Boolean"]>;
  fieldAddressLabel?: InputMaybe<Scalars["String"]>;
  hasAddress?: InputMaybe<Scalars["Boolean"]>;
  hasAppointmentSlots?: InputMaybe<Scalars["Boolean"]>;
  hasSeveralRequestTypes?: InputMaybe<Scalars["Boolean"]>;
  hasUser?: InputMaybe<Scalars["Boolean"]>;
  hoursBeforeReservationIsActivated?: InputMaybe<Scalars["Int"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  isUserEmailMandatory?: InputMaybe<Scalars["Boolean"]>;
  isUserNameMandatory?: InputMaybe<Scalars["Boolean"]>;
  isUserPhoneMandatory?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  numberOfRequiredSlots?: InputMaybe<Scalars["Int"]>;
  proofOfReceiptHeader?: InputMaybe<Scalars["String"]>;
  proofOfReceiptSubject?: InputMaybe<Scalars["String"]>;
  requestAggregate?: InputMaybe<Scalars["ID"]>;
  requestService?: InputMaybe<Scalars["ID"]>;
  requestSlots?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  requestType?: InputMaybe<Array<InputMaybe<ComponentBlocksRequestTypeInput>>>;
  sendProofOfReceipt?: InputMaybe<Scalars["Boolean"]>;
  slotsReservationRules?: InputMaybe<Scalars["JSON"]>;
  userAllowSMSNotification?: InputMaybe<Scalars["Boolean"]>;
};

export type RequestRelationResponseCollection = {
  __typename?: "RequestRelationResponseCollection";
  data: Array<RequestEntity>;
};

export type RequestService = {
  __typename?: "RequestService";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  cities?: Maybe<CityRelationResponseCollection>;
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  endDate?: Maybe<Scalars["Date"]>;
  isActivated: Scalars["Boolean"];
  name: Scalars["String"];
  requestAggregates?: Maybe<RequestAggregateRelationResponseCollection>;
  requests?: Maybe<RequestRelationResponseCollection>;
  startDate?: Maybe<Scalars["Date"]>;
  tsmsApiKey?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type RequestServiceAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RequestServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RequestServiceRequestAggregatesArgs = {
  filters?: InputMaybe<RequestAggregateFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RequestServiceRequestsArgs = {
  filters?: InputMaybe<RequestFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RequestServiceEntity = {
  __typename?: "RequestServiceEntity";
  attributes?: Maybe<RequestService>;
  id?: Maybe<Scalars["ID"]>;
};

export type RequestServiceEntityResponse = {
  __typename?: "RequestServiceEntityResponse";
  data?: Maybe<RequestServiceEntity>;
};

export type RequestServiceEntityResponseCollection = {
  __typename?: "RequestServiceEntityResponseCollection";
  data: Array<RequestServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type RequestServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<RequestServiceFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  cities?: InputMaybe<CityFiltersInput>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  endDate?: InputMaybe<DateFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<RequestServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<RequestServiceFiltersInput>>>;
  requestAggregates?: InputMaybe<RequestAggregateFiltersInput>;
  requests?: InputMaybe<RequestFiltersInput>;
  startDate?: InputMaybe<DateFilterInput>;
  tsmsApiKey?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type RequestServiceInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  contract?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  requestAggregates?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  requests?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  startDate?: InputMaybe<Scalars["Date"]>;
  tsmsApiKey?: InputMaybe<Scalars["String"]>;
};

export type RequestServiceRelationResponseCollection = {
  __typename?: "RequestServiceRelationResponseCollection";
  data: Array<RequestServiceEntity>;
};

export type RequestSlot = {
  __typename?: "RequestSlot";
  createdAt?: Maybe<Scalars["DateTime"]>;
  noSlotMessage?: Maybe<Scalars["String"]>;
  requestTakeds?: Maybe<RequestTakedRelationResponseCollection>;
  sectorizations?: Maybe<SectorizationRelationResponseCollection>;
  slotMessage?: Maybe<Scalars["String"]>;
  slotType?: Maybe<Enum_Requestslot_Slottype>;
  slotsExceptions?: Maybe<Array<Maybe<ComponentBlocksRequestSlotsExceptions>>>;
  timeSlots?: Maybe<Scalars["JSON"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  yearlyPlanning?: Maybe<Scalars["JSON"]>;
};

export type RequestSlotRequestTakedsArgs = {
  filters?: InputMaybe<RequestTakedFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RequestSlotSectorizationsArgs = {
  filters?: InputMaybe<SectorizationFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RequestSlotSlotsExceptionsArgs = {
  filters?: InputMaybe<ComponentBlocksRequestSlotsExceptionsFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type RequestSlotEntity = {
  __typename?: "RequestSlotEntity";
  attributes?: Maybe<RequestSlot>;
  id?: Maybe<Scalars["ID"]>;
};

export type RequestSlotEntityResponse = {
  __typename?: "RequestSlotEntityResponse";
  data?: Maybe<RequestSlotEntity>;
};

export type RequestSlotEntityResponseCollection = {
  __typename?: "RequestSlotEntityResponseCollection";
  data: Array<RequestSlotEntity>;
  meta: ResponseCollectionMeta;
};

export type RequestSlotFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<RequestSlotFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  noSlotMessage?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<RequestSlotFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<RequestSlotFiltersInput>>>;
  requestTakeds?: InputMaybe<RequestTakedFiltersInput>;
  sectorizations?: InputMaybe<SectorizationFiltersInput>;
  slotMessage?: InputMaybe<StringFilterInput>;
  slotType?: InputMaybe<StringFilterInput>;
  slotsExceptions?: InputMaybe<ComponentBlocksRequestSlotsExceptionsFiltersInput>;
  timeSlots?: InputMaybe<JsonFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  yearlyPlanning?: InputMaybe<JsonFilterInput>;
};

export type RequestSlotInput = {
  noSlotMessage?: InputMaybe<Scalars["String"]>;
  requestTakeds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  sectorizations?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  slotMessage?: InputMaybe<Scalars["String"]>;
  slotType?: InputMaybe<Enum_Requestslot_Slottype>;
  slotsExceptions?: InputMaybe<
    Array<InputMaybe<ComponentBlocksRequestSlotsExceptionsInput>>
  >;
  timeSlots?: InputMaybe<Scalars["JSON"]>;
  yearlyPlanning?: InputMaybe<Scalars["JSON"]>;
};

export type RequestSlotRelationResponseCollection = {
  __typename?: "RequestSlotRelationResponseCollection";
  data: Array<RequestSlotEntity>;
};

export type RequestTagEntity = {
  __typename?: "RequestTagEntity";
  contractId?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["ID"]>;
  name?: Maybe<Scalars["String"]>;
};

export type RequestTaked = {
  __typename?: "RequestTaked";
  city?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  isActivated?: Maybe<Scalars["Boolean"]>;
  name: Scalars["String"];
  requestServiceId?: Maybe<Scalars["Int"]>;
  requestSlot?: Maybe<RequestSlotEntityResponse>;
  requestType?: Maybe<ComponentBlocksRequestType>;
  slotTaken?: Maybe<Scalars["JSON"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  userDataStorage?: Maybe<UserDataStorageEntityResponse>;
};

export type RequestTakedEntity = {
  __typename?: "RequestTakedEntity";
  attributes?: Maybe<RequestTaked>;
  id?: Maybe<Scalars["ID"]>;
};

export type RequestTakedEntityResponse = {
  __typename?: "RequestTakedEntityResponse";
  data?: Maybe<RequestTakedEntity>;
};

export type RequestTakedEntityResponseCollection = {
  __typename?: "RequestTakedEntityResponseCollection";
  data: Array<RequestTakedEntity>;
  meta: ResponseCollectionMeta;
};

export type RequestTakedFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<RequestTakedFiltersInput>>>;
  city?: InputMaybe<StringFilterInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<RequestTakedFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<RequestTakedFiltersInput>>>;
  requestServiceId?: InputMaybe<IntFilterInput>;
  requestSlot?: InputMaybe<RequestSlotFiltersInput>;
  requestType?: InputMaybe<ComponentBlocksRequestTypeFiltersInput>;
  slotTaken?: InputMaybe<JsonFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  userDataStorage?: InputMaybe<UserDataStorageFiltersInput>;
};

export type RequestTakedInput = {
  city?: InputMaybe<Scalars["String"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  requestServiceId?: InputMaybe<Scalars["Int"]>;
  requestSlot?: InputMaybe<Scalars["ID"]>;
  requestType?: InputMaybe<ComponentBlocksRequestTypeInput>;
  slotTaken?: InputMaybe<Scalars["JSON"]>;
  userDataStorage?: InputMaybe<Scalars["ID"]>;
};

export type RequestTakedRelationResponseCollection = {
  __typename?: "RequestTakedRelationResponseCollection";
  data: Array<RequestTakedEntity>;
};

export type RequestTakeds = {
  __typename?: "RequestTakeds";
  city?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  user?: Maybe<User>;
};

export type ResponseCollectionMeta = {
  __typename?: "ResponseCollectionMeta";
  pagination: Pagination;
};

export type Rights = {
  __typename?: "Rights";
  label?: Maybe<Scalars["String"]>;
  right?: Maybe<Crud>;
};

export type SearchEngineBlock = {
  __typename?: "SearchEngineBlock";
  createdAt?: Maybe<Scalars["DateTime"]>;
  homepage?: Maybe<HomepageEntityResponse>;
  titleContent: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type SearchEngineBlockEntity = {
  __typename?: "SearchEngineBlockEntity";
  attributes?: Maybe<SearchEngineBlock>;
  id?: Maybe<Scalars["ID"]>;
};

export type SearchEngineBlockEntityResponse = {
  __typename?: "SearchEngineBlockEntityResponse";
  data?: Maybe<SearchEngineBlockEntity>;
};

export type SearchEngineBlockEntityResponseCollection = {
  __typename?: "SearchEngineBlockEntityResponseCollection";
  data: Array<SearchEngineBlockEntity>;
  meta: ResponseCollectionMeta;
};

export type SearchEngineBlockFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<SearchEngineBlockFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  homepage?: InputMaybe<HomepageFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<SearchEngineBlockFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<SearchEngineBlockFiltersInput>>>;
  titleContent?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type SearchEngineBlockInput = {
  homepage?: InputMaybe<Scalars["ID"]>;
  titleContent?: InputMaybe<Scalars["String"]>;
};

export type SearchResult = {
  __typename?: "SearchResult";
  id: Scalars["ID"];
  name: Scalars["String"];
  typeName: Scalars["String"];
  wasteFamilyName?: Maybe<Scalars["String"]>;
};

export type SearchResultAddress = {
  __typename?: "SearchResultAddress";
  banFeaturesProperties?: Maybe<Scalars["JSON"]>;
  latitude?: Maybe<Scalars["Float"]>;
  longitude?: Maybe<Scalars["Float"]>;
  name?: Maybe<Scalars["String"]>;
};

export type Sectorization = {
  __typename?: "Sectorization";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description: Scalars["String"];
  name: Scalars["String"];
  polygonCoordinates?: Maybe<Scalars["JSON"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type SectorizationEntity = {
  __typename?: "SectorizationEntity";
  attributes?: Maybe<Sectorization>;
  id?: Maybe<Scalars["ID"]>;
};

export type SectorizationEntityResponse = {
  __typename?: "SectorizationEntityResponse";
  data?: Maybe<SectorizationEntity>;
};

export type SectorizationEntityResponseCollection = {
  __typename?: "SectorizationEntityResponseCollection";
  data: Array<SectorizationEntity>;
  meta: ResponseCollectionMeta;
};

export type SectorizationFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<SectorizationFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<SectorizationFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<SectorizationFiltersInput>>>;
  polygonCoordinates?: InputMaybe<JsonFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type SectorizationInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  description?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
  polygonCoordinates?: InputMaybe<Scalars["JSON"]>;
};

export type SectorizationRelationResponseCollection = {
  __typename?: "SectorizationRelationResponseCollection";
  data: Array<SectorizationEntity>;
};

export type Service = {
  __typename?: "Service";
  id?: Maybe<Scalars["ID"]>;
  name?: Maybe<Scalars["String"]>;
  serviceName?: Maybe<Scalars["String"]>;
};

export type ServiceActivated = {
  __typename?: "ServiceActivated";
  contractId: Scalars["ID"];
  endDate?: Maybe<Scalars["Date"]>;
  isActivated: Scalars["Boolean"];
  serviceId: Scalars["ID"];
  serviceName: Scalars["String"];
  startDate?: Maybe<Scalars["Date"]>;
};

export type ServiceInput = {
  endDate: Scalars["String"];
  name: Scalars["String"];
  startDate: Scalars["String"];
};

export enum ServiceType {
  Alert = "alert",
  ContactUs = "contactUs",
  DropOffMap = "dropOffMap",
  Event = "event",
  FreeContent = "freeContent",
  FreeContent1 = "freeContent1",
  FreeContent2 = "freeContent2",
  KeyMetrics = "keyMetrics",
  Mwc = "mwc",
  News = "news",
  PickUpDay = "pickUpDay",
  Quizz = "quizz",
  Recycling = "recycling",
  Request = "request",
  Tip = "tip",
}

export type ServicesBlock = {
  __typename?: "ServicesBlock";
  audience?: Maybe<AudienceEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  homepage?: Maybe<HomepageEntityResponse>;
  serviceLinks?: Maybe<Array<Maybe<ServicesBlockServiceLinksDynamicZone>>>;
  titleContent: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type ServicesBlockEntity = {
  __typename?: "ServicesBlockEntity";
  attributes?: Maybe<ServicesBlock>;
  id?: Maybe<Scalars["ID"]>;
};

export type ServicesBlockEntityResponse = {
  __typename?: "ServicesBlockEntityResponse";
  data?: Maybe<ServicesBlockEntity>;
};

export type ServicesBlockEntityResponseCollection = {
  __typename?: "ServicesBlockEntityResponseCollection";
  data: Array<ServicesBlockEntity>;
  meta: ResponseCollectionMeta;
};

export type ServicesBlockFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<ServicesBlockFiltersInput>>>;
  audience?: InputMaybe<AudienceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  homepage?: InputMaybe<HomepageFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<ServicesBlockFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<ServicesBlockFiltersInput>>>;
  titleContent?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type ServicesBlockInput = {
  audience?: InputMaybe<Scalars["ID"]>;
  homepage?: InputMaybe<Scalars["ID"]>;
  serviceLinks?: InputMaybe<
    Array<Scalars["ServicesBlockServiceLinksDynamicZoneInput"]>
  >;
  titleContent?: InputMaybe<Scalars["String"]>;
};

export type ServicesBlockRelationResponseCollection = {
  __typename?: "ServicesBlockRelationResponseCollection";
  data: Array<ServicesBlockEntity>;
};

export type ServicesBlockServiceLinksDynamicZone =
  | ComponentLinksAlertNotification
  | ComponentLinksContactUs
  | ComponentLinksDropOffMap
  | ComponentLinksEvents
  | ComponentLinksExternal
  | ComponentLinksFrees
  | ComponentLinksKeyMetrics
  | ComponentLinksMyWasteCounter
  | ComponentLinksNews
  | ComponentLinksPickUpDay
  | ComponentLinksQuizzes
  | ComponentLinksRecyclingGuide
  | ComponentLinksRequest
  | ComponentLinksTips
  | Error;

export type ServicesDeactivated = {
  __typename?: "ServicesDeactivated";
  contractId?: Maybe<Scalars["ID"]>;
  serviceId?: Maybe<Scalars["ID"]>;
  serviceName?: Maybe<Scalars["String"]>;
};

export enum Statuses {
  Active = "active",
  Inactive = "inactive",
  Init = "init",
  Progress = "progress",
}

export type StringFilterInput = {
  and?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  between?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  contains?: InputMaybe<Scalars["String"]>;
  containsi?: InputMaybe<Scalars["String"]>;
  endsWith?: InputMaybe<Scalars["String"]>;
  eq?: InputMaybe<Scalars["String"]>;
  eqi?: InputMaybe<Scalars["String"]>;
  gt?: InputMaybe<Scalars["String"]>;
  gte?: InputMaybe<Scalars["String"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  lt?: InputMaybe<Scalars["String"]>;
  lte?: InputMaybe<Scalars["String"]>;
  ne?: InputMaybe<Scalars["String"]>;
  not?: InputMaybe<StringFilterInput>;
  notContains?: InputMaybe<Scalars["String"]>;
  notContainsi?: InputMaybe<Scalars["String"]>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  notNull?: InputMaybe<Scalars["Boolean"]>;
  null?: InputMaybe<Scalars["Boolean"]>;
  or?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  startsWith?: InputMaybe<Scalars["String"]>;
};

export type Tag = {
  __typename?: "Tag";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  name: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type TagEntity = {
  __typename?: "TagEntity";
  attributes?: Maybe<Tag>;
  id?: Maybe<Scalars["ID"]>;
};

export type TagEntityResponse = {
  __typename?: "TagEntityResponse";
  data?: Maybe<TagEntity>;
};

export type TagEntityResponseCollection = {
  __typename?: "TagEntityResponseCollection";
  data: Array<TagEntity>;
  meta: ResponseCollectionMeta;
};

export type TagFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<TagFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<TagFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<TagFiltersInput>>>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type TagInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  name?: InputMaybe<Scalars["String"]>;
};

export type TagRelationResponseCollection = {
  __typename?: "TagRelationResponseCollection";
  data: Array<TagEntity>;
};

export type Territory = {
  __typename?: "Territory";
  cities?: Maybe<CityRelationResponseCollection>;
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  epcis?: Maybe<EpciRelationResponseCollection>;
  name?: Maybe<Scalars["String"]>;
  numberOfInhabitants?: Maybe<Scalars["Long"]>;
  territoryType?: Maybe<TerritoryTypeEntityResponse>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type TerritoryCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type TerritoryEpcisArgs = {
  filters?: InputMaybe<EpciFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type TerritoryEntity = {
  __typename?: "TerritoryEntity";
  attributes?: Maybe<Territory>;
  id?: Maybe<Scalars["ID"]>;
};

export type TerritoryEntityResponse = {
  __typename?: "TerritoryEntityResponse";
  data?: Maybe<TerritoryEntity>;
};

export type TerritoryEntityResponseCollection = {
  __typename?: "TerritoryEntityResponseCollection";
  data: Array<TerritoryEntity>;
  meta: ResponseCollectionMeta;
};

export type TerritoryFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<TerritoryFiltersInput>>>;
  cities?: InputMaybe<CityFiltersInput>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  epcis?: InputMaybe<EpciFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<TerritoryFiltersInput>;
  numberOfInhabitants?: InputMaybe<LongFilterInput>;
  or?: InputMaybe<Array<InputMaybe<TerritoryFiltersInput>>>;
  territoryType?: InputMaybe<TerritoryTypeFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type TerritoryInput = {
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  contract?: InputMaybe<Scalars["ID"]>;
  epcis?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  name?: InputMaybe<Scalars["String"]>;
  numberOfInhabitants?: InputMaybe<Scalars["Long"]>;
  territoryType?: InputMaybe<Scalars["ID"]>;
};

export type TerritoryRelationResponseCollection = {
  __typename?: "TerritoryRelationResponseCollection";
  data: Array<TerritoryEntity>;
};

export type TerritoryType = {
  __typename?: "TerritoryType";
  createdAt?: Maybe<Scalars["DateTime"]>;
  territoryType?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type TerritoryTypeEntity = {
  __typename?: "TerritoryTypeEntity";
  attributes?: Maybe<TerritoryType>;
  id?: Maybe<Scalars["ID"]>;
};

export type TerritoryTypeEntityResponse = {
  __typename?: "TerritoryTypeEntityResponse";
  data?: Maybe<TerritoryTypeEntity>;
};

export type TerritoryTypeEntityResponseCollection = {
  __typename?: "TerritoryTypeEntityResponseCollection";
  data: Array<TerritoryTypeEntity>;
  meta: ResponseCollectionMeta;
};

export type TerritoryTypeFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<TerritoryTypeFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<TerritoryTypeFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<TerritoryTypeFiltersInput>>>;
  territoryType?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type TerritoryTypeInput = {
  territoryType?: InputMaybe<Scalars["String"]>;
};

export type TimeSlotWithUser = {
  __typename?: "TimeSlotWithUser";
  date?: Maybe<Scalars["String"]>;
  dynamic?: Maybe<Scalars["String"]>;
  fixed?: Maybe<Scalars["String"]>;
  requestTakeds?: Maybe<Array<Maybe<RequestTakeds>>>;
  slot?: Maybe<Scalars["String"]>;
};

export type Tip = {
  __typename?: "Tip";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  blocks?: Maybe<Array<Maybe<TipBlocksDynamicZone>>>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  customId?: Maybe<Scalars["String"]>;
  draftCreationId?: Maybe<Scalars["String"]>;
  hasDraft?: Maybe<Scalars["Boolean"]>;
  image: UploadFileEntityResponse;
  link?: Maybe<Scalars["String"]>;
  publishedDate?: Maybe<Scalars["DateTime"]>;
  shortDescription?: Maybe<Scalars["String"]>;
  status?: Maybe<Enum_Tip_Status>;
  tags?: Maybe<TagRelationResponseCollection>;
  tipSubService?: Maybe<TipSubServiceEntityResponse>;
  title: Scalars["String"];
  titleLabel?: Maybe<Scalars["String"]>;
  toBeUpdated?: Maybe<Scalars["Boolean"]>;
  unpublishedDate?: Maybe<Scalars["DateTime"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  versionNumber?: Maybe<Scalars["Int"]>;
};

export type TipAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type TipTagsArgs = {
  filters?: InputMaybe<TagFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type TipBlocksDynamicZone =
  | ComponentBlocksFile
  | ComponentBlocksHorizontalRule
  | ComponentBlocksImage
  | ComponentBlocksServices
  | ComponentBlocksSubHeading
  | ComponentBlocksVideo
  | ComponentBlocksWysiwyg
  | Error;

export type TipEntity = {
  __typename?: "TipEntity";
  attributes?: Maybe<Tip>;
  id?: Maybe<Scalars["ID"]>;
};

export type TipEntityResponse = {
  __typename?: "TipEntityResponse";
  data?: Maybe<TipEntity>;
};

export type TipEntityResponseCollection = {
  __typename?: "TipEntityResponseCollection";
  data: Array<TipEntity>;
  meta: ResponseCollectionMeta;
};

export type TipFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<TipFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  customId?: InputMaybe<StringFilterInput>;
  draftCreationId?: InputMaybe<StringFilterInput>;
  hasDraft?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isSystem?: InputMaybe<BooleanFilterInput>;
  link?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<TipFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<TipFiltersInput>>>;
  publishedDate?: InputMaybe<DateTimeFilterInput>;
  shortDescription?: InputMaybe<StringFilterInput>;
  status?: InputMaybe<StringFilterInput>;
  tags?: InputMaybe<TagFiltersInput>;
  tipSubService?: InputMaybe<TipSubServiceFiltersInput>;
  title?: InputMaybe<StringFilterInput>;
  titleLabel?: InputMaybe<StringFilterInput>;
  toBeUpdated?: InputMaybe<BooleanFilterInput>;
  unpublishedDate?: InputMaybe<DateTimeFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  versionNumber?: InputMaybe<IntFilterInput>;
};

export type TipInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  blocks?: InputMaybe<Array<Scalars["TipBlocksDynamicZoneInput"]>>;
  customId?: InputMaybe<Scalars["String"]>;
  draftCreationId?: InputMaybe<Scalars["String"]>;
  hasDraft?: InputMaybe<Scalars["Boolean"]>;
  image?: InputMaybe<Scalars["ID"]>;
  isSystem?: InputMaybe<Scalars["Boolean"]>;
  link?: InputMaybe<Scalars["String"]>;
  publishedDate?: InputMaybe<Scalars["DateTime"]>;
  shortDescription?: InputMaybe<Scalars["String"]>;
  status?: InputMaybe<Enum_Tip_Status>;
  tags?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  tipSubService?: InputMaybe<Scalars["ID"]>;
  title?: InputMaybe<Scalars["String"]>;
  titleLabel?: InputMaybe<Scalars["String"]>;
  toBeUpdated?: InputMaybe<Scalars["Boolean"]>;
  unpublishedDate?: InputMaybe<Scalars["DateTime"]>;
  versionNumber?: InputMaybe<Scalars["Int"]>;
};

export type TipRelationResponseCollection = {
  __typename?: "TipRelationResponseCollection";
  data: Array<TipEntity>;
};

export type TipSubService = {
  __typename?: "TipSubService";
  cities?: Maybe<CityRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  editorialService?: Maybe<EditorialServiceEntityResponse>;
  endDate?: Maybe<Scalars["Date"]>;
  isActivated: Scalars["Boolean"];
  name: Scalars["String"];
  startDate?: Maybe<Scalars["Date"]>;
  tips?: Maybe<TipRelationResponseCollection>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type TipSubServiceCitiesArgs = {
  filters?: InputMaybe<CityFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type TipSubServiceTipsArgs = {
  filters?: InputMaybe<TipFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type TipSubServiceEntity = {
  __typename?: "TipSubServiceEntity";
  attributes?: Maybe<TipSubService>;
  id?: Maybe<Scalars["ID"]>;
};

export type TipSubServiceEntityResponse = {
  __typename?: "TipSubServiceEntityResponse";
  data?: Maybe<TipSubServiceEntity>;
};

export type TipSubServiceEntityResponseCollection = {
  __typename?: "TipSubServiceEntityResponseCollection";
  data: Array<TipSubServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type TipSubServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<TipSubServiceFiltersInput>>>;
  cities?: InputMaybe<CityFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  editorialService?: InputMaybe<EditorialServiceFiltersInput>;
  endDate?: InputMaybe<DateFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isActivated?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<TipSubServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<TipSubServiceFiltersInput>>>;
  startDate?: InputMaybe<DateFilterInput>;
  tips?: InputMaybe<TipFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type TipSubServiceInput = {
  cities?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  description?: InputMaybe<Scalars["String"]>;
  editorialService?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  isActivated?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  startDate?: InputMaybe<Scalars["Date"]>;
  tips?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type TipSubServiceRelationResponseCollection = {
  __typename?: "TipSubServiceRelationResponseCollection";
  data: Array<TipSubServiceEntity>;
};

export type Tips = {
  __typename?: "Tips";
  image?: Maybe<Image>;
  originalId: Scalars["ID"];
  shortDescription?: Maybe<Scalars["String"]>;
  tags?: Maybe<Array<Maybe<Tag>>>;
  title: Scalars["String"];
};

export type TopContentBlock = {
  __typename?: "TopContentBlock";
  audience?: Maybe<AudienceEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  displayBlock: Scalars["Boolean"];
  displayLastThreeContents: Scalars["Boolean"];
  hasTopContent: Scalars["Boolean"];
  homepage?: Maybe<HomepageEntityResponse>;
  titleContent: Scalars["String"];
  topContent?: Maybe<Array<Maybe<TopContentBlockTopContentDynamicZone>>>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type TopContentBlockDto = {
  __typename?: "TopContentBlockDTO";
  audienceId: Scalars["ID"];
  displayBlock: Scalars["Boolean"];
  displayLastThreeContents: Scalars["Boolean"];
  hasTopContent: Scalars["Boolean"];
  id: Scalars["ID"];
  titleContent: Scalars["String"];
  topContent?: Maybe<EditoContentDto>;
};

export type TopContentBlockEntity = {
  __typename?: "TopContentBlockEntity";
  attributes?: Maybe<TopContentBlock>;
  id?: Maybe<Scalars["ID"]>;
};

export type TopContentBlockEntityResponse = {
  __typename?: "TopContentBlockEntityResponse";
  data?: Maybe<TopContentBlockEntity>;
};

export type TopContentBlockEntityResponseCollection = {
  __typename?: "TopContentBlockEntityResponseCollection";
  data: Array<TopContentBlockEntity>;
  meta: ResponseCollectionMeta;
};

export type TopContentBlockFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<TopContentBlockFiltersInput>>>;
  audience?: InputMaybe<AudienceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  displayBlock?: InputMaybe<BooleanFilterInput>;
  displayLastThreeContents?: InputMaybe<BooleanFilterInput>;
  hasTopContent?: InputMaybe<BooleanFilterInput>;
  homepage?: InputMaybe<HomepageFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<TopContentBlockFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<TopContentBlockFiltersInput>>>;
  titleContent?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type TopContentBlockInput = {
  audience?: InputMaybe<Scalars["ID"]>;
  displayBlock?: InputMaybe<Scalars["Boolean"]>;
  displayLastThreeContents?: InputMaybe<Scalars["Boolean"]>;
  hasTopContent?: InputMaybe<Scalars["Boolean"]>;
  homepage?: InputMaybe<Scalars["ID"]>;
  titleContent?: InputMaybe<Scalars["String"]>;
  topContent?: InputMaybe<
    Array<Scalars["TopContentBlockTopContentDynamicZoneInput"]>
  >;
};

export type TopContentBlockRelationResponseCollection = {
  __typename?: "TopContentBlockRelationResponseCollection";
  data: Array<TopContentBlockEntity>;
};

export type TopContentBlockTopContentDynamicZone =
  | ComponentLinksTopContent
  | Error;

export type UploadFile = {
  __typename?: "UploadFile";
  alternativeText?: Maybe<Scalars["String"]>;
  caption?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  ext?: Maybe<Scalars["String"]>;
  formats?: Maybe<Scalars["JSON"]>;
  hash: Scalars["String"];
  height?: Maybe<Scalars["Int"]>;
  mime: Scalars["String"];
  name: Scalars["String"];
  previewUrl?: Maybe<Scalars["String"]>;
  provider: Scalars["String"];
  provider_metadata?: Maybe<Scalars["JSON"]>;
  related?: Maybe<Array<Maybe<GenericMorph>>>;
  size: Scalars["Float"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
  url: Scalars["String"];
  width?: Maybe<Scalars["Int"]>;
};

export type UploadFileEntity = {
  __typename?: "UploadFileEntity";
  attributes?: Maybe<UploadFile>;
  id?: Maybe<Scalars["ID"]>;
};

export type UploadFileEntityResponse = {
  __typename?: "UploadFileEntityResponse";
  data?: Maybe<UploadFileEntity>;
};

export type UploadFileEntityResponseCollection = {
  __typename?: "UploadFileEntityResponseCollection";
  data: Array<UploadFileEntity>;
  meta: ResponseCollectionMeta;
};

export type UploadFileFiltersInput = {
  alternativeText?: InputMaybe<StringFilterInput>;
  and?: InputMaybe<Array<InputMaybe<UploadFileFiltersInput>>>;
  caption?: InputMaybe<StringFilterInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  ext?: InputMaybe<StringFilterInput>;
  folder?: InputMaybe<UploadFolderFiltersInput>;
  folderPath?: InputMaybe<StringFilterInput>;
  formats?: InputMaybe<JsonFilterInput>;
  hash?: InputMaybe<StringFilterInput>;
  height?: InputMaybe<IntFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  mime?: InputMaybe<StringFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<UploadFileFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<UploadFileFiltersInput>>>;
  previewUrl?: InputMaybe<StringFilterInput>;
  provider?: InputMaybe<StringFilterInput>;
  provider_metadata?: InputMaybe<JsonFilterInput>;
  size?: InputMaybe<FloatFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  url?: InputMaybe<StringFilterInput>;
  width?: InputMaybe<IntFilterInput>;
};

export type UploadFileInput = {
  alternativeText?: InputMaybe<Scalars["String"]>;
  caption?: InputMaybe<Scalars["String"]>;
  ext?: InputMaybe<Scalars["String"]>;
  folder?: InputMaybe<Scalars["ID"]>;
  folderPath?: InputMaybe<Scalars["String"]>;
  formats?: InputMaybe<Scalars["JSON"]>;
  hash?: InputMaybe<Scalars["String"]>;
  height?: InputMaybe<Scalars["Int"]>;
  mime?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
  previewUrl?: InputMaybe<Scalars["String"]>;
  provider?: InputMaybe<Scalars["String"]>;
  provider_metadata?: InputMaybe<Scalars["JSON"]>;
  size?: InputMaybe<Scalars["Float"]>;
  url?: InputMaybe<Scalars["String"]>;
  width?: InputMaybe<Scalars["Int"]>;
};

export type UploadFileRelationResponseCollection = {
  __typename?: "UploadFileRelationResponseCollection";
  data: Array<UploadFileEntity>;
};

export type UploadFolder = {
  __typename?: "UploadFolder";
  children?: Maybe<UploadFolderRelationResponseCollection>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  files?: Maybe<UploadFileRelationResponseCollection>;
  name: Scalars["String"];
  parent?: Maybe<UploadFolderEntityResponse>;
  path: Scalars["String"];
  pathId: Scalars["Int"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type UploadFolderChildrenArgs = {
  filters?: InputMaybe<UploadFolderFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type UploadFolderFilesArgs = {
  filters?: InputMaybe<UploadFileFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type UploadFolderEntity = {
  __typename?: "UploadFolderEntity";
  attributes?: Maybe<UploadFolder>;
  id?: Maybe<Scalars["ID"]>;
};

export type UploadFolderEntityResponse = {
  __typename?: "UploadFolderEntityResponse";
  data?: Maybe<UploadFolderEntity>;
};

export type UploadFolderEntityResponseCollection = {
  __typename?: "UploadFolderEntityResponseCollection";
  data: Array<UploadFolderEntity>;
  meta: ResponseCollectionMeta;
};

export type UploadFolderFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<UploadFolderFiltersInput>>>;
  children?: InputMaybe<UploadFolderFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  files?: InputMaybe<UploadFileFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<UploadFolderFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<UploadFolderFiltersInput>>>;
  parent?: InputMaybe<UploadFolderFiltersInput>;
  path?: InputMaybe<StringFilterInput>;
  pathId?: InputMaybe<IntFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type UploadFolderInput = {
  children?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  files?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  name?: InputMaybe<Scalars["String"]>;
  parent?: InputMaybe<Scalars["ID"]>;
  path?: InputMaybe<Scalars["String"]>;
  pathId?: InputMaybe<Scalars["Int"]>;
};

export type UploadFolderRelationResponseCollection = {
  __typename?: "UploadFolderRelationResponseCollection";
  data: Array<UploadFolderEntity>;
};

export type UploadResult = {
  __typename?: "UploadResult";
  id: Scalars["String"];
};

export type User = {
  __typename?: "User";
  _id?: Maybe<Scalars["ID"]>;
  activationDate?: Maybe<Scalars["String"]>;
  activeCounter?: Maybe<Scalars["Boolean"]>;
  address?: Maybe<Address>;
  communication?: Maybe<Communication>;
  consents?: Maybe<Array<Maybe<Consents>>>;
  contracts?: Maybe<Array<Maybe<Scalars["Int"]>>>;
  dwellingType?: Maybe<Scalars["String"]>;
  email?: Maybe<Scalars["String"]>;
  firstName?: Maybe<Scalars["String"]>;
  firstname?: Maybe<Scalars["String"]>;
  householdSize?: Maybe<Scalars["Int"]>;
  id?: Maybe<Scalars["String"]>;
  lastName?: Maybe<Scalars["String"]>;
  lastname?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  phone?: Maybe<Scalars["String"]>;
  phoneNumber?: Maybe<Scalars["String"]>;
  role?: Maybe<Scalars["String"]>;
  surname?: Maybe<Scalars["String"]>;
  userType?: Maybe<Scalars["String"]>;
  uuid?: Maybe<Scalars["String"]>;
};

export type UserContract = {
  __typename?: "UserContract";
  channelType?: Maybe<ContractChannelType>;
  clientName?: Maybe<Scalars["String"]>;
  clientType?: Maybe<Scalars["String"]>;
  contractStatus?: Maybe<Scalars["String"]>;
  dueDate?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["ID"]>;
  isFreemium?: Maybe<Scalars["Boolean"]>;
  isNonExclusive?: Maybe<Scalars["Boolean"]>;
  isRVFrance?: Maybe<Scalars["Boolean"]>;
  logo?: Maybe<ContractLogo>;
  updatedAt?: Maybe<Scalars["String"]>;
};

export type UserDataStorage = {
  __typename?: "UserDataStorage";
  createdAt?: Maybe<Scalars["DateTime"]>;
  email: Scalars["String"];
  firstname?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  phone?: Maybe<Scalars["String"]>;
  requestTakeds?: Maybe<RequestTakedRelationResponseCollection>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type UserDataStorageRequestTakedsArgs = {
  filters?: InputMaybe<RequestTakedFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type UserDataStorageEntity = {
  __typename?: "UserDataStorageEntity";
  attributes?: Maybe<UserDataStorage>;
  id?: Maybe<Scalars["ID"]>;
};

export type UserDataStorageEntityResponse = {
  __typename?: "UserDataStorageEntityResponse";
  data?: Maybe<UserDataStorageEntity>;
};

export type UserDataStorageEntityResponseCollection = {
  __typename?: "UserDataStorageEntityResponseCollection";
  data: Array<UserDataStorageEntity>;
  meta: ResponseCollectionMeta;
};

export type UserDataStorageFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<UserDataStorageFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  email?: InputMaybe<StringFilterInput>;
  firstname?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<UserDataStorageFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<UserDataStorageFiltersInput>>>;
  phone?: InputMaybe<StringFilterInput>;
  requestTakeds?: InputMaybe<RequestTakedFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type UserDataStorageInput = {
  email?: InputMaybe<Scalars["String"]>;
  firstname?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
  phone?: InputMaybe<Scalars["String"]>;
  requestTakeds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type UsersPermissionsCreateRolePayload = {
  __typename?: "UsersPermissionsCreateRolePayload";
  ok: Scalars["Boolean"];
};

export type UsersPermissionsDeleteRolePayload = {
  __typename?: "UsersPermissionsDeleteRolePayload";
  ok: Scalars["Boolean"];
};

export type UsersPermissionsLoginInput = {
  identifier: Scalars["String"];
  password: Scalars["String"];
  provider?: Scalars["String"];
};

export type UsersPermissionsLoginPayload = {
  __typename?: "UsersPermissionsLoginPayload";
  jwt?: Maybe<Scalars["String"]>;
  user: UsersPermissionsMe;
};

export type UsersPermissionsMe = {
  __typename?: "UsersPermissionsMe";
  blocked?: Maybe<Scalars["Boolean"]>;
  confirmed?: Maybe<Scalars["Boolean"]>;
  email?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  role?: Maybe<UsersPermissionsMeRole>;
  username: Scalars["String"];
};

export type UsersPermissionsMeRole = {
  __typename?: "UsersPermissionsMeRole";
  description?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  name: Scalars["String"];
  type?: Maybe<Scalars["String"]>;
};

export type UsersPermissionsPasswordPayload = {
  __typename?: "UsersPermissionsPasswordPayload";
  ok: Scalars["Boolean"];
};

export type UsersPermissionsPermission = {
  __typename?: "UsersPermissionsPermission";
  action: Scalars["String"];
  createdAt?: Maybe<Scalars["DateTime"]>;
  role?: Maybe<UsersPermissionsRoleEntityResponse>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type UsersPermissionsPermissionEntity = {
  __typename?: "UsersPermissionsPermissionEntity";
  attributes?: Maybe<UsersPermissionsPermission>;
  id?: Maybe<Scalars["ID"]>;
};

export type UsersPermissionsPermissionFiltersInput = {
  action?: InputMaybe<StringFilterInput>;
  and?: InputMaybe<Array<InputMaybe<UsersPermissionsPermissionFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<UsersPermissionsPermissionFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<UsersPermissionsPermissionFiltersInput>>>;
  role?: InputMaybe<UsersPermissionsRoleFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type UsersPermissionsPermissionRelationResponseCollection = {
  __typename?: "UsersPermissionsPermissionRelationResponseCollection";
  data: Array<UsersPermissionsPermissionEntity>;
};

export type UsersPermissionsRegisterInput = {
  email: Scalars["String"];
  password: Scalars["String"];
  username: Scalars["String"];
};

export type UsersPermissionsRole = {
  __typename?: "UsersPermissionsRole";
  createdAt?: Maybe<Scalars["DateTime"]>;
  description?: Maybe<Scalars["String"]>;
  name: Scalars["String"];
  permissions?: Maybe<UsersPermissionsPermissionRelationResponseCollection>;
  type?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  users?: Maybe<UsersPermissionsUserRelationResponseCollection>;
};

export type UsersPermissionsRolePermissionsArgs = {
  filters?: InputMaybe<UsersPermissionsPermissionFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type UsersPermissionsRoleUsersArgs = {
  filters?: InputMaybe<UsersPermissionsUserFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type UsersPermissionsRoleEntity = {
  __typename?: "UsersPermissionsRoleEntity";
  attributes?: Maybe<UsersPermissionsRole>;
  id?: Maybe<Scalars["ID"]>;
};

export type UsersPermissionsRoleEntityResponse = {
  __typename?: "UsersPermissionsRoleEntityResponse";
  data?: Maybe<UsersPermissionsRoleEntity>;
};

export type UsersPermissionsRoleEntityResponseCollection = {
  __typename?: "UsersPermissionsRoleEntityResponseCollection";
  data: Array<UsersPermissionsRoleEntity>;
  meta: ResponseCollectionMeta;
};

export type UsersPermissionsRoleFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<UsersPermissionsRoleFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  description?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<UsersPermissionsRoleFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<UsersPermissionsRoleFiltersInput>>>;
  permissions?: InputMaybe<UsersPermissionsPermissionFiltersInput>;
  type?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  users?: InputMaybe<UsersPermissionsUserFiltersInput>;
};

export type UsersPermissionsRoleInput = {
  description?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
  permissions?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  type?: InputMaybe<Scalars["String"]>;
  users?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type UsersPermissionsUpdateRolePayload = {
  __typename?: "UsersPermissionsUpdateRolePayload";
  ok: Scalars["Boolean"];
};

export type UsersPermissionsUser = {
  __typename?: "UsersPermissionsUser";
  blocked?: Maybe<Scalars["Boolean"]>;
  confirmed?: Maybe<Scalars["Boolean"]>;
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  email: Scalars["String"];
  provider?: Maybe<Scalars["String"]>;
  role?: Maybe<UsersPermissionsRoleEntityResponse>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  username: Scalars["String"];
};

export type UsersPermissionsUserEntity = {
  __typename?: "UsersPermissionsUserEntity";
  attributes?: Maybe<UsersPermissionsUser>;
  id?: Maybe<Scalars["ID"]>;
};

export type UsersPermissionsUserEntityResponse = {
  __typename?: "UsersPermissionsUserEntityResponse";
  data?: Maybe<UsersPermissionsUserEntity>;
};

export type UsersPermissionsUserEntityResponseCollection = {
  __typename?: "UsersPermissionsUserEntityResponseCollection";
  data: Array<UsersPermissionsUserEntity>;
  meta: ResponseCollectionMeta;
};

export type UsersPermissionsUserFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<UsersPermissionsUserFiltersInput>>>;
  blocked?: InputMaybe<BooleanFilterInput>;
  confirmationToken?: InputMaybe<StringFilterInput>;
  confirmed?: InputMaybe<BooleanFilterInput>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  email?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<UsersPermissionsUserFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<UsersPermissionsUserFiltersInput>>>;
  password?: InputMaybe<StringFilterInput>;
  provider?: InputMaybe<StringFilterInput>;
  resetPasswordToken?: InputMaybe<StringFilterInput>;
  role?: InputMaybe<UsersPermissionsRoleFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  username?: InputMaybe<StringFilterInput>;
};

export type UsersPermissionsUserInput = {
  blocked?: InputMaybe<Scalars["Boolean"]>;
  confirmationToken?: InputMaybe<Scalars["String"]>;
  confirmed?: InputMaybe<Scalars["Boolean"]>;
  contract?: InputMaybe<Scalars["ID"]>;
  email?: InputMaybe<Scalars["String"]>;
  password?: InputMaybe<Scalars["String"]>;
  provider?: InputMaybe<Scalars["String"]>;
  resetPasswordToken?: InputMaybe<Scalars["String"]>;
  role?: InputMaybe<Scalars["ID"]>;
  username?: InputMaybe<Scalars["String"]>;
};

export type UsersPermissionsUserRelationResponseCollection = {
  __typename?: "UsersPermissionsUserRelationResponseCollection";
  data: Array<UsersPermissionsUserEntity>;
};

export type VersioningEntity =
  | EventEntity
  | FreeContentEntity
  | NewEntity
  | QuizEntity
  | TipEntity
  | WasteFormEntity;

export type VersioningEntityResponse = {
  __typename?: "VersioningEntityResponse";
  data?: Maybe<VersioningEntity>;
};

export type WasteFamily = {
  __typename?: "WasteFamily";
  createdAt?: Maybe<Scalars["DateTime"]>;
  familyName: Scalars["String"];
  isSystem: Scalars["Boolean"];
  recyclingGuideService?: Maybe<RecyclingGuideServiceEntityResponse>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  wasteForms?: Maybe<WasteFormRelationResponseCollection>;
};

export type WasteFamilyWasteFormsArgs = {
  filters?: InputMaybe<WasteFormFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type WasteFamilyEntity = {
  __typename?: "WasteFamilyEntity";
  attributes?: Maybe<WasteFamily>;
  id?: Maybe<Scalars["ID"]>;
};

export type WasteFamilyEntityResponse = {
  __typename?: "WasteFamilyEntityResponse";
  data?: Maybe<WasteFamilyEntity>;
};

export type WasteFamilyEntityResponseCollection = {
  __typename?: "WasteFamilyEntityResponseCollection";
  data: Array<WasteFamilyEntity>;
  meta: ResponseCollectionMeta;
};

export type WasteFamilyFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<WasteFamilyFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  familyName?: InputMaybe<StringFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isSystem?: InputMaybe<BooleanFilterInput>;
  not?: InputMaybe<WasteFamilyFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<WasteFamilyFiltersInput>>>;
  recyclingGuideService?: InputMaybe<RecyclingGuideServiceFiltersInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  wasteForms?: InputMaybe<WasteFormFiltersInput>;
};

export type WasteFamilyInput = {
  familyName?: InputMaybe<Scalars["String"]>;
  isSystem?: InputMaybe<Scalars["Boolean"]>;
  recyclingGuideService?: InputMaybe<Scalars["ID"]>;
  wasteForms?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type WasteFamilyRelationResponseCollection = {
  __typename?: "WasteFamilyRelationResponseCollection";
  data: Array<WasteFamilyEntity>;
};

export type WasteForm = {
  __typename?: "WasteForm";
  audiences?: Maybe<AudienceRelationResponseCollection>;
  contentBlock?: Maybe<Array<Maybe<WasteFormContentBlockDynamicZone>>>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  customId?: Maybe<Scalars["String"]>;
  draftCreationId?: Maybe<Scalars["String"]>;
  flow?: Maybe<FlowEntityResponse>;
  hasDraft?: Maybe<Scalars["Boolean"]>;
  isHidden?: Maybe<Scalars["Boolean"]>;
  name?: Maybe<Scalars["String"]>;
  picto?: Maybe<UploadFileEntityResponse>;
  publishedDate?: Maybe<Scalars["DateTime"]>;
  recyclingGestureText?: Maybe<Scalars["String"]>;
  recyclingGuideService?: Maybe<RecyclingGuideServiceEntityResponse>;
  status?: Maybe<Enum_Wasteform_Status>;
  tags?: Maybe<TagRelationResponseCollection>;
  toBeUpdated?: Maybe<Scalars["Boolean"]>;
  unpublishedDate?: Maybe<Scalars["DateTime"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  versionNumber?: Maybe<Scalars["Int"]>;
  wasteFamily?: Maybe<WasteFamilyEntityResponse>;
};

export type WasteFormAudiencesArgs = {
  filters?: InputMaybe<AudienceFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type WasteFormTagsArgs = {
  filters?: InputMaybe<TagFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type WasteFormContentBlockDynamicZone =
  | ComponentBlocksFile
  | ComponentBlocksHorizontalRule
  | ComponentBlocksImage
  | ComponentBlocksServices
  | ComponentBlocksSubHeading
  | ComponentBlocksVideo
  | ComponentBlocksWysiwyg
  | Error;

export type WasteFormEntity = {
  __typename?: "WasteFormEntity";
  attributes?: Maybe<WasteForm>;
  id?: Maybe<Scalars["ID"]>;
};

export type WasteFormEntityResponse = {
  __typename?: "WasteFormEntityResponse";
  data?: Maybe<WasteFormEntity>;
};

export type WasteFormEntityResponseCollection = {
  __typename?: "WasteFormEntityResponseCollection";
  data: Array<WasteFormEntity>;
  meta: ResponseCollectionMeta;
};

export type WasteFormFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<WasteFormFiltersInput>>>;
  audiences?: InputMaybe<AudienceFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  customId?: InputMaybe<StringFilterInput>;
  draftCreationId?: InputMaybe<StringFilterInput>;
  flow?: InputMaybe<FlowFiltersInput>;
  hasDraft?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  isHidden?: InputMaybe<BooleanFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<WasteFormFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<WasteFormFiltersInput>>>;
  publishedDate?: InputMaybe<DateTimeFilterInput>;
  recyclingGestureText?: InputMaybe<StringFilterInput>;
  recyclingGuideService?: InputMaybe<RecyclingGuideServiceFiltersInput>;
  status?: InputMaybe<StringFilterInput>;
  tags?: InputMaybe<TagFiltersInput>;
  toBeUpdated?: InputMaybe<BooleanFilterInput>;
  unpublishedDate?: InputMaybe<DateTimeFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  versionNumber?: InputMaybe<IntFilterInput>;
  wasteFamily?: InputMaybe<WasteFamilyFiltersInput>;
};

export type WasteFormInput = {
  audiences?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  contentBlock?: InputMaybe<
    Array<Scalars["WasteFormContentBlockDynamicZoneInput"]>
  >;
  customId?: InputMaybe<Scalars["String"]>;
  draftCreationId?: InputMaybe<Scalars["String"]>;
  flow?: InputMaybe<Scalars["ID"]>;
  hasDraft?: InputMaybe<Scalars["Boolean"]>;
  isHidden?: InputMaybe<Scalars["Boolean"]>;
  name?: InputMaybe<Scalars["String"]>;
  picto?: InputMaybe<Scalars["ID"]>;
  publishedDate?: InputMaybe<Scalars["DateTime"]>;
  recyclingGestureText?: InputMaybe<Scalars["String"]>;
  recyclingGuideService?: InputMaybe<Scalars["ID"]>;
  status?: InputMaybe<Enum_Wasteform_Status>;
  tags?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  toBeUpdated?: InputMaybe<Scalars["Boolean"]>;
  unpublishedDate?: InputMaybe<Scalars["DateTime"]>;
  versionNumber?: InputMaybe<Scalars["Int"]>;
  wasteFamily?: InputMaybe<Scalars["ID"]>;
};

export type WasteFormRelationResponseCollection = {
  __typename?: "WasteFormRelationResponseCollection";
  data: Array<WasteFormEntity>;
};

export type WelcomeMessageBlock = {
  __typename?: "WelcomeMessageBlock";
  createdAt?: Maybe<Scalars["DateTime"]>;
  homepage?: Maybe<HomepageEntityResponse>;
  showBlock: Scalars["Boolean"];
  subtitle: Scalars["String"];
  title: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type WelcomeMessageBlockEntity = {
  __typename?: "WelcomeMessageBlockEntity";
  attributes?: Maybe<WelcomeMessageBlock>;
  id?: Maybe<Scalars["ID"]>;
};

export type WelcomeMessageBlockEntityResponse = {
  __typename?: "WelcomeMessageBlockEntityResponse";
  data?: Maybe<WelcomeMessageBlockEntity>;
};

export type WelcomeMessageBlockEntityResponseCollection = {
  __typename?: "WelcomeMessageBlockEntityResponseCollection";
  data: Array<WelcomeMessageBlockEntity>;
  meta: ResponseCollectionMeta;
};

export type WelcomeMessageBlockFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<WelcomeMessageBlockFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  homepage?: InputMaybe<HomepageFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<WelcomeMessageBlockFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<WelcomeMessageBlockFiltersInput>>>;
  showBlock?: InputMaybe<BooleanFilterInput>;
  subtitle?: InputMaybe<StringFilterInput>;
  title?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
};

export type WelcomeMessageBlockInput = {
  homepage?: InputMaybe<Scalars["ID"]>;
  showBlock?: InputMaybe<Scalars["Boolean"]>;
  subtitle?: InputMaybe<Scalars["String"]>;
  title?: InputMaybe<Scalars["String"]>;
};

export type YesWeScanForm = {
  __typename?: "YesWeScanForm";
  createdAt?: Maybe<Scalars["DateTime"]>;
  displayEndingButton: Scalars["Boolean"];
  endingButtonIntroduction?: Maybe<Scalars["String"]>;
  endingButtonLabel?: Maybe<Scalars["String"]>;
  endingButtonLink?: Maybe<Scalars["String"]>;
  hasEmail: Scalars["Boolean"];
  hasTsms: Scalars["Boolean"];
  logo?: Maybe<UploadFileEntityResponse>;
  mailRecipients?: Maybe<Scalars["String"]>;
  pictureStatus: Enum_Yeswescanform_Picturestatus;
  reportButtons: Scalars["String"];
  thankYouMessage: Scalars["String"];
  updatedAt?: Maybe<Scalars["DateTime"]>;
  yesWeScanService?: Maybe<YesWeScanServiceEntityResponse>;
};

export type YesWeScanFormEntity = {
  __typename?: "YesWeScanFormEntity";
  attributes?: Maybe<YesWeScanForm>;
  id?: Maybe<Scalars["ID"]>;
};

export type YesWeScanFormEntityResponse = {
  __typename?: "YesWeScanFormEntityResponse";
  data?: Maybe<YesWeScanFormEntity>;
};

export type YesWeScanFormEntityResponseCollection = {
  __typename?: "YesWeScanFormEntityResponseCollection";
  data: Array<YesWeScanFormEntity>;
  meta: ResponseCollectionMeta;
};

export type YesWeScanFormFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<YesWeScanFormFiltersInput>>>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  displayEndingButton?: InputMaybe<BooleanFilterInput>;
  endingButtonIntroduction?: InputMaybe<StringFilterInput>;
  endingButtonLabel?: InputMaybe<StringFilterInput>;
  endingButtonLink?: InputMaybe<StringFilterInput>;
  hasEmail?: InputMaybe<BooleanFilterInput>;
  hasTsms?: InputMaybe<BooleanFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  mailRecipients?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<YesWeScanFormFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<YesWeScanFormFiltersInput>>>;
  pictureStatus?: InputMaybe<StringFilterInput>;
  reportButtons?: InputMaybe<StringFilterInput>;
  thankYouMessage?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  yesWeScanService?: InputMaybe<YesWeScanServiceFiltersInput>;
};

export type YesWeScanFormInput = {
  displayEndingButton?: InputMaybe<Scalars["Boolean"]>;
  endingButtonIntroduction?: InputMaybe<Scalars["String"]>;
  endingButtonLabel?: InputMaybe<Scalars["String"]>;
  endingButtonLink?: InputMaybe<Scalars["String"]>;
  hasEmail?: InputMaybe<Scalars["Boolean"]>;
  hasTsms?: InputMaybe<Scalars["Boolean"]>;
  logo?: InputMaybe<Scalars["ID"]>;
  mailRecipients?: InputMaybe<Scalars["String"]>;
  pictureStatus?: InputMaybe<Enum_Yeswescanform_Picturestatus>;
  reportButtons?: InputMaybe<Scalars["String"]>;
  thankYouMessage?: InputMaybe<Scalars["String"]>;
  yesWeScanService?: InputMaybe<Scalars["ID"]>;
};

export type YesWeScanQrCode = {
  __typename?: "YesWeScanQrCode";
  address?: Maybe<Scalars["String"]>;
  banFeatureProperties?: Maybe<Scalars["JSON"]>;
  city?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  dropOffMap?: Maybe<DropOffMapEntityResponse>;
  lat?: Maybe<Scalars["Float"]>;
  long?: Maybe<Scalars["Float"]>;
  name?: Maybe<Scalars["String"]>;
  qrCodeUrl?: Maybe<Scalars["String"]>;
  reportsMade?: Maybe<Scalars["JSON"]>;
  typeAssociation?: Maybe<Enum_Yeswescanqrcode_Typeassociation>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  yesWeScanService?: Maybe<YesWeScanServiceEntityResponse>;
};

export type YesWeScanQrCodeEntity = {
  __typename?: "YesWeScanQrCodeEntity";
  attributes?: Maybe<YesWeScanQrCode>;
  id?: Maybe<Scalars["ID"]>;
};

export type YesWeScanQrCodeEntityResponse = {
  __typename?: "YesWeScanQrCodeEntityResponse";
  data?: Maybe<YesWeScanQrCodeEntity>;
};

export type YesWeScanQrCodeEntityResponseCollection = {
  __typename?: "YesWeScanQrCodeEntityResponseCollection";
  data: Array<YesWeScanQrCodeEntity>;
  meta: ResponseCollectionMeta;
};

export type YesWeScanQrCodeFiltersInput = {
  address?: InputMaybe<StringFilterInput>;
  and?: InputMaybe<Array<InputMaybe<YesWeScanQrCodeFiltersInput>>>;
  banFeatureProperties?: InputMaybe<JsonFilterInput>;
  city?: InputMaybe<StringFilterInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  dropOffMap?: InputMaybe<DropOffMapFiltersInput>;
  id?: InputMaybe<IdFilterInput>;
  lat?: InputMaybe<FloatFilterInput>;
  long?: InputMaybe<FloatFilterInput>;
  name?: InputMaybe<StringFilterInput>;
  not?: InputMaybe<YesWeScanQrCodeFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<YesWeScanQrCodeFiltersInput>>>;
  qrCodeUrl?: InputMaybe<StringFilterInput>;
  reportsMade?: InputMaybe<JsonFilterInput>;
  typeAssociation?: InputMaybe<StringFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  yesWeScanService?: InputMaybe<YesWeScanServiceFiltersInput>;
};

export type YesWeScanQrCodeInput = {
  address?: InputMaybe<Scalars["String"]>;
  banFeatureProperties?: InputMaybe<Scalars["JSON"]>;
  city?: InputMaybe<Scalars["String"]>;
  dropOffMap?: InputMaybe<Scalars["ID"]>;
  lat?: InputMaybe<Scalars["Float"]>;
  long?: InputMaybe<Scalars["Float"]>;
  name?: InputMaybe<Scalars["String"]>;
  qrCodeUrl?: InputMaybe<Scalars["String"]>;
  reportsMade?: InputMaybe<Scalars["JSON"]>;
  typeAssociation?: InputMaybe<Enum_Yeswescanqrcode_Typeassociation>;
  yesWeScanService?: InputMaybe<Scalars["ID"]>;
};

export type YesWeScanQrCodeRelationResponseCollection = {
  __typename?: "YesWeScanQrCodeRelationResponseCollection";
  data: Array<YesWeScanQrCodeEntity>;
};

export type YesWeScanService = {
  __typename?: "YesWeScanService";
  contract?: Maybe<ContractEntityResponse>;
  createdAt?: Maybe<Scalars["DateTime"]>;
  endDate?: Maybe<Scalars["DateTime"]>;
  serviceName?: Maybe<Scalars["String"]>;
  shortName: Scalars["String"];
  startDate?: Maybe<Scalars["DateTime"]>;
  updatedAt?: Maybe<Scalars["DateTime"]>;
  yesWeScanForm?: Maybe<YesWeScanFormEntityResponse>;
  yesWeScanQRCodes?: Maybe<YesWeScanQrCodeRelationResponseCollection>;
};

export type YesWeScanServiceYesWeScanQrCodesArgs = {
  filters?: InputMaybe<YesWeScanQrCodeFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
};

export type YesWeScanServiceEntity = {
  __typename?: "YesWeScanServiceEntity";
  attributes?: Maybe<YesWeScanService>;
  id?: Maybe<Scalars["ID"]>;
};

export type YesWeScanServiceEntityResponse = {
  __typename?: "YesWeScanServiceEntityResponse";
  data?: Maybe<YesWeScanServiceEntity>;
};

export type YesWeScanServiceEntityResponseCollection = {
  __typename?: "YesWeScanServiceEntityResponseCollection";
  data: Array<YesWeScanServiceEntity>;
  meta: ResponseCollectionMeta;
};

export type YesWeScanServiceFiltersInput = {
  and?: InputMaybe<Array<InputMaybe<YesWeScanServiceFiltersInput>>>;
  contract?: InputMaybe<ContractFiltersInput>;
  createdAt?: InputMaybe<DateTimeFilterInput>;
  endDate?: InputMaybe<DateTimeFilterInput>;
  id?: InputMaybe<IdFilterInput>;
  not?: InputMaybe<YesWeScanServiceFiltersInput>;
  or?: InputMaybe<Array<InputMaybe<YesWeScanServiceFiltersInput>>>;
  serviceName?: InputMaybe<StringFilterInput>;
  shortName?: InputMaybe<StringFilterInput>;
  startDate?: InputMaybe<DateTimeFilterInput>;
  updatedAt?: InputMaybe<DateTimeFilterInput>;
  yesWeScanForm?: InputMaybe<YesWeScanFormFiltersInput>;
  yesWeScanQRCodes?: InputMaybe<YesWeScanQrCodeFiltersInput>;
};

export type YesWeScanServiceInput = {
  contract?: InputMaybe<Scalars["ID"]>;
  endDate?: InputMaybe<Scalars["DateTime"]>;
  serviceName?: InputMaybe<Scalars["String"]>;
  shortName?: InputMaybe<Scalars["String"]>;
  startDate?: InputMaybe<Scalars["DateTime"]>;
  yesWeScanForm?: InputMaybe<Scalars["ID"]>;
  yesWeScanQRCodes?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
};

export type YesWeScanServiceRelationResponseCollection = {
  __typename?: "YesWeScanServiceRelationResponseCollection";
  data: Array<YesWeScanServiceEntity>;
};

export type ClientName = {
  __typename?: "clientName";
  clientName?: Maybe<Scalars["String"]>;
};

export type ContractStatus = {
  __typename?: "contractStatus";
  contractId?: Maybe<Scalars["ID"]>;
};

export type Result = {
  __typename?: "result";
  elements?: Maybe<Array<Maybe<LinkedServices>>>;
  pictoUrl?: Maybe<Scalars["ID"]>;
};

export type TotalCountPerTag = {
  __typename?: "totalCountPerTag";
  count: Scalars["Int"];
  id: Scalars["ID"];
  name: Scalars["String"];
};

export type ChangeContractStatusByIdMutationVariables = Exact<{
  contractId: Scalars["ID"];
  status: Statuses;
}>;

export type ChangeContractStatusByIdMutation = {
  __typename?: "Mutation";
  changeContractStatus?: {
    __typename?: "contractStatus";
    contractId?: string | null;
  } | null;
};

export type CreateNewMutationVariables = Exact<{
  data: NewInput;
}>;

export type CreateNewMutation = {
  __typename?: "Mutation";
  createNew?: {
    __typename?: "NewEntityResponse";
    data?: {
      __typename?: "NewEntity";
      id?: string | null;
      attributes?: {
        __typename?: "New";
        customId?: string | null;
        title: string;
        shortDescription?: string | null;
        status?: Enum_New_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        newsSubService?: {
          __typename?: "NewsSubServiceEntityResponse";
          data?: {
            __typename?: "NewsSubServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            id?: string | null;
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
        image: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              ext?: string | null;
              height?: number | null;
              width?: number | null;
              createdAt?: any | null;
            } | null;
          } | null;
        };
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{ __typename?: "AudienceEntity"; id?: string | null }>;
        } | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              id: string;
              hr?: string | null;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksServices";
              id: string;
              serviceLinksData?: any | null;
            }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type DeleteNewByIdMutationVariables = Exact<{
  deleteNewId: Scalars["ID"];
}>;

export type DeleteNewByIdMutation = {
  __typename?: "Mutation";
  deleteNew?: {
    __typename?: "NewEntityResponse";
    data?: {
      __typename?: "NewEntity";
      id?: string | null;
      attributes?: {
        __typename?: "New";
        customId?: string | null;
        title: string;
        shortDescription?: string | null;
        status?: Enum_New_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        newsSubService?: {
          __typename?: "NewsSubServiceEntityResponse";
          data?: {
            __typename?: "NewsSubServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            id?: string | null;
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
        image: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              ext?: string | null;
              height?: number | null;
              width?: number | null;
              createdAt?: any | null;
            } | null;
          } | null;
        };
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              id: string;
              hr?: string | null;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksServices";
              id: string;
              serviceLinksData?: any | null;
            }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type GetAllVersionsOfNewsByCustomIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  customId?: InputMaybe<Scalars["String"]>;
  statusFilter?: InputMaybe<StringFilterInput>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
  pagination?: InputMaybe<PaginationArg>;
}>;

export type GetAllVersionsOfNewsByCustomIdQuery = {
  __typename?: "Query";
  newsCount?: {
    __typename?: "NewEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  newsCountDraft?: {
    __typename?: "NewEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  newsCountPublished?: {
    __typename?: "NewEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  newsCountArchived?: {
    __typename?: "NewEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  news?: {
    __typename?: "NewEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageSize: number;
        pageCount: number;
        total: number;
      };
    };
    data: Array<{
      __typename?: "NewEntity";
      id?: string | null;
      attributes?: {
        __typename?: "New";
        versionNumber?: number | null;
        status?: Enum_New_Status | null;
        publishedDate?: any | null;
        updatedAt?: any | null;
      } | null;
    }>;
  } | null;
};

export type GetNewByIdQueryVariables = Exact<{
  newId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetNewByIdQuery = {
  __typename?: "Query";
  new?: {
    __typename?: "NewEntityResponse";
    data?: {
      __typename?: "NewEntity";
      id?: string | null;
      attributes?: {
        __typename?: "New";
        customId?: string | null;
        draftCreationId?: string | null;
        title: string;
        shortDescription?: string | null;
        status?: Enum_New_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        newsSubService?: {
          __typename?: "NewsSubServiceEntityResponse";
          data?: {
            __typename?: "NewsSubServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            id?: string | null;
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
        image: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              ext?: string | null;
              height?: number | null;
              width?: number | null;
              createdAt?: any | null;
            } | null;
          } | null;
        };
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{
            __typename?: "AudienceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Audience";
              type: Enum_Audience_Type;
              isActive: boolean;
            } | null;
          }>;
        } | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              id: string;
              hr?: string | null;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksServices";
              id: string;
              serviceLinksData?: any | null;
            }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type GetNewsByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  statusFilter?: InputMaybe<StringFilterInput>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
  pagination?: InputMaybe<PaginationArg>;
}>;

export type GetNewsByContractIdQuery = {
  __typename?: "Query";
  newsCount?: {
    __typename?: "NewEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  newsCountDraft?: {
    __typename?: "NewEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  newsCountPublished?: {
    __typename?: "NewEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  newsCountArchived?: {
    __typename?: "NewEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  news?: {
    __typename?: "NewEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageSize: number;
        pageCount: number;
        total: number;
      };
    };
    data: Array<{
      __typename?: "NewEntity";
      id?: string | null;
      attributes?: {
        __typename?: "New";
        title: string;
        shortDescription?: string | null;
        status?: Enum_New_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
      } | null;
    }>;
  } | null;
};

export type GetNewsDraftByCustomIdQueryVariables = Exact<{
  customId: Scalars["String"];
}>;

export type GetNewsDraftByCustomIdQuery = {
  __typename?: "Query";
  news?: {
    __typename?: "NewEntityResponseCollection";
    data: Array<{ __typename?: "NewEntity"; id?: string | null }>;
  } | null;
};

export type UpdateNewByIdMutationVariables = Exact<{
  updateNewId: Scalars["ID"];
  data: Scalars["JSON"];
}>;

export type UpdateNewByIdMutation = {
  __typename?: "Mutation";
  versioningHandler?: {
    __typename?: "VersioningEntityResponse";
    data?:
      | { __typename?: "EventEntity" }
      | { __typename?: "FreeContentEntity" }
      | {
          __typename?: "NewEntity";
          id?: string | null;
          attributes?: { __typename?: "New"; customId?: string | null } | null;
        }
      | { __typename?: "QuizEntity" }
      | { __typename?: "TipEntity" }
      | { __typename?: "WasteFormEntity" }
      | null;
  } | null;
};

export type CreateTipMutationVariables = Exact<{
  data: TipInput;
}>;

export type CreateTipMutation = {
  __typename?: "Mutation";
  createTip?: {
    __typename?: "TipEntityResponse";
    data?: {
      __typename?: "TipEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Tip";
        title: string;
        shortDescription?: string | null;
        status?: Enum_Tip_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        tipSubService?: {
          __typename?: "TipSubServiceEntityResponse";
          data?: {
            __typename?: "TipSubServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            id?: string | null;
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
        image: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              ext?: string | null;
              height?: number | null;
              width?: number | null;
              createdAt?: any | null;
            } | null;
          } | null;
        };
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{ __typename?: "AudienceEntity"; id?: string | null }>;
        } | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              id: string;
              hr?: string | null;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | { __typename?: "ComponentBlocksServices" }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type DeleteTipByIdMutationVariables = Exact<{
  deleteTipId: Scalars["ID"];
}>;

export type DeleteTipByIdMutation = {
  __typename?: "Mutation";
  deleteTip?: {
    __typename?: "TipEntityResponse";
    data?: {
      __typename?: "TipEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Tip";
        title: string;
        shortDescription?: string | null;
        status?: Enum_Tip_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        tipSubService?: {
          __typename?: "TipSubServiceEntityResponse";
          data?: {
            __typename?: "TipSubServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            id?: string | null;
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
        image: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              ext?: string | null;
              height?: number | null;
              width?: number | null;
              createdAt?: any | null;
            } | null;
          } | null;
        };
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              id: string;
              hr?: string | null;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | { __typename?: "ComponentBlocksServices" }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type GetAllVersionsOfTipByCustomIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  customId?: InputMaybe<Scalars["String"]>;
  statusFilter?: InputMaybe<StringFilterInput>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
  pagination?: InputMaybe<PaginationArg>;
}>;

export type GetAllVersionsOfTipByCustomIdQuery = {
  __typename?: "Query";
  tipsCount?: {
    __typename?: "TipEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  tipsCountDraft?: {
    __typename?: "TipEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  tipsCountPublished?: {
    __typename?: "TipEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  tipsCountArchived?: {
    __typename?: "TipEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  tips?: {
    __typename?: "TipEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageSize: number;
        pageCount: number;
        total: number;
      };
    };
    data: Array<{
      __typename?: "TipEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Tip";
        versionNumber?: number | null;
        status?: Enum_Tip_Status | null;
        publishedDate?: any | null;
        updatedAt?: any | null;
      } | null;
    }>;
  } | null;
};

export type GetTipByIdQueryVariables = Exact<{
  tipId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetTipByIdQuery = {
  __typename?: "Query";
  tip?: {
    __typename?: "TipEntityResponse";
    data?: {
      __typename?: "TipEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Tip";
        customId?: string | null;
        draftCreationId?: string | null;
        title: string;
        shortDescription?: string | null;
        status?: Enum_Tip_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        tipSubService?: {
          __typename?: "TipSubServiceEntityResponse";
          data?: {
            __typename?: "TipSubServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            id?: string | null;
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
        image: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              ext?: string | null;
              height?: number | null;
              width?: number | null;
              createdAt?: any | null;
            } | null;
          } | null;
        };
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{
            __typename?: "AudienceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Audience";
              type: Enum_Audience_Type;
              isActive: boolean;
            } | null;
          }>;
        } | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              id: string;
              hr?: string | null;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksServices";
              id: string;
              serviceLinksData?: any | null;
            }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type GetTipsByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  statusFilter?: InputMaybe<StringFilterInput>;
  title?: InputMaybe<Scalars["String"]>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
  pagination?: InputMaybe<PaginationArg>;
}>;

export type GetTipsByContractIdQuery = {
  __typename?: "Query";
  tipsCount?: {
    __typename?: "TipEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  tipsCountDraft?: {
    __typename?: "TipEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  tipsCountPublished?: {
    __typename?: "TipEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  tipsCountArchived?: {
    __typename?: "TipEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  tips?: {
    __typename?: "TipEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageSize: number;
        pageCount: number;
        total: number;
      };
    };
    data: Array<{
      __typename?: "TipEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Tip";
        title: string;
        shortDescription?: string | null;
        status?: Enum_Tip_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
      } | null;
    }>;
  } | null;
};

export type GetTipsDraftByCustomIdQueryVariables = Exact<{
  customId: Scalars["String"];
}>;

export type GetTipsDraftByCustomIdQuery = {
  __typename?: "Query";
  tips?: {
    __typename?: "TipEntityResponseCollection";
    data: Array<{ __typename?: "TipEntity"; id?: string | null }>;
  } | null;
};

export type UpdateTipByIdMutationVariables = Exact<{
  updateTipId: Scalars["ID"];
  data: Scalars["JSON"];
}>;

export type UpdateTipByIdMutation = {
  __typename?: "Mutation";
  versioningHandler?: {
    __typename?: "VersioningEntityResponse";
    data?:
      | { __typename?: "EventEntity" }
      | { __typename?: "FreeContentEntity" }
      | { __typename?: "NewEntity" }
      | { __typename?: "QuizEntity" }
      | {
          __typename?: "TipEntity";
          id?: string | null;
          attributes?: { __typename?: "Tip"; customId?: string | null } | null;
        }
      | { __typename?: "WasteFormEntity" }
      | null;
  } | null;
};

export type CreateNewFolderMutationVariables = Exact<{
  name: Scalars["String"];
  parentFolderPath: Scalars["String"];
  parentFolderPathId: Scalars["ID"];
}>;

export type CreateNewFolderMutation = {
  __typename?: "Mutation";
  createNewFolder?: {
    __typename?: "RequestFolderEntity";
    id?: string | null;
    name?: string | null;
    path?: string | null;
    pathId?: string | null;
  } | null;
};

export type DeleteUnpublishedMediaByImageIdsMutationVariables = Exact<{
  imageIds?: InputMaybe<
    Array<InputMaybe<Scalars["ID"]>> | InputMaybe<Scalars["ID"]>
  >;
}>;

export type DeleteUnpublishedMediaByImageIdsMutation = {
  __typename?: "Mutation";
  deleteUnpublishedMedia?: Array<string | null> | null;
};

export type GetAllFoldersHierarchyQueryVariables = Exact<{
  path: Scalars["String"];
}>;

export type GetAllFoldersHierarchyQuery = {
  __typename?: "Query";
  getAllFoldersHierarchy?: Array<{
    __typename?: "RequestFolders";
    id?: string | null;
    name?: string | null;
    path?: string | null;
    pathId?: string | null;
  } | null> | null;
};

export type GetLibraryBreadcrumbTrailQueryVariables = Exact<{
  path: Scalars["String"];
}>;

export type GetLibraryBreadcrumbTrailQuery = {
  __typename?: "Query";
  libraryBreadcrumbTrail?: Array<{
    __typename?: "Folders";
    id?: string | null;
    name?: string | null;
    path?: string | null;
    pathId?: string | null;
  } | null> | null;
};

export type GetUploadFilesQueryVariables = Exact<{
  filters?: InputMaybe<UploadFileFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
}>;

export type GetUploadFilesQuery = {
  __typename?: "Query";
  uploadFiles?: {
    __typename?: "UploadFileEntityResponseCollection";
    data: Array<{
      __typename?: "UploadFileEntity";
      id?: string | null;
      attributes?: {
        __typename?: "UploadFile";
        name: string;
        mime: string;
        size: number;
        width?: number | null;
        height?: number | null;
        createdAt?: any | null;
        url: string;
        ext?: string | null;
        alternativeText?: string | null;
      } | null;
    }>;
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        total: number;
        pageSize: number;
        pageCount: number;
        page: number;
      };
    };
  } | null;
};

export type GetUploadFoldersQueryVariables = Exact<{
  filters?: InputMaybe<UploadFolderFiltersInput>;
}>;

export type GetUploadFoldersQuery = {
  __typename?: "Query";
  uploadFolders?: {
    __typename?: "UploadFolderEntityResponseCollection";
    data: Array<{
      __typename?: "UploadFolderEntity";
      id?: string | null;
      attributes?: {
        __typename?: "UploadFolder";
        name: string;
        pathId: number;
        path: string;
        files?: {
          __typename?: "UploadFileRelationResponseCollection";
          data: Array<{ __typename?: "UploadFileEntity"; id?: string | null }>;
        } | null;
        children?: {
          __typename?: "UploadFolderRelationResponseCollection";
          data: Array<{
            __typename?: "UploadFolderEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFolder";
              name: string;
              pathId: number;
              path: string;
              files?: {
                __typename?: "UploadFileRelationResponseCollection";
                data: Array<{
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                }>;
              } | null;
              children?: {
                __typename?: "UploadFolderRelationResponseCollection";
                data: Array<{
                  __typename?: "UploadFolderEntity";
                  id?: string | null;
                }>;
              } | null;
            } | null;
          }>;
        } | null;
      } | null;
    }>;
  } | null;
};

export type GetUploadFoldersByPathIdQueryVariables = Exact<{
  pathId: Scalars["Int"];
}>;

export type GetUploadFoldersByPathIdQuery = {
  __typename?: "Query";
  uploadFolders?: {
    __typename?: "UploadFolderEntityResponseCollection";
    data: Array<{
      __typename?: "UploadFolderEntity";
      id?: string | null;
      attributes?: {
        __typename?: "UploadFolder";
        name: string;
        pathId: number;
        path: string;
      } | null;
    }>;
  } | null;
};

export type UpdateUploadFileByIdMutationVariables = Exact<{
  updateUploadFileId: Scalars["ID"];
  data: UploadFileInput;
}>;

export type UpdateUploadFileByIdMutation = {
  __typename?: "Mutation";
  updateUploadFile?: {
    __typename?: "UploadFileEntityResponse";
    data?: {
      __typename?: "UploadFileEntity";
      id?: string | null;
      attributes?: {
        __typename?: "UploadFile";
        createdAt?: any | null;
        hash: string;
        mime: string;
        name: string;
        provider: string;
        size: number;
        url: string;
        alternativeText?: string | null;
        ext?: string | null;
        height?: number | null;
        width?: number | null;
        related?: Array<
          | { __typename?: "Accessibility" }
          | { __typename?: "AccessibilitySubService" }
          | { __typename?: "AlertNotification" }
          | { __typename?: "AlertNotificationService" }
          | { __typename?: "AlertUserStorage" }
          | { __typename?: "Audience" }
          | { __typename?: "Cgu" }
          | { __typename?: "CguSubService" }
          | { __typename?: "ChannelType" }
          | { __typename?: "City" }
          | { __typename?: "ClientContact" }
          | { __typename?: "CollectDoorToDoor" }
          | { __typename?: "CollectDropOff" }
          | { __typename?: "CollectVoluntary" }
          | { __typename?: "ComponentBlocksAttachments" }
          | { __typename?: "ComponentBlocksCheckbox" }
          | { __typename?: "ComponentBlocksCommentary" }
          | { __typename?: "ComponentBlocksCumbersome" }
          | { __typename?: "ComponentBlocksDateChoice" }
          | { __typename?: "ComponentBlocksDownloadBlock" }
          | { __typename?: "ComponentBlocksFile" }
          | { __typename?: "ComponentBlocksHorizontalRule" }
          | { __typename?: "ComponentBlocksImage" }
          | { __typename?: "ComponentBlocksOpeningDay" }
          | { __typename?: "ComponentBlocksQcm" }
          | { __typename?: "ComponentBlocksQuestions" }
          | { __typename?: "ComponentBlocksRequestSlotsExceptions" }
          | { __typename?: "ComponentBlocksRequestType" }
          | { __typename?: "ComponentBlocksServices" }
          | { __typename?: "ComponentBlocksSubHeading" }
          | { __typename?: "ComponentBlocksTest" }
          | { __typename?: "ComponentBlocksVideo" }
          | { __typename?: "ComponentBlocksWysiwyg" }
          | { __typename?: "ComponentLinksAlertNotification" }
          | { __typename?: "ComponentLinksContactUs" }
          | { __typename?: "ComponentLinksDropOffMap" }
          | { __typename?: "ComponentLinksEditoContent" }
          | { __typename?: "ComponentLinksEditorial" }
          | { __typename?: "ComponentLinksEvents" }
          | { __typename?: "ComponentLinksExternal" }
          | { __typename?: "ComponentLinksFrees" }
          | { __typename?: "ComponentLinksKeyMetrics" }
          | { __typename?: "ComponentLinksMyWasteCounter" }
          | { __typename?: "ComponentLinksNews" }
          | { __typename?: "ComponentLinksPickUpDay" }
          | { __typename?: "ComponentLinksQuizzes" }
          | { __typename?: "ComponentLinksRecyclingGuide" }
          | { __typename?: "ComponentLinksRequest" }
          | { __typename?: "ComponentLinksTips" }
          | { __typename?: "ComponentLinksTopContent" }
          | { __typename?: "Confidentiality" }
          | { __typename?: "ConfidentialitySubService" }
          | { __typename?: "ContactUs" }
          | { __typename?: "ContactUsSubService" }
          | { __typename?: "Contract" }
          | { __typename?: "ContractCustomization" }
          | { __typename?: "ContractMenu" }
          | { __typename?: "Cookie" }
          | { __typename?: "CookiesSubService" }
          | { __typename?: "DescriptionService" }
          | { __typename?: "Document" }
          | { __typename?: "DropOffMap" }
          | { __typename?: "DropOffMapService" }
          | { __typename?: "EditoBlock" }
          | { __typename?: "EditorialService" }
          | { __typename?: "Epci" }
          | { __typename?: "Event" }
          | { __typename?: "EventSubService" }
          | { __typename?: "ExportEntity" }
          | { __typename?: "Flow" }
          | { __typename?: "FlowColor" }
          | { __typename?: "Footer" }
          | { __typename?: "FreeContent" }
          | { __typename?: "FreeContentSubService" }
          | { __typename?: "Global" }
          | { __typename?: "Homepage" }
          | { __typename?: "I18NLocale" }
          | { __typename?: "InformationMessage" }
          | { __typename?: "KeyMetric" }
          | { __typename?: "KeyMetricsService" }
          | { __typename?: "MwCounterService" }
          | { __typename?: "MwcFlow" }
          | { __typename?: "New" }
          | { __typename?: "NewsSubService" }
          | { __typename?: "PickUpDay" }
          | { __typename?: "PickUpDayService" }
          | { __typename?: "Quiz" }
          | { __typename?: "QuizAndTipsBlock" }
          | { __typename?: "QuizSubService" }
          | { __typename?: "RecyclingGuideBlock" }
          | { __typename?: "RecyclingGuideService" }
          | { __typename?: "Request" }
          | { __typename?: "RequestAggregate" }
          | { __typename?: "RequestService" }
          | { __typename?: "RequestSlot" }
          | { __typename?: "RequestTaked" }
          | { __typename?: "SearchEngineBlock" }
          | { __typename?: "Sectorization" }
          | { __typename?: "ServicesBlock" }
          | { __typename?: "Tag" }
          | { __typename?: "Territory" }
          | { __typename?: "TerritoryType" }
          | { __typename?: "Tip" }
          | { __typename?: "TipSubService" }
          | { __typename?: "TopContentBlock" }
          | { __typename?: "UploadFile" }
          | {
              __typename?: "UploadFolder";
              name: string;
              path: string;
              pathId: number;
            }
          | { __typename?: "UserDataStorage" }
          | { __typename?: "UsersPermissionsPermission" }
          | { __typename?: "UsersPermissionsRole" }
          | { __typename?: "UsersPermissionsUser" }
          | { __typename?: "WasteFamily" }
          | { __typename?: "WasteForm" }
          | { __typename?: "WelcomeMessageBlock" }
          | { __typename?: "YesWeScanForm" }
          | { __typename?: "YesWeScanQrCode" }
          | { __typename?: "YesWeScanService" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateUploadFolderByIdMutationVariables = Exact<{
  updateUploadFolderId: Scalars["ID"];
  data: UploadFolderInput;
}>;

export type UpdateUploadFolderByIdMutation = {
  __typename?: "Mutation";
  updateUploadFolder?: {
    __typename?: "UploadFolderEntityResponse";
    data?: {
      __typename?: "UploadFolderEntity";
      id?: string | null;
      attributes?: {
        __typename?: "UploadFolder";
        pathId: number;
        updatedAt?: any | null;
        name: string;
        path: string;
        children?: {
          __typename?: "UploadFolderRelationResponseCollection";
          data: Array<{
            __typename?: "UploadFolderEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFolder";
              name: string;
              path: string;
              pathId: number;
              children?: {
                __typename?: "UploadFolderRelationResponseCollection";
                data: Array<{
                  __typename?: "UploadFolderEntity";
                  id?: string | null;
                }>;
              } | null;
            } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type UploadGraphQlMutationVariables = Exact<{
  refId?: InputMaybe<Scalars["ID"]>;
  ref?: InputMaybe<Scalars["String"]>;
  field?: InputMaybe<Scalars["String"]>;
  info?: InputMaybe<FileInfoInput>;
  file: Scalars["Upload"];
}>;

export type UploadGraphQlMutation = {
  __typename?: "Mutation";
  uploadGraphQL?: boolean | null;
};

export type GetCguByIdQueryVariables = Exact<{
  cguId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetCguByIdQuery = {
  __typename?: "Query";
  cgu?: {
    __typename?: "CguEntityResponse";
    data?: {
      __typename?: "CguEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Cgu";
        title: string;
        hasMobile?: boolean | null;
        isActivated?: boolean | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | { __typename?: "ComponentBlocksHorizontalRule" }
          | { __typename?: "ComponentBlocksImage" }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | { __typename?: "ComponentBlocksVideo" }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error"; code: string; message?: string | null }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type GetCguSubServicesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetCguSubServicesByContractIdQuery = {
  __typename?: "Query";
  cguSubServices?: {
    __typename?: "CguSubServiceEntityResponseCollection";
    data: Array<{
      __typename?: "CguSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "CguSubService";
        name: string;
        cgus?: {
          __typename?: "CguRelationResponseCollection";
          data: Array<{
            __typename?: "CguEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Cgu";
              title: string;
              hasMobile?: boolean | null;
              isActivated?: boolean | null;
            } | null;
          }>;
        } | null;
      } | null;
    }>;
  } | null;
};

export type UpdateCguByIdMutationVariables = Exact<{
  updateCguId: Scalars["ID"];
  data: CguInput;
}>;

export type UpdateCguByIdMutation = {
  __typename?: "Mutation";
  updateCgu?: {
    __typename?: "CguEntityResponse";
    data?: { __typename?: "CguEntity"; id?: string | null } | null;
  } | null;
};

export type GetConfidentialityByIdQueryVariables = Exact<{
  confidentialityId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetConfidentialityByIdQuery = {
  __typename?: "Query";
  confidentiality?: {
    __typename?: "ConfidentialityEntityResponse";
    data?: {
      __typename?: "ConfidentialityEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Confidentiality";
        title: string;
        hasMobile?: boolean | null;
        isActivated?: boolean | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | { __typename?: "ComponentBlocksHorizontalRule" }
          | { __typename?: "ComponentBlocksImage" }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | { __typename?: "ComponentBlocksVideo" }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error"; code: string; message?: string | null }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type GetConfidentialitySubServicesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetConfidentialitySubServicesByContractIdQuery = {
  __typename?: "Query";
  confidentialitySubServices?: {
    __typename?: "ConfidentialitySubServiceEntityResponseCollection";
    data: Array<{
      __typename?: "ConfidentialitySubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "ConfidentialitySubService";
        name: string;
        confidentialities?: {
          __typename?: "ConfidentialityRelationResponseCollection";
          data: Array<{
            __typename?: "ConfidentialityEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Confidentiality";
              title: string;
              hasMobile?: boolean | null;
              isActivated?: boolean | null;
            } | null;
          }>;
        } | null;
      } | null;
    }>;
  } | null;
};

export type UpdateConfidentialityByIdMutationVariables = Exact<{
  updateConfidentialityId: Scalars["ID"];
  data: ConfidentialityInput;
}>;

export type UpdateConfidentialityByIdMutation = {
  __typename?: "Mutation";
  updateConfidentiality?: {
    __typename?: "ConfidentialityEntityResponse";
    data?: { __typename?: "ConfidentialityEntity"; id?: string | null } | null;
  } | null;
};

export type GetContactUsByIdQueryVariables = Exact<{
  contactUsId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetContactUsByIdQuery = {
  __typename?: "Query";
  contactUs?: {
    __typename?: "ContactUsEntityResponse";
    data?: {
      __typename?: "ContactUsEntity";
      id?: string | null;
      attributes?: {
        __typename?: "ContactUs";
        title: string;
        isActivated?: boolean | null;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            id?: string | null;
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              id: string;
              hr?: string | null;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type GetContactUsSubServicesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetContactUsSubServicesByContractIdQuery = {
  __typename?: "Query";
  contactUsSubServices?: {
    __typename?: "ContactUsSubServiceEntityResponseCollection";
    data: Array<{
      __typename?: "ContactUsSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "ContactUsSubService";
        name: string;
        isActivated?: boolean | null;
        contactUses?: {
          __typename?: "ContactUsRelationResponseCollection";
          data: Array<{
            __typename?: "ContactUsEntity";
            id?: string | null;
            attributes?: {
              __typename?: "ContactUs";
              isActivated?: boolean | null;
              title: string;
            } | null;
          }>;
        } | null;
      } | null;
    }>;
  } | null;
};

export type UpdateContactUsByIdMutationVariables = Exact<{
  updateContactUsId: Scalars["ID"];
  data: ContactUsInput;
}>;

export type UpdateContactUsByIdMutation = {
  __typename?: "Mutation";
  updateContactUs?: {
    __typename?: "ContactUsEntityResponse";
    data?: { __typename?: "ContactUsEntity"; id?: string | null } | null;
  } | null;
};

export type CreateFreeContentMutationVariables = Exact<{
  data: FreeContentInput;
}>;

export type CreateFreeContentMutation = {
  __typename?: "Mutation";
  createFreeContent?: {
    __typename?: "FreeContentEntityResponse";
    data?: {
      __typename?: "FreeContentEntity";
      id?: string | null;
      attributes?: {
        __typename?: "FreeContent";
        title: string;
        shortDescription?: string | null;
        status?: Enum_Freecontent_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        freeContentSubService?: {
          __typename?: "FreeContentSubServiceEntityResponse";
          data?: {
            __typename?: "FreeContentSubServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            id?: string | null;
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
        image: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              ext?: string | null;
              height?: number | null;
              width?: number | null;
              createdAt?: any | null;
            } | null;
          } | null;
        };
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{ __typename?: "AudienceEntity"; id?: string | null }>;
        } | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              id: string;
              hr?: string | null;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | { __typename?: "ComponentBlocksServices" }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type DeleteFreeContentByIdMutationVariables = Exact<{
  deleteFreeContentId: Scalars["ID"];
}>;

export type DeleteFreeContentByIdMutation = {
  __typename?: "Mutation";
  deleteFreeContent?: {
    __typename?: "FreeContentEntityResponse";
    data?: {
      __typename?: "FreeContentEntity";
      id?: string | null;
      attributes?: {
        __typename?: "FreeContent";
        title: string;
        shortDescription?: string | null;
        status?: Enum_Freecontent_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        freeContentSubService?: {
          __typename?: "FreeContentSubServiceEntityResponse";
          data?: {
            __typename?: "FreeContentSubServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            id?: string | null;
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
        image: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              ext?: string | null;
              height?: number | null;
              width?: number | null;
              createdAt?: any | null;
            } | null;
          } | null;
        };
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              id: string;
              hr?: string | null;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    ext?: string | null;
                    height?: number | null;
                    width?: number | null;
                    createdAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | { __typename?: "ComponentBlocksServices" }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type GetAllVersionsOfFreeContentByCustomIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  customId?: InputMaybe<Scalars["String"]>;
  freeContentSubServiceId: Scalars["ID"];
  statusFilter?: InputMaybe<StringFilterInput>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
  pagination?: InputMaybe<PaginationArg>;
}>;

export type GetAllVersionsOfFreeContentByCustomIdQuery = {
  __typename?: "Query";
  freeContentsCount?: {
    __typename?: "FreeContentEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  freeContentsCountDraft?: {
    __typename?: "FreeContentEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  freeContentsCountPublished?: {
    __typename?: "FreeContentEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  freeContentsCountArchived?: {
    __typename?: "FreeContentEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  freeContents?: {
    __typename?: "FreeContentEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageSize: number;
        pageCount: number;
        total: number;
      };
    };
    data: Array<{
      __typename?: "FreeContentEntity";
      id?: string | null;
      attributes?: {
        __typename?: "FreeContent";
        versionNumber?: number | null;
        status?: Enum_Freecontent_Status | null;
        publishedDate?: any | null;
        updatedAt?: any | null;
        freeContentSubService?: {
          __typename?: "FreeContentSubServiceEntityResponse";
          data?: {
            __typename?: "FreeContentSubServiceEntity";
            attributes?: {
              __typename?: "FreeContentSubService";
              name: string;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
  } | null;
};

export type GetFreeContentByIdQueryVariables = Exact<{
  freeContentId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetFreeContentByIdQuery = {
  __typename?: "Query";
  freeContent?: {
    __typename?: "FreeContentEntityResponse";
    data?: {
      __typename?: "FreeContentEntity";
      id?: string | null;
      attributes?: {
        __typename?: "FreeContent";
        customId?: string | null;
        draftCreationId?: string | null;
        title: string;
        shortDescription?: string | null;
        status?: Enum_Freecontent_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        freeContentSubService?: {
          __typename?: "FreeContentSubServiceEntityResponse";
          data?: {
            __typename?: "FreeContentSubServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            id?: string | null;
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
        image: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              ext?: string | null;
              height?: number | null;
              width?: number | null;
              createdAt?: any | null;
            } | null;
          } | null;
        };
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{
            __typename?: "AudienceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Audience";
              type: Enum_Audience_Type;
              isActive: boolean;
            } | null;
          }>;
        } | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              id: string;
              hr?: string | null;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksServices";
              id: string;
              serviceLinksData?: any | null;
            }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type GetFreeContentSubServiceByIdQueryVariables = Exact<{
  freeContentSubServiceId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetFreeContentSubServiceByIdQuery = {
  __typename?: "Query";
  freeContentSubService?: {
    __typename?: "FreeContentSubServiceEntityResponse";
    data?: {
      __typename?: "FreeContentSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "FreeContentSubService";
        name: string;
        isActivated: boolean;
      } | null;
    } | null;
  } | null;
};

export type GetFreeContentsBySubServiceIdQueryVariables = Exact<{
  freeContentSubServiceId: Scalars["ID"];
  statusFilter?: InputMaybe<StringFilterInput>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
  pagination?: InputMaybe<PaginationArg>;
}>;

export type GetFreeContentsBySubServiceIdQuery = {
  __typename?: "Query";
  freeContentsCount?: {
    __typename?: "FreeContentEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  freeContentsCountDraft?: {
    __typename?: "FreeContentEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  freeContentsCountPublished?: {
    __typename?: "FreeContentEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  freeContentsCountArchived?: {
    __typename?: "FreeContentEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  freeContents?: {
    __typename?: "FreeContentEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageSize: number;
        pageCount: number;
        total: number;
      };
    };
    data: Array<{
      __typename?: "FreeContentEntity";
      id?: string | null;
      attributes?: {
        __typename?: "FreeContent";
        title: string;
        shortDescription?: string | null;
        status?: Enum_Freecontent_Status | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
      } | null;
    }>;
  } | null;
};

export type GetFreeContentsDraftByCustomIdQueryVariables = Exact<{
  customId: Scalars["String"];
}>;

export type GetFreeContentsDraftByCustomIdQuery = {
  __typename?: "Query";
  freeContents?: {
    __typename?: "FreeContentEntityResponseCollection";
    data: Array<{ __typename?: "FreeContentEntity"; id?: string | null }>;
  } | null;
};

export type UpdateFreeContentByIdMutationVariables = Exact<{
  updateFreeContentId: Scalars["ID"];
  data: Scalars["JSON"];
}>;

export type UpdateFreeContentByIdMutation = {
  __typename?: "Mutation";
  versioningHandler?: {
    __typename?: "VersioningEntityResponse";
    data?:
      | { __typename?: "EventEntity" }
      | {
          __typename?: "FreeContentEntity";
          id?: string | null;
          attributes?: {
            __typename?: "FreeContent";
            customId?: string | null;
          } | null;
        }
      | { __typename?: "NewEntity" }
      | { __typename?: "QuizEntity" }
      | { __typename?: "TipEntity" }
      | { __typename?: "WasteFormEntity" }
      | null;
  } | null;
};

export type GetCookieByIdQueryVariables = Exact<{
  cookieId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetCookieByIdQuery = {
  __typename?: "Query";
  cookie?: {
    __typename?: "CookieEntityResponse";
    data?: {
      __typename?: "CookieEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Cookie";
        title: string;
        hasMobile: boolean;
        isActivated?: boolean | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              id: string;
              hr?: string | null;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    name: string;
                    alternativeText?: string | null;
                    mime: string;
                    size: number;
                    url: string;
                    provider: string;
                    hash: string;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error"; code: string; message?: string | null }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type GetCookiesSubServicesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetCookiesSubServicesByContractIdQuery = {
  __typename?: "Query";
  cookiesSubServices?: {
    __typename?: "CookiesSubServiceEntityResponseCollection";
    data: Array<{
      __typename?: "CookiesSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "CookiesSubService";
        name: string;
        cookies?: {
          __typename?: "CookieRelationResponseCollection";
          data: Array<{
            __typename?: "CookieEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Cookie";
              title: string;
              hasMobile: boolean;
              isActivated?: boolean | null;
            } | null;
          }>;
        } | null;
      } | null;
    }>;
  } | null;
};

export type UpdateCookieByIdMutationVariables = Exact<{
  updateCookieId: Scalars["ID"];
  data: CookieInput;
}>;

export type UpdateCookieByIdMutation = {
  __typename?: "Mutation";
  updateCookie?: {
    __typename?: "CookieEntityResponse";
    data?: { __typename?: "CookieEntity"; id?: string | null } | null;
  } | null;
};

export type GetActivedServicesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  today: Scalars["Date"];
}>;

export type GetActivedServicesByContractIdQuery = {
  __typename?: "Query";
  editorialServices?: {
    __typename?: "EditorialServiceEntityResponseCollection";
    data: Array<{ __typename?: "EditorialServiceEntity"; id?: string | null }>;
  } | null;
  recyclingGuideServices?: {
    __typename?: "RecyclingGuideServiceEntityResponseCollection";
    data: Array<{
      __typename?: "RecyclingGuideServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "RecyclingGuideService";
        name: string;
      } | null;
    }>;
  } | null;
  requestServices?: {
    __typename?: "RequestServiceEntityResponseCollection";
    data: Array<{
      __typename?: "RequestServiceEntity";
      id?: string | null;
      attributes?: { __typename?: "RequestService"; name: string } | null;
    }>;
  } | null;
  dropOffMapServices?: {
    __typename?: "DropOffMapServiceEntityResponseCollection";
    data: Array<{
      __typename?: "DropOffMapServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "DropOffMapService";
        name?: string | null;
      } | null;
    }>;
  } | null;
  alertNotificationServices?: {
    __typename?: "AlertNotificationServiceEntityResponseCollection";
    data: Array<{
      __typename?: "AlertNotificationServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "AlertNotificationService";
        name?: string | null;
      } | null;
    }>;
  } | null;
  pickUpDayServices?: {
    __typename?: "PickUpDayServiceEntityResponseCollection";
    data: Array<{
      __typename?: "PickUpDayServiceEntity";
      id?: string | null;
      attributes?: { __typename?: "PickUpDayService"; name: string } | null;
    }>;
  } | null;
};

export type GetBlockServicesSubSelectionQueryVariables = Exact<{
  audience?: InputMaybe<Scalars["ID"]>;
  selectedService: LinkServiceType;
  serviceId: Scalars["ID"];
}>;

export type GetBlockServicesSubSelectionQuery = {
  __typename?: "Query";
  getEditoContentLinkedServices?: {
    __typename?: "result";
    elements?: Array<{
      __typename?: "LinkedServices";
      id: string;
      name: string;
      type?: string | null;
      idFreeContentSubService?: string | null;
    } | null> | null;
  } | null;
};

export type GetTagsByContractIdQueryVariables = Exact<{
  contractId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetTagsByContractIdQuery = {
  __typename?: "Query";
  tags?: {
    __typename?: "TagEntityResponseCollection";
    data: Array<{
      __typename?: "TagEntity";
      id?: string | null;
      attributes?: { __typename?: "Tag"; name: string } | null;
    }>;
  } | null;
};

export type CreateNewTagMutationVariables = Exact<{
  contractId: Scalars["ID"];
  tagName: Scalars["String"];
}>;

export type CreateNewTagMutation = {
  __typename?: "Mutation";
  createNewTag?: {
    __typename?: "RequestTagEntity";
    contractId?: string | null;
    id?: string | null;
    name?: string | null;
  } | null;
};

export type DeleteTagByIdMutationVariables = Exact<{
  deleteTagId: Scalars["ID"];
}>;

export type DeleteTagByIdMutation = {
  __typename?: "Mutation";
  deleteTag?: {
    __typename?: "TagEntityResponse";
    data?: {
      __typename?: "TagEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Tag";
        name: string;
        createdAt?: any | null;
      } | null;
    } | null;
  } | null;
};

export type GetCountContentPerTagByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetCountContentPerTagByContractIdQuery = {
  __typename?: "Query";
  countContentPerTag?: Array<{
    __typename?: "totalCountPerTag";
    id: string;
    name: string;
    count: number;
  } | null> | null;
};

export type UpdateTagByIdMutationVariables = Exact<{
  updateTagId: Scalars["ID"];
  data: TagInput;
}>;

export type UpdateTagByIdMutation = {
  __typename?: "Mutation";
  updateTag?: {
    __typename?: "TagEntityResponse";
    data?: {
      __typename?: "TagEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Tag";
        name: string;
        createdAt?: any | null;
      } | null;
    } | null;
  } | null;
};

export type CreateContentTypeForContractIdMutationVariables = Exact<{
  contractId?: InputMaybe<Scalars["ID"]>;
  name?: InputMaybe<Scalars["String"]>;
  description?: InputMaybe<Scalars["String"]>;
}>;

export type CreateContentTypeForContractIdMutation = {
  __typename?: "Mutation";
  createContentTypeForContractId?: {
    __typename?: "FreeContentSubServiceEntity";
    id?: string | null;
  } | null;
};

export type GetContentTypesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetContentTypesByContractIdQuery = {
  __typename?: "Query";
  getContentTypeDTOs?: Array<{
    __typename?: "ContentTypeDTO";
    subServiceId: string;
    type: string;
    name: string;
    description?: string | null;
  } | null> | null;
};

export type UpdateCookiesSubServiceByIdMutationVariables = Exact<{
  updateSubServiceId: Scalars["ID"];
  data: CookiesSubServiceInput;
}>;

export type UpdateCookiesSubServiceByIdMutation = {
  __typename?: "Mutation";
  updateCookiesSubService?: {
    __typename?: "CookiesSubServiceEntityResponse";
    data?: {
      __typename?: "CookiesSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "CookiesSubService";
        name: string;
        description?: string | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateAccessibilitySubServiceByIdMutationVariables = Exact<{
  updateSubServiceId: Scalars["ID"];
  data: AccessibilitySubServiceInput;
}>;

export type UpdateAccessibilitySubServiceByIdMutation = {
  __typename?: "Mutation";
  updateAccessibilitySubService?: {
    __typename?: "AccessibilitySubServiceEntityResponse";
    data?: {
      __typename?: "AccessibilitySubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "AccessibilitySubService";
        name: string;
        description?: string | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateContactUsSubServiceByIdMutationVariables = Exact<{
  updateSubServiceId: Scalars["ID"];
  data: ContactUsSubServiceInput;
}>;

export type UpdateContactUsSubServiceByIdMutation = {
  __typename?: "Mutation";
  updateContactUsSubService?: {
    __typename?: "ContactUsSubServiceEntityResponse";
    data?: {
      __typename?: "ContactUsSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "ContactUsSubService";
        name: string;
        description?: string | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateCguSubServiceByIdMutationVariables = Exact<{
  updateSubServiceId: Scalars["ID"];
  data: CguSubServiceInput;
}>;

export type UpdateCguSubServiceByIdMutation = {
  __typename?: "Mutation";
  updateCguSubService?: {
    __typename?: "CguSubServiceEntityResponse";
    data?: {
      __typename?: "CguSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "CguSubService";
        name: string;
        description?: string | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateConfidentialitySubServiceByIdMutationVariables = Exact<{
  updateSubServiceId: Scalars["ID"];
  data: ConfidentialitySubServiceInput;
}>;

export type UpdateConfidentialitySubServiceByIdMutation = {
  __typename?: "Mutation";
  updateConfidentialitySubService?: {
    __typename?: "ConfidentialitySubServiceEntityResponse";
    data?: {
      __typename?: "ConfidentialitySubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "ConfidentialitySubService";
        name: string;
        description?: string | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateNewsSubServiceByIdMutationVariables = Exact<{
  updateSubServiceId: Scalars["ID"];
  data: NewsSubServiceInput;
}>;

export type UpdateNewsSubServiceByIdMutation = {
  __typename?: "Mutation";
  updateNewsSubService?: {
    __typename?: "NewsSubServiceEntityResponse";
    data?: {
      __typename?: "NewsSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "NewsSubService";
        name: string;
        description?: string | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateTipSubServiceByIdMutationVariables = Exact<{
  updateSubServiceId: Scalars["ID"];
  data: TipSubServiceInput;
}>;

export type UpdateTipSubServiceByIdMutation = {
  __typename?: "Mutation";
  updateTipSubService?: {
    __typename?: "TipSubServiceEntityResponse";
    data?: {
      __typename?: "TipSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "TipSubService";
        name: string;
        description?: string | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateQuizSubServiceByIdMutationVariables = Exact<{
  updateSubServiceId: Scalars["ID"];
  data: QuizSubServiceInput;
}>;

export type UpdateQuizSubServiceByIdMutation = {
  __typename?: "Mutation";
  updateQuizSubService?: {
    __typename?: "QuizSubServiceEntityResponse";
    data?: {
      __typename?: "QuizSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "QuizSubService";
        name: string;
        description?: string | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateEventSubServiceByIdMutationVariables = Exact<{
  updateSubServiceId: Scalars["ID"];
  data: EventSubServiceInput;
}>;

export type UpdateEventSubServiceByIdMutation = {
  __typename?: "Mutation";
  updateEventSubService?: {
    __typename?: "EventSubServiceEntityResponse";
    data?: {
      __typename?: "EventSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "EventSubService";
        name: string;
        description?: string | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateFreeContentSubServiceByIdMutationVariables = Exact<{
  updateSubServiceId: Scalars["ID"];
  data: FreeContentSubServiceInput;
}>;

export type UpdateFreeContentSubServiceByIdMutation = {
  __typename?: "Mutation";
  updateFreeContentSubService?: {
    __typename?: "FreeContentSubServiceEntityResponse";
    data?: {
      __typename?: "FreeContentSubServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "FreeContentSubService";
        name: string;
        description?: string | null;
      } | null;
    } | null;
  } | null;
};

export type GetCollectionMethodsQueryVariables = Exact<{
  contractId?: InputMaybe<Scalars["ID"]>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
}>;

export type GetCollectionMethodsQuery = {
  __typename?: "Query";
  collectDoorToDoors?: {
    __typename?: "CollectDoorToDoorEntityResponseCollection";
    data: Array<{
      __typename?: "CollectDoorToDoorEntity";
      id?: string | null;
      attributes?: {
        __typename?: "CollectDoorToDoor";
        name?: string | null;
      } | null;
    }>;
  } | null;
  collectVoluntaries?: {
    __typename?: "CollectVoluntaryEntityResponseCollection";
    data: Array<{
      __typename?: "CollectVoluntaryEntity";
      id?: string | null;
      attributes?: {
        __typename?: "CollectVoluntary";
        name?: string | null;
      } | null;
    }>;
  } | null;
  collectDropOffs?: {
    __typename?: "CollectDropOffEntityResponseCollection";
    data: Array<{
      __typename?: "CollectDropOffEntity";
      id?: string | null;
      attributes?: {
        __typename?: "CollectDropOff";
        name?: string | null;
      } | null;
    }>;
  } | null;
};

export type GetFlowColorsQueryVariables = Exact<{
  contractId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetFlowColorsQuery = {
  __typename?: "Query";
  flowColors?: {
    __typename?: "FlowColorEntityResponseCollection";
    data: Array<{
      __typename: "FlowColorEntity";
      id?: string | null;
      attributes?: {
        __typename?: "FlowColor";
        name: string;
        hexaCode: string;
        shouldChangeHexaCode: boolean;
      } | null;
    }>;
  } | null;
};

export type GetFlowsQueryVariables = Exact<{
  filters?: InputMaybe<FlowFiltersInput>;
}>;

export type GetFlowsQuery = {
  __typename?: "Query";
  flows?: {
    __typename?: "FlowEntityResponseCollection";
    data: Array<{
      __typename?: "FlowEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Flow";
        name?: string | null;
        isActivated?: boolean | null;
        createdAt?: any | null;
        recyclingGesture: Enum_Flow_Recyclinggesture;
        code?: string | null;
        wasteForms?: {
          __typename?: "WasteFormRelationResponseCollection";
          data: Array<{
            __typename?: "WasteFormEntity";
            id?: string | null;
            attributes?: {
              __typename?: "WasteForm";
              name?: string | null;
            } | null;
          }>;
        } | null;
        color?: {
          __typename?: "FlowColorEntityResponse";
          data?: {
            __typename?: "FlowColorEntity";
            id?: string | null;
            attributes?: {
              __typename?: "FlowColor";
              hexaCode: string;
              name: string;
            } | null;
          } | null;
        } | null;
        collectVoluntaries?: {
          __typename?: "CollectVoluntaryRelationResponseCollection";
          data: Array<{
            __typename?: "CollectVoluntaryEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectVoluntary";
              name?: string | null;
            } | null;
          }>;
        } | null;
        collectDoorToDoors?: {
          __typename?: "CollectDoorToDoorRelationResponseCollection";
          data: Array<{
            __typename?: "CollectDoorToDoorEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectDoorToDoor";
              name?: string | null;
            } | null;
          }>;
        } | null;
        collectDropOffs?: {
          __typename?: "CollectDropOffRelationResponseCollection";
          data: Array<{
            __typename?: "CollectDropOffEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectDropOff";
              name?: string | null;
            } | null;
          }>;
        } | null;
      } | null;
    }>;
  } | null;
};

export type UpdateFlowByIdMutationVariables = Exact<{
  updateFlowId: Scalars["ID"];
  data: FlowInput;
}>;

export type UpdateFlowByIdMutation = {
  __typename?: "Mutation";
  updateFlow?: {
    __typename?: "FlowEntityResponse";
    data?: {
      __typename?: "FlowEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Flow";
        name?: string | null;
        isActivated?: boolean | null;
        recyclingGesture: Enum_Flow_Recyclinggesture;
        code?: string | null;
        color?: {
          __typename?: "FlowColorEntityResponse";
          data?: {
            __typename?: "FlowColorEntity";
            id?: string | null;
            attributes?: {
              __typename?: "FlowColor";
              hexaCode: string;
              name: string;
            } | null;
          } | null;
        } | null;
        collectDoorToDoors?: {
          __typename?: "CollectDoorToDoorRelationResponseCollection";
          data: Array<{
            __typename?: "CollectDoorToDoorEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectDoorToDoor";
              name?: string | null;
            } | null;
          }>;
        } | null;
        collectDropOffs?: {
          __typename?: "CollectDropOffRelationResponseCollection";
          data: Array<{
            __typename?: "CollectDropOffEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectDropOff";
              name?: string | null;
            } | null;
          }>;
        } | null;
        collectVoluntaries?: {
          __typename?: "CollectVoluntaryRelationResponseCollection";
          data: Array<{
            __typename?: "CollectVoluntaryEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectVoluntary";
              name?: string | null;
            } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type CreateClientContactMutationVariables = Exact<{
  data: ClientContactInput;
}>;

export type CreateClientContactMutation = {
  __typename?: "Mutation";
  createClientContact?: {
    __typename?: "ClientContactEntityResponse";
    data?: { __typename?: "ClientContactEntity"; id?: string | null } | null;
  } | null;
};

export type CreateEmptyContractMutationVariables = Exact<{
  clientName: Scalars["String"];
  clientType: Scalars["String"];
  siretNumber?: InputMaybe<Scalars["Long"]>;
  contactFirstName: Scalars["String"];
  contactLastName: Scalars["String"];
  contactEmail: Scalars["String"];
  contactPhoneNumber: Scalars["String"];
  isRvFrance: Scalars["Boolean"];
  isNonExclusive: Scalars["Boolean"];
  ccap?: InputMaybe<Scalars["Long"]>;
  clear?: InputMaybe<Scalars["Long"]>;
  isFreemium: Scalars["Boolean"];
  servicesToActivate: Array<InputMaybe<ServiceType>> | InputMaybe<ServiceType>;
}>;

export type CreateEmptyContractMutation = {
  __typename?: "Mutation";
  createEmptyContract?: Array<
    | {
        __typename?: "ClientContactCreateOutput";
        firstName?: string | null;
        lastName?: string | null;
        email?: string | null;
        phoneNumber?: string | null;
      }
    | {
        __typename?: "ContractCreateOutput";
        id: string;
        clientName: string;
        siret?: any | null;
        isRVFrance: boolean;
        ccap?: any | null;
        clear?: any | null;
      }
    | null
  > | null;
};

export type DeleteContractByIdMutationVariables = Exact<{
  deleteContractId: Scalars["ID"];
}>;

export type DeleteContractByIdMutation = {
  __typename?: "Mutation";
  deleteContract?: {
    __typename?: "ContractEntityResponse";
    data?: { __typename?: "ContractEntity"; id?: string | null } | null;
  } | null;
};

export type UpdateContractInformationsMutationVariables = Exact<{
  contractId: Scalars["ID"];
  contractData: ContractInput;
  clientContactId: Scalars["ID"];
  clientContactData: ClientContactInput;
}>;

export type UpdateContractInformationsMutation = {
  __typename?: "Mutation";
  updateContract?: {
    __typename?: "ContractEntityResponse";
    data?: {
      __typename?: "ContractEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Contract";
        clientName: string;
        siret?: any | null;
        contractStatus: Enum_Contract_Contractstatus;
        isNonExclusive: boolean;
        clientType: Enum_Contract_Clienttype;
        isRVFrance: boolean;
        ccap?: any | null;
        clear?: any | null;
      } | null;
    } | null;
  } | null;
  updateClientContact?: {
    __typename?: "ClientContactEntityResponse";
    data?: {
      __typename?: "ClientContactEntity";
      id?: string | null;
      attributes?: {
        __typename?: "ClientContact";
        firstName: string;
        lastName: string;
        email: string;
        phoneNumber: string;
      } | null;
    } | null;
  } | null;
};

export type CreateYwsServiceMutationVariables = Exact<{
  service: ServiceInput;
  contractId: Scalars["ID"];
}>;

export type CreateYwsServiceMutation = {
  __typename?: "Mutation";
  createYwsService?: {
    __typename?: "YesWeScanServiceEntity";
    id?: string | null;
  } | null;
};

export type DeleteYwsServiceByIdMutationVariables = Exact<{
  deleteYesWeScanServiceId: Scalars["ID"];
}>;

export type DeleteYwsServiceByIdMutation = {
  __typename?: "Mutation";
  deleteYesWeScanService?: {
    __typename?: "YesWeScanServiceEntityResponse";
    data?: { __typename?: "YesWeScanServiceEntity"; id?: string | null } | null;
  } | null;
};

export type GetChannelTypeByIdQueryVariables = Exact<{
  channelTypeId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetChannelTypeByIdQuery = {
  __typename?: "Query";
  channelType?: {
    __typename?: "ChannelTypeEntityResponse";
    data?: {
      __typename?: "ChannelTypeEntity";
      id?: string | null;
      attributes?: {
        __typename?: "ChannelType";
        hasWebApp?: boolean | null;
        hasWebSite?: boolean | null;
        hasYesWeScan?: boolean | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateServicesActivationMutationVariables = Exact<{
  serviceName: ServiceType;
  serviceId: Scalars["ID"];
  isActivated: Scalars["Boolean"];
  contractId: Scalars["ID"];
  startDate?: InputMaybe<Scalars["Date"]>;
  endDate?: InputMaybe<Scalars["Date"]>;
  isUpdated: Scalars["Boolean"];
}>;

export type UpdateServicesActivationMutation = {
  __typename?: "Mutation";
  servicesActivation?: {
    __typename?: "ServiceActivated";
    contractId: string;
    endDate?: any | null;
    isActivated: boolean;
    serviceId: string;
    serviceName: string;
    startDate?: any | null;
  } | null;
};

export type UpdateChannelTypeByIdMutationVariables = Exact<{
  updateChannelTypeId: Scalars["ID"];
  data: ChannelTypeInput;
}>;

export type UpdateChannelTypeByIdMutation = {
  __typename?: "Mutation";
  updateChannelType?: {
    __typename?: "ChannelTypeEntityResponse";
    data?: { __typename?: "ChannelTypeEntity"; id?: string | null } | null;
  } | null;
};

export type UpdateRecyclingGuideServiceByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: RecyclingGuideServiceInput;
}>;

export type UpdateRecyclingGuideServiceByIdMutation = {
  __typename?: "Mutation";
  updateRecyclingGuideService?: {
    __typename?: "RecyclingGuideServiceEntityResponse";
    data?: {
      __typename?: "RecyclingGuideServiceEntity";
      id?: string | null;
    } | null;
  } | null;
};

export type UpdatePickUpDayServiceByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: PickUpDayServiceInput;
}>;

export type UpdatePickUpDayServiceByIdMutation = {
  __typename?: "Mutation";
  updatePickUpDayService?: {
    __typename?: "PickUpDayServiceEntityResponse";
    data?: { __typename?: "PickUpDayServiceEntity"; id?: string | null } | null;
  } | null;
};

export type UpdateRequestServiceByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: RequestServiceInput;
}>;

export type UpdateRequestServiceByIdMutation = {
  __typename?: "Mutation";
  updateRequestService?: {
    __typename?: "RequestServiceEntityResponse";
    data?: { __typename?: "RequestServiceEntity"; id?: string | null } | null;
  } | null;
};

export type UpdateDropOffMapServiceByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: DropOffMapServiceInput;
}>;

export type UpdateDropOffMapServiceByIdMutation = {
  __typename?: "Mutation";
  updateDropOffMapService?: {
    __typename?: "DropOffMapServiceEntityResponse";
    data?: {
      __typename?: "DropOffMapServiceEntity";
      id?: string | null;
    } | null;
  } | null;
};

export type UpdateAlertNotificationServiceByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: AlertNotificationServiceInput;
}>;

export type UpdateAlertNotificationServiceByIdMutation = {
  __typename?: "Mutation";
  updateAlertNotificationService?: {
    __typename?: "AlertNotificationServiceEntityResponse";
    data?: {
      __typename?: "AlertNotificationServiceEntity";
      id?: string | null;
    } | null;
  } | null;
};

export type UpdateEventServiceByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: EventSubServiceInput;
}>;

export type UpdateEventServiceByIdMutation = {
  __typename?: "Mutation";
  updateEventSubService?: {
    __typename?: "EventSubServiceEntityResponse";
    data?: { __typename?: "EventSubServiceEntity"; id?: string | null } | null;
  } | null;
};

export type UpdateFreeContentServiceByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: FreeContentSubServiceInput;
}>;

export type UpdateFreeContentServiceByIdMutation = {
  __typename?: "Mutation";
  updateFreeContentSubService?: {
    __typename?: "FreeContentSubServiceEntityResponse";
    data?: {
      __typename?: "FreeContentSubServiceEntity";
      id?: string | null;
    } | null;
  } | null;
};

export type UpdateNewsServiceByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: NewsSubServiceInput;
}>;

export type UpdateNewsServiceByIdMutation = {
  __typename?: "Mutation";
  updateNewsSubService?: {
    __typename?: "NewsSubServiceEntityResponse";
    data?: { __typename?: "NewsSubServiceEntity"; id?: string | null } | null;
  } | null;
};

export type UpdateQuizServiceByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: QuizSubServiceInput;
}>;

export type UpdateQuizServiceByIdMutation = {
  __typename?: "Mutation";
  updateQuizSubService?: {
    __typename?: "QuizSubServiceEntityResponse";
    data?: { __typename?: "QuizSubServiceEntity"; id?: string | null } | null;
  } | null;
};

export type UpdateTipServiceByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: TipSubServiceInput;
}>;

export type UpdateTipServiceByIdMutation = {
  __typename?: "Mutation";
  updateTipSubService?: {
    __typename?: "TipSubServiceEntityResponse";
    data?: { __typename?: "TipSubServiceEntity"; id?: string | null } | null;
  } | null;
};

export type UpdateContactUsServiceByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: ContactUsSubServiceInput;
}>;

export type UpdateContactUsServiceByIdMutation = {
  __typename?: "Mutation";
  updateContactUsSubService?: {
    __typename?: "ContactUsSubServiceEntityResponse";
    data?: {
      __typename?: "ContactUsSubServiceEntity";
      id?: string | null;
    } | null;
  } | null;
};

export type UpdateYwsServiceByIdMutationVariables = Exact<{
  updateYesWeScanServiceId: Scalars["ID"];
  data: YesWeScanServiceInput;
}>;

export type UpdateYwsServiceByIdMutation = {
  __typename?: "Mutation";
  updateYesWeScanService?: {
    __typename?: "YesWeScanServiceEntityResponse";
    data?: { __typename?: "YesWeScanServiceEntity"; id?: string | null } | null;
  } | null;
};

export type YwsActivationMutationVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type YwsActivationMutation = {
  __typename?: "Mutation";
  ywsActivation?: {
    __typename?: "ChannelTypeEntity";
    id?: string | null;
  } | null;
};

export type YwsDeactivationMutationVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type YwsDeactivationMutation = {
  __typename?: "Mutation";
  ywsDeactivation?: {
    __typename?: "ChannelTypeEntity";
    id?: string | null;
  } | null;
};

export type CreateCityMutationVariables = Exact<{
  data: CityInput;
}>;

export type CreateCityMutation = {
  __typename?: "Mutation";
  createCity?: {
    __typename?: "CityEntityResponse";
    data?: { __typename?: "CityEntity"; id?: string | null } | null;
  } | null;
};

export type DeleteCityByIdMutationVariables = Exact<{
  cityId: Scalars["ID"];
}>;

export type DeleteCityByIdMutation = {
  __typename?: "Mutation";
  deleteCity?: {
    __typename?: "CityEntityResponse";
    data?: { __typename?: "CityEntity"; id?: string | null } | null;
  } | null;
};

export type DeleteEpciByIdMutationVariables = Exact<{
  deleteEpciId: Scalars["ID"];
}>;

export type DeleteEpciByIdMutation = {
  __typename?: "Mutation";
  deleteEpci?: {
    __typename?: "EpciEntityResponse";
    data?: { __typename?: "EpciEntity"; id?: string | null } | null;
  } | null;
};

export type GetCitiesByEpciIdQueryVariables = Exact<{
  epciId: Scalars["ID"];
}>;

export type GetCitiesByEpciIdQuery = {
  __typename?: "Query";
  cities?: {
    __typename?: "CityEntityResponseCollection";
    data: Array<{
      __typename?: "CityEntity";
      id?: string | null;
      attributes?: {
        __typename?: "City";
        department?: string | null;
        insee?: string | null;
        name?: string | null;
        postalCode?: string | null;
        region?: string | null;
        siren?: string | null;
        GeoJSON?: any | null;
      } | null;
    }>;
  } | null;
};

export type GetCitiesInformationsQueryVariables = Exact<{
  searchTerm: Scalars["String"];
}>;

export type GetCitiesInformationsQuery = {
  __typename?: "Query";
  getCitiesInformations?: Array<{
    __typename?: "CityInformation";
    name?: string | null;
    postalCode?: string | null;
    insee?: string | null;
    siren?: string | null;
    department?: {
      __typename?: "Department";
      code?: string | null;
      name?: string | null;
    } | null;
    region?: {
      __typename?: "Region";
      code?: string | null;
      name?: string | null;
    } | null;
  } | null> | null;
};

export type GetContractCitiesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
}>;

export type GetContractCitiesByContractIdQuery = {
  __typename?: "Query";
  cities?: {
    __typename?: "CityEntityResponseCollection";
    data: Array<{
      __typename?: "CityEntity";
      id?: string | null;
      attributes?: {
        __typename?: "City";
        name?: string | null;
        insee?: string | null;
        siren?: string | null;
        postalCode?: string | null;
        department?: string | null;
        region?: string | null;
      } | null;
    }>;
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        total: number;
        page: number;
        pageSize: number;
        pageCount: number;
      };
    };
  } | null;
};

export type GetEpcisInformationsQueryVariables = Exact<{
  searchTerm: Scalars["String"];
}>;

export type GetEpcisInformationsQuery = {
  __typename?: "Query";
  getEpcisInformations?: Array<{
    __typename?: "EpciInformation";
    code?: string | null;
    name?: string | null;
  } | null> | null;
};

export type GetTerritoriesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetTerritoriesByContractIdQuery = {
  __typename?: "Query";
  territories?: {
    __typename?: "TerritoryEntityResponseCollection";
    data: Array<{
      __typename?: "TerritoryEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Territory";
        numberOfInhabitants?: any | null;
        cities?: {
          __typename?: "CityRelationResponseCollection";
          data: Array<{
            __typename?: "CityEntity";
            id?: string | null;
            attributes?: {
              __typename?: "City";
              name?: string | null;
              insee?: string | null;
              department?: string | null;
              postalCode?: string | null;
              region?: string | null;
              siren?: string | null;
            } | null;
          }>;
        } | null;
        epcis?: {
          __typename?: "EpciRelationResponseCollection";
          data: Array<{
            __typename?: "EpciEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Epci";
              name?: string | null;
              siren: string;
            } | null;
          }>;
        } | null;
      } | null;
    }>;
  } | null;
};

export type ImportMunicipalitiesByContractIdMutationVariables = Exact<{
  contractId: Scalars["ID"];
  file: Scalars["String"];
}>;

export type ImportMunicipalitiesByContractIdMutation = {
  __typename?: "Mutation";
  importMunicipalities?: string | null;
};

export type ImportSirenByContractIdMutationVariables = Exact<{
  contractId: Scalars["ID"];
  file: Scalars["String"];
}>;

export type ImportSirenByContractIdMutation = {
  __typename?: "Mutation";
  importSiren?: boolean | null;
};

export type UpdateCityByIdMutationVariables = Exact<{
  cityId: Scalars["ID"];
  data: CityInput;
}>;

export type UpdateCityByIdMutation = {
  __typename?: "Mutation";
  updateCity?: {
    __typename?: "CityEntityResponse";
    data?: { __typename?: "CityEntity"; id?: string | null } | null;
  } | null;
};

export type UpdateTerritoryByIdMutationVariables = Exact<{
  updateTerritoryId: Scalars["ID"];
  data: TerritoryInput;
}>;

export type UpdateTerritoryByIdMutation = {
  __typename?: "Mutation";
  updateTerritory?: {
    __typename?: "TerritoryEntityResponse";
    data?: { __typename?: "TerritoryEntity"; id?: string | null } | null;
  } | null;
};

export type CreateBackOfficeUserQueryVariables = Exact<{
  firstName: Scalars["String"];
  lastName: Scalars["String"];
  email: Scalars["String"];
  phoneNumber: Scalars["String"];
  role: Scalars["String"];
  contract: Scalars["String"];
}>;

export type CreateBackOfficeUserQuery = {
  __typename?: "Query";
  createBackOfficeUser?: {
    __typename?: "User";
    email?: string | null;
    uuid?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    phoneNumber?: string | null;
    role?: string | null;
  } | null;
};

export type DeleteBackOfficeUserByUuidQueryVariables = Exact<{
  uuid?: InputMaybe<Scalars["String"]>;
}>;

export type DeleteBackOfficeUserByUuidQuery = {
  __typename?: "Query";
  deleteBackOfficeUser?: {
    __typename?: "User";
    id?: string | null;
    name?: string | null;
    surname?: string | null;
    phone?: string | null;
    email?: string | null;
    uuid?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    phoneNumber?: string | null;
    role?: string | null;
  } | null;
};

export type GetBackOfficeUserListByContractIdQueryVariables = Exact<{
  contractId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetBackOfficeUserListByContractIdQuery = {
  __typename?: "Query";
  getBackOfficeUserListByContractId?: Array<{
    __typename?: "User";
    uuid?: string | null;
    email?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    phoneNumber?: string | null;
    role?: string | null;
  } | null> | null;
};

export type UpdateBackOfficeUserByUuidQueryVariables = Exact<{
  uuid: Scalars["String"];
  firstName: Scalars["String"];
  lastName: Scalars["String"];
  email: Scalars["String"];
  phoneNumber: Scalars["String"];
  role: Scalars["String"];
  isRoleUpdated: Scalars["Boolean"];
  contractId: Scalars["String"];
}>;

export type UpdateBackOfficeUserByUuidQuery = {
  __typename?: "Query";
  updateBackOfficeUser?: {
    __typename?: "User";
    email?: string | null;
    uuid?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    phoneNumber?: string | null;
    role?: string | null;
  } | null;
};

export type GetActiveServicesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetActiveServicesByContractIdQuery = {
  __typename?: "Query";
  editorialServices?: {
    __typename?: "EditorialServiceEntityResponseCollection";
    data: Array<{
      __typename?: "EditorialServiceEntity";
      attributes?: {
        __typename?: "EditorialService";
        eventSubService?: {
          __typename?: "EventSubServiceEntityResponse";
          data?: {
            __typename?: "EventSubServiceEntity";
            attributes?: {
              __typename?: "EventSubService";
              isActivated: boolean;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          } | null;
        } | null;
        newsSubService?: {
          __typename?: "NewsSubServiceEntityResponse";
          data?: {
            __typename?: "NewsSubServiceEntity";
            attributes?: {
              __typename?: "NewsSubService";
              isActivated: boolean;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          } | null;
        } | null;
        quizSubService?: {
          __typename?: "QuizSubServiceEntityResponse";
          data?: {
            __typename?: "QuizSubServiceEntity";
            attributes?: {
              __typename?: "QuizSubService";
              isActivated: boolean;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          } | null;
        } | null;
        tipSubService?: {
          __typename?: "TipSubServiceEntityResponse";
          data?: {
            __typename?: "TipSubServiceEntity";
            attributes?: {
              __typename?: "TipSubService";
              isActivated: boolean;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          } | null;
        } | null;
        freeContentSubServices?: {
          __typename?: "FreeContentSubServiceRelationResponseCollection";
          data: Array<{
            __typename?: "FreeContentSubServiceEntity";
            attributes?: {
              __typename?: "FreeContentSubService";
              isActivated: boolean;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          }>;
        } | null;
        contactUsSubService?: {
          __typename?: "ContactUsSubServiceEntityResponse";
          data?: {
            __typename?: "ContactUsSubServiceEntity";
            attributes?: {
              __typename?: "ContactUsSubService";
              isActivated?: boolean | null;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
  } | null;
  recyclingGuideServices?: {
    __typename?: "RecyclingGuideServiceEntityResponseCollection";
    data: Array<{
      __typename?: "RecyclingGuideServiceEntity";
      attributes?: {
        __typename?: "RecyclingGuideService";
        isActivated: boolean;
        startDate?: any | null;
        endDate?: any | null;
      } | null;
    }>;
  } | null;
  requestServices?: {
    __typename?: "RequestServiceEntityResponseCollection";
    data: Array<{
      __typename?: "RequestServiceEntity";
      attributes?: {
        __typename?: "RequestService";
        isActivated: boolean;
        startDate?: any | null;
        endDate?: any | null;
      } | null;
    }>;
  } | null;
};

export type GetAddressCoordinatesQueryVariables = Exact<{
  searchTerm: Scalars["String"];
  housenumber?: InputMaybe<Scalars["Boolean"]>;
}>;

export type GetAddressCoordinatesQuery = {
  __typename?: "Query";
  getAddressCoordinates?: Array<{
    __typename?: "SearchResultAddress";
    name?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    banFeaturesProperties?: any | null;
  } | null> | null;
};

export type GetContractByIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetContractByIdQuery = {
  __typename?: "Query";
  contract?: {
    __typename?: "ContractEntityResponse";
    data?: {
      __typename?: "ContractEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Contract";
        clientName: string;
        clientType: Enum_Contract_Clienttype;
        contractStatus: Enum_Contract_Contractstatus;
        siret?: any | null;
        mwcSiren?: string | null;
        clear?: any | null;
        ccap?: any | null;
        isNonExclusive: boolean;
        isRVFrance: boolean;
        isFreemium: boolean;
        pathId?: any | null;
        idPianoAnalytics?: string | null;
        logo: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
            } | null;
          } | null;
        };
        channelType?: {
          __typename?: "ChannelTypeEntityResponse";
          data?: {
            __typename?: "ChannelTypeEntity";
            id?: string | null;
            attributes?: {
              __typename?: "ChannelType";
              hasWebApp?: boolean | null;
              hasWebSite?: boolean | null;
              hasYesWeScan?: boolean | null;
            } | null;
          } | null;
        } | null;
        clientContact?: {
          __typename?: "ClientContactEntityResponse";
          data?: {
            __typename?: "ClientContactEntity";
            id?: string | null;
            attributes?: {
              __typename?: "ClientContact";
              firstName: string;
              lastName: string;
              email: string;
              phoneNumber: string;
            } | null;
          } | null;
        } | null;
        contractCustomization?: {
          __typename?: "ContractCustomizationEntityResponse";
          data?: {
            __typename?: "ContractCustomizationEntity";
            id?: string | null;
            attributes?: {
              __typename?: "ContractCustomization";
              primaryColor: string;
              secondaryColor?: string | null;
              textContrast: string;
            } | null;
          } | null;
        } | null;
        editorialService?: {
          __typename?: "EditorialServiceEntityResponse";
          data?: {
            __typename?: "EditorialServiceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "EditorialService";
              eventSubService?: {
                __typename?: "EventSubServiceEntityResponse";
                data?: {
                  __typename?: "EventSubServiceEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "EventSubService";
                    name: string;
                    isActivated: boolean;
                    startDate?: any | null;
                    endDate?: any | null;
                  } | null;
                } | null;
              } | null;
              freeContentSubServices?: {
                __typename?: "FreeContentSubServiceRelationResponseCollection";
                data: Array<{
                  __typename?: "FreeContentSubServiceEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "FreeContentSubService";
                    name: string;
                    isActivated: boolean;
                    startDate?: any | null;
                    endDate?: any | null;
                  } | null;
                }>;
              } | null;
              newsSubService?: {
                __typename?: "NewsSubServiceEntityResponse";
                data?: {
                  __typename?: "NewsSubServiceEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "NewsSubService";
                    name: string;
                    isActivated: boolean;
                    startDate?: any | null;
                    endDate?: any | null;
                  } | null;
                } | null;
              } | null;
              quizSubService?: {
                __typename?: "QuizSubServiceEntityResponse";
                data?: {
                  __typename?: "QuizSubServiceEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "QuizSubService";
                    name: string;
                    isActivated: boolean;
                    startDate?: any | null;
                    endDate?: any | null;
                  } | null;
                } | null;
              } | null;
              tipSubService?: {
                __typename?: "TipSubServiceEntityResponse";
                data?: {
                  __typename?: "TipSubServiceEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "TipSubService";
                    name: string;
                    isActivated: boolean;
                    startDate?: any | null;
                    endDate?: any | null;
                  } | null;
                } | null;
              } | null;
              contactUsSubService?: {
                __typename?: "ContactUsSubServiceEntityResponse";
                data?: {
                  __typename?: "ContactUsSubServiceEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "ContactUsSubService";
                    label: string;
                    name: string;
                    isActivated?: boolean | null;
                    startDate?: any | null;
                    endDate?: any | null;
                  } | null;
                } | null;
              } | null;
              cookiesSubService?: {
                __typename?: "CookiesSubServiceEntityResponse";
                data?: {
                  __typename?: "CookiesSubServiceEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "CookiesSubService";
                    name: string;
                  } | null;
                } | null;
              } | null;
              cguSubService?: {
                __typename?: "CguSubServiceEntityResponse";
                data?: {
                  __typename?: "CguSubServiceEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "CguSubService";
                    name: string;
                  } | null;
                } | null;
              } | null;
              confidentialitySubService?: {
                __typename?: "ConfidentialitySubServiceEntityResponse";
                data?: {
                  __typename?: "ConfidentialitySubServiceEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "ConfidentialitySubService";
                    name: string;
                  } | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
        alertNotificationService?: {
          __typename?: "AlertNotificationServiceEntityResponse";
          data?: {
            __typename?: "AlertNotificationServiceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "AlertNotificationService";
              name?: string | null;
              isActivated: boolean;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          } | null;
        } | null;
        recyclingGuideService?: {
          __typename?: "RecyclingGuideServiceEntityResponse";
          data?: {
            __typename?: "RecyclingGuideServiceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "RecyclingGuideService";
              name: string;
              isActivated: boolean;
              memoName: string;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          } | null;
        } | null;
        pickUpDayService?: {
          __typename?: "PickUpDayServiceEntityResponse";
          data?: {
            __typename?: "PickUpDayServiceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "PickUpDayService";
              name: string;
              isActivated: boolean;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          } | null;
        } | null;
        dropOffMapService?: {
          __typename?: "DropOffMapServiceEntityResponse";
          data?: {
            __typename?: "DropOffMapServiceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "DropOffMapService";
              name?: string | null;
              isActivated: boolean;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          } | null;
        } | null;
        requestService?: {
          __typename?: "RequestServiceEntityResponse";
          data?: {
            __typename?: "RequestServiceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "RequestService";
              name: string;
              isActivated: boolean;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          } | null;
        } | null;
        yesWeScanServices?: {
          __typename?: "YesWeScanServiceRelationResponseCollection";
          data: Array<{
            __typename?: "YesWeScanServiceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "YesWeScanService";
              startDate?: any | null;
              endDate?: any | null;
              serviceName?: string | null;
              shortName: string;
            } | null;
          }>;
        } | null;
        MwCounterService?: {
          __typename?: "MwCounterServiceEntityResponse";
          data?: {
            __typename?: "MwCounterServiceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "MwCounterService";
              name?: string | null;
              isActivated: boolean;
              startDate?: any | null;
              endDate?: any | null;
            } | null;
          } | null;
        } | null;
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{
            __typename?: "AudienceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Audience";
              type: Enum_Audience_Type;
              isActive: boolean;
            } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type GetContractsQueryVariables = Exact<{ [key: string]: never }>;

export type GetContractsQuery = {
  __typename?: "Query";
  contracts?: {
    __typename?: "ContractEntityResponseCollection";
    data: Array<{
      __typename?: "ContractEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Contract";
        clientName: string;
        contractStatus: Enum_Contract_Contractstatus;
        dueDate?: any | null;
        clientType: Enum_Contract_Clienttype;
        isNonExclusive: boolean;
        isRVFrance: boolean;
        isFreemium: boolean;
        idPianoAnalytics?: string | null;
        logo: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
            } | null;
          } | null;
        };
        channelType?: {
          __typename?: "ChannelTypeEntityResponse";
          data?: {
            __typename?: "ChannelTypeEntity";
            id?: string | null;
            attributes?: {
              __typename?: "ChannelType";
              hasWebApp?: boolean | null;
              hasWebSite?: boolean | null;
              hasYesWeScan?: boolean | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
  } | null;
};

export type GetUserContractsQueryVariables = Exact<{
  uuid: Scalars["String"];
}>;

export type GetUserContractsQuery = {
  __typename?: "Query";
  getUserContracts?: Array<{
    __typename?: "UserContract";
    id?: string | null;
    clientName?: string | null;
    contractStatus?: string | null;
    dueDate?: string | null;
    clientType?: string | null;
    isNonExclusive?: boolean | null;
    isRVFrance?: boolean | null;
    isFreemium?: boolean | null;
    updatedAt?: string | null;
    logo?: {
      __typename?: "ContractLogo";
      hash?: string | null;
      mime?: string | null;
      name?: string | null;
      provider?: string | null;
      size?: string | null;
      url?: string | null;
      alternativeText?: string | null;
    } | null;
    channelType?: {
      __typename?: "ContractChannelType";
      hasWebApp?: boolean | null;
      hasWebSite?: boolean | null;
      hasYesWeScan?: boolean | null;
    } | null;
  } | null> | null;
};

export type CreateMwcFlowMutationVariables = Exact<{
  data: MwcFlowInput;
}>;

export type CreateMwcFlowMutation = {
  __typename?: "Mutation";
  createMwcFlow?: {
    __typename?: "MwcFlowEntityResponse";
    data?: { __typename?: "MwcFlowEntity"; id?: string | null } | null;
  } | null;
};

export type DeleteMwcFlowMutationVariables = Exact<{
  deleteMwcFlowId: Scalars["ID"];
}>;

export type DeleteMwcFlowMutation = {
  __typename?: "Mutation";
  deleteMwcFlow?: {
    __typename?: "MwcFlowEntityResponse";
    data?: { __typename?: "MwcFlowEntity"; id?: string | null } | null;
  } | null;
};

export type GetActivatedMwcFlowsByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetActivatedMwcFlowsByContractIdQuery = {
  __typename?: "Query";
  flows?: {
    __typename?: "FlowEntityResponseCollection";
    data: Array<{
      __typename?: "FlowEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Flow";
        name?: string | null;
        code?: string | null;
      } | null;
    }>;
  } | null;
};

export type GetMwcAverageProductionQueryVariables = Exact<{
  contractId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetMwcAverageProductionQuery = {
  __typename?: "Query";
  getMwcAverageProduction?: number | null;
};

export type GetMwcBarometerParamsQueryVariables = Exact<{
  mwCounterServiceId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetMwcBarometerParamsQuery = {
  __typename?: "Query";
  mwCounterService?: {
    __typename?: "MwCounterServiceEntityResponse";
    data?: {
      __typename?: "MwCounterServiceEntity";
      attributes?: {
        __typename?: "MwCounterService";
        barometerParams?: any | null;
      } | null;
    } | null;
  } | null;
};

export type GetMwcContactQueryVariables = Exact<{
  filters?: InputMaybe<MwCounterServiceFiltersInput>;
}>;

export type GetMwcContactQuery = {
  __typename?: "Query";
  mwCounterServices?: {
    __typename?: "MwCounterServiceEntityResponseCollection";
    data: Array<{
      __typename?: "MwCounterServiceEntity";
      attributes?: {
        __typename?: "MwCounterService";
        serviceName?: string | null;
        contactEmail?: string | null;
        phoneNumber?: string | null;
        postalAddress?: string | null;
        postalCode?: string | null;
        city?: string | null;
      } | null;
    }>;
  } | null;
};

export type GetMwcFlowByFlowIdQueryVariables = Exact<{
  flowId: Scalars["ID"];
}>;

export type GetMwcFlowByFlowIdQuery = {
  __typename?: "Query";
  flow?: {
    __typename?: "FlowEntityResponse";
    data?: {
      __typename?: "FlowEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Flow";
        mwcFlow?: {
          __typename?: "MwcFlowEntityResponse";
          data?: {
            __typename?: "MwcFlowEntity";
            id?: string | null;
            attributes?: {
              __typename?: "MwcFlow";
              averageProductionPerson?: any | null;
              weightSystem?: Enum_Mwcflow_Weightsystem | null;
              flow?: {
                __typename?: "FlowEntityResponse";
                data?: {
                  __typename?: "FlowEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "Flow";
                    name?: string | null;
                  } | null;
                } | null;
              } | null;
              blocks?: Array<
                | {
                    __typename?: "ComponentBlocksImage";
                    id: string;
                    isDecorative?: boolean | null;
                    altText?: string | null;
                    picture?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          name: string;
                          alternativeText?: string | null;
                          caption?: string | null;
                          width?: number | null;
                          height?: number | null;
                          formats?: any | null;
                          hash: string;
                          ext?: string | null;
                          mime: string;
                          size: number;
                          url: string;
                          previewUrl?: string | null;
                          provider: string;
                          provider_metadata?: any | null;
                          createdAt?: any | null;
                          updatedAt?: any | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentBlocksSubHeading";
                    id: string;
                    subHeadingText?: string | null;
                    subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
                  }
                | {
                    __typename?: "ComponentBlocksVideo";
                    id: string;
                    videoLink?: string | null;
                    transcriptText?: string | null;
                  }
                | {
                    __typename?: "ComponentBlocksWysiwyg";
                    id: string;
                    textEditor?: string | null;
                  }
                | {
                    __typename?: "Error";
                    code: string;
                    message?: string | null;
                  }
                | null
              > | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type GetMwcFlowsByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetMwcFlowsByContractIdQuery = {
  __typename?: "Query";
  mwcFlows?: {
    __typename?: "MwcFlowEntityResponseCollection";
    data: Array<{
      __typename?: "MwcFlowEntity";
      id?: string | null;
      attributes?: {
        __typename?: "MwcFlow";
        weightSystem?: Enum_Mwcflow_Weightsystem | null;
        averageProductionPerson?: any | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    name: string;
                    alternativeText?: string | null;
                    caption?: string | null;
                    width?: number | null;
                    height?: number | null;
                    formats?: any | null;
                    hash: string;
                    ext?: string | null;
                    mime: string;
                    size: number;
                    url: string;
                    previewUrl?: string | null;
                    provider: string;
                    provider_metadata?: any | null;
                    createdAt?: any | null;
                    updatedAt?: any | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error"; code: string; message?: string | null }
          | null
        > | null;
        flow?: {
          __typename?: "FlowEntityResponse";
          data?: {
            __typename?: "FlowEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Flow";
              isActivated?: boolean | null;
              code?: string | null;
              name?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
  } | null;
};

export type GetMwcHasTipsQueryVariables = Exact<{
  filters?: InputMaybe<MwCounterServiceFiltersInput>;
}>;

export type GetMwcHasTipsQuery = {
  __typename?: "Query";
  mwCounterServices?: {
    __typename?: "MwCounterServiceEntityResponseCollection";
    data: Array<{
      __typename?: "MwCounterServiceEntity";
      attributes?: {
        __typename?: "MwCounterService";
        hasTips?: boolean | null;
      } | null;
    }>;
  } | null;
};

export type GetMwcounterServicesQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetMwcounterServicesQuery = {
  __typename?: "Query";
  mwCounterServices?: {
    __typename?: "MwCounterServiceEntityResponseCollection";
    data: Array<{
      __typename?: "MwCounterServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "MwCounterService";
        serviceName?: string | null;
        contactEmail?: string | null;
        phoneNumber?: string | null;
        postalAddress?: string | null;
        postalCode?: string | null;
        city?: string | null;
      } | null;
    }>;
  } | null;
};

export type GetUserFromAddressOrUuidQueryVariables = Exact<{
  uuid?: InputMaybe<Scalars["String"]>;
  contractId?: InputMaybe<Scalars["ID"]>;
  address?: InputMaybe<Scalars["String"]>;
}>;

export type GetUserFromAddressOrUuidQuery = {
  __typename?: "Query";
  getUserFromAddressOrUuid?: Array<{
    __typename?: "User";
    uuid?: string | null;
    activeCounter?: boolean | null;
    email?: string | null;
    firstName?: string | null;
    address?: {
      __typename?: "Address";
      city?: string | null;
      housenumber?: string | null;
      label?: string | null;
      postcode?: string | null;
      street?: string | null;
    } | null;
  } | null> | null;
};

export type UpdateCounterStatusMutationVariables = Exact<{
  uuid: Scalars["String"];
  activeCounter: Scalars["Boolean"];
}>;

export type UpdateCounterStatusMutation = {
  __typename?: "Mutation";
  updateCounterStatus?: {
    __typename?: "User";
    activeCounter?: boolean | null;
  } | null;
};

export type UpdateMwcBarometerParamsMutationVariables = Exact<{
  updateMwCounterServiceId: Scalars["ID"];
  data: MwCounterServiceInput;
}>;

export type UpdateMwcBarometerParamsMutation = {
  __typename?: "Mutation";
  updateMwCounterService?: {
    __typename?: "MwCounterServiceEntityResponse";
    data?: {
      __typename?: "MwCounterServiceEntity";
      attributes?: {
        __typename?: "MwCounterService";
        barometerParams?: any | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateMwcContactMutationVariables = Exact<{
  contractId: Scalars["ID"];
  serviceName?: InputMaybe<Scalars["String"]>;
  postalAddress?: InputMaybe<Scalars["String"]>;
  postalCode?: InputMaybe<Scalars["String"]>;
  city?: InputMaybe<Scalars["String"]>;
  contactEmail?: InputMaybe<Scalars["String"]>;
  phoneNumber?: InputMaybe<Scalars["String"]>;
}>;

export type UpdateMwcContactMutation = {
  __typename?: "Mutation";
  updateContactMwc?: {
    __typename?: "ContactResponse";
    serviceName?: string | null;
    postalAddress?: string | null;
    postalCode?: string | null;
    city?: string | null;
    contactEmail?: string | null;
    phoneNumber?: string | null;
  } | null;
};

export type UpdateMwcFlowMutationVariables = Exact<{
  data: MwcFlowInput;
  updateMwcFlowId: Scalars["ID"];
}>;

export type UpdateMwcFlowMutation = {
  __typename?: "Mutation";
  updateMwcFlow?: {
    __typename?: "MwcFlowEntityResponse";
    data?: {
      __typename?: "MwcFlowEntity";
      attributes?: {
        __typename?: "MwcFlow";
        weightSystem?: Enum_Mwcflow_Weightsystem | null;
        averageProductionPerson?: any | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        mwCounterService?: {
          __typename?: "MwCounterServiceEntityResponse";
          data?: {
            __typename?: "MwCounterServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        blocks?: Array<
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              isDecorative?: boolean | null;
              altText?: string | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    name: string;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingText?: string | null;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              videoLink?: string | null;
              transcriptText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
        flow?: {
          __typename?: "FlowEntityResponse";
          data?: { __typename?: "FlowEntity"; id?: string | null } | null;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateMwcHasTipsMutationVariables = Exact<{
  contractId: Scalars["ID"];
  data: MwCounterServiceInput;
}>;

export type UpdateMwcHasTipsMutation = {
  __typename?: "Mutation";
  updateMwCounterService?: {
    __typename?: "MwCounterServiceEntityResponse";
    data?: {
      __typename?: "MwCounterServiceEntity";
      attributes?: {
        __typename?: "MwCounterService";
        hasTips?: boolean | null;
      } | null;
    } | null;
  } | null;
};

export type CreateSearchEngineBlockMutationVariables = Exact<{
  data: SearchEngineBlockInput;
}>;

export type CreateSearchEngineBlockMutation = {
  __typename?: "Mutation";
  createSearchEngineBlock?: {
    __typename?: "SearchEngineBlockEntityResponse";
    data?: {
      __typename?: "SearchEngineBlockEntity";
      id?: string | null;
    } | null;
  } | null;
};

export type CreateWelcomeMessageBlockMutationVariables = Exact<{
  data: WelcomeMessageBlockInput;
}>;

export type CreateWelcomeMessageBlockMutation = {
  __typename?: "Mutation";
  createWelcomeMessageBlock?: {
    __typename?: "WelcomeMessageBlockEntityResponse";
    data?: {
      __typename?: "WelcomeMessageBlockEntity";
      id?: string | null;
    } | null;
  } | null;
};

export type GetEditoBlockTabByContractIdAndAudienceIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  status?: InputMaybe<Enum_Editocontentdto_Status>;
  audienceId: Scalars["ID"];
}>;

export type GetEditoBlockTabByContractIdAndAudienceIdQuery = {
  __typename?: "Query";
  getEditoBlockDTO?: {
    __typename?: "EditoBlockDTO";
    id: string;
    displayBlock: boolean;
    titleContent: string;
    editoContents?: Array<{
      __typename?: "EditoContentDTO";
      componentId?: string | null;
      uniqueId: string;
      id: string;
      contentType: string;
      typeName: string;
      attributes: {
        __typename?: "EditoContentDTOAttributes";
        title: string;
        status?: Enum_Editocontentdto_Status | null;
        publishedDate?: any | null;
      };
    } | null> | null;
  } | null;
  getEditoContentDTOs?: Array<{
    __typename?: "EditoContentDTO";
    id: string;
    contentType: string;
    typeName: string;
    uniqueId: string;
    attributes: {
      __typename?: "EditoContentDTOAttributes";
      title: string;
      status?: Enum_Editocontentdto_Status | null;
      publishedDate?: any | null;
    };
  } | null> | null;
};

export type GetQuizAndTipsBlockTabByContractIdAndAudienceIdQueryVariables =
  Exact<{
    contractId: Scalars["ID"];
    status: Scalars["String"];
    audienceId: Scalars["ID"];
  }>;

export type GetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery = {
  __typename?: "Query";
  contractCustomizations?: {
    __typename?: "ContractCustomizationEntityResponseCollection";
    data: Array<{
      __typename?: "ContractCustomizationEntity";
      attributes?: {
        __typename?: "ContractCustomization";
        homepage?: {
          __typename?: "HomepageEntityResponse";
          data?: {
            __typename?: "HomepageEntity";
            attributes?: {
              __typename?: "Homepage";
              quizAndTipsBlocks?: {
                __typename?: "QuizAndTipsBlockRelationResponseCollection";
                data: Array<{
                  __typename?: "QuizAndTipsBlockEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "QuizAndTipsBlock";
                    titleContent: string;
                    displayBlock: boolean;
                    displayQuiz: boolean;
                    displayTips: boolean;
                    quiz?: {
                      __typename?: "QuizEntityResponse";
                      data?: {
                        __typename?: "QuizEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "Quiz";
                          title?: string | null;
                          status?: Enum_Quiz_Status | null;
                          publishedDate?: any | null;
                        } | null;
                      } | null;
                    } | null;
                    tips?: {
                      __typename?: "TipRelationResponseCollection";
                      data: Array<{
                        __typename?: "TipEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "Tip";
                          title: string;
                          status?: Enum_Tip_Status | null;
                          publishedDate?: any | null;
                          image: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              attributes?: {
                                __typename?: "UploadFile";
                                hash: string;
                                mime: string;
                                name: string;
                                provider: string;
                                size: number;
                                url: string;
                                alternativeText?: string | null;
                              } | null;
                            } | null;
                          };
                        } | null;
                      }>;
                    } | null;
                  } | null;
                }>;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
  } | null;
  quizSubServices?: {
    __typename?: "QuizSubServiceEntityResponseCollection";
    data: Array<{
      __typename?: "QuizSubServiceEntity";
      attributes?: {
        __typename?: "QuizSubService";
        quizzes?: {
          __typename?: "QuizRelationResponseCollection";
          data: Array<{
            __typename?: "QuizEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Quiz";
              title?: string | null;
              status?: Enum_Quiz_Status | null;
              publishedDate?: any | null;
            } | null;
          }>;
        } | null;
      } | null;
    }>;
  } | null;
  tipSubServices?: {
    __typename?: "TipSubServiceEntityResponseCollection";
    data: Array<{
      __typename?: "TipSubServiceEntity";
      attributes?: {
        __typename?: "TipSubService";
        tips?: {
          __typename?: "TipRelationResponseCollection";
          data: Array<{
            __typename?: "TipEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Tip";
              title: string;
              status?: Enum_Tip_Status | null;
              publishedDate?: any | null;
              image: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                  } | null;
                } | null;
              };
            } | null;
          }>;
        } | null;
      } | null;
    }>;
  } | null;
};

export type GetRecyclingGuideBlockByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetRecyclingGuideBlockByContractIdQuery = {
  __typename?: "Query";
  contractCustomizations?: {
    __typename?: "ContractCustomizationEntityResponseCollection";
    data: Array<{
      __typename?: "ContractCustomizationEntity";
      attributes?: {
        __typename?: "ContractCustomization";
        homepage?: {
          __typename?: "HomepageEntityResponse";
          data?: {
            __typename?: "HomepageEntity";
            attributes?: {
              __typename?: "Homepage";
              recyclingGuideBlock?: {
                __typename?: "RecyclingGuideBlockEntityResponse";
                data?: {
                  __typename?: "RecyclingGuideBlockEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "RecyclingGuideBlock";
                    titleContent: string;
                    subtitleContent: string;
                    recyclingGuideDisplayContent: string;
                    tags?: {
                      __typename?: "TagRelationResponseCollection";
                      data: Array<{
                        __typename?: "TagEntity";
                        attributes?: {
                          __typename?: "Tag";
                          name: string;
                        } | null;
                      }>;
                    } | null;
                  } | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
  } | null;
};

export type GetServicesBlocksByContractIdAndAudienceIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  audienceId: Scalars["ID"];
}>;

export type GetServicesBlocksByContractIdAndAudienceIdQuery = {
  __typename?: "Query";
  contractCustomizations?: {
    __typename?: "ContractCustomizationEntityResponseCollection";
    data: Array<{
      __typename?: "ContractCustomizationEntity";
      id?: string | null;
      attributes?: {
        __typename?: "ContractCustomization";
        homepage?: {
          __typename?: "HomepageEntityResponse";
          data?: {
            __typename?: "HomepageEntity";
            attributes?: {
              __typename?: "Homepage";
              servicesBlocks?: {
                __typename?: "ServicesBlockRelationResponseCollection";
                data: Array<{
                  __typename?: "ServicesBlockEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "ServicesBlock";
                    titleContent: string;
                    serviceLinks?: Array<
                      | {
                          __typename?: "ComponentLinksAlertNotification";
                          id: string;
                          isDisplayed: boolean;
                          name?: string | null;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksContactUs";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksDropOffMap";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksEvents";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksExternal";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          externalLink?: string | null;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksFrees";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                          freeContents?: {
                            __typename?: "FreeContentSubServiceRelationResponseCollection";
                            data: Array<{
                              __typename?: "FreeContentSubServiceEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "FreeContentSubService";
                                name: string;
                              } | null;
                            }>;
                          } | null;
                        }
                      | { __typename?: "ComponentLinksKeyMetrics" }
                      | {
                          __typename?: "ComponentLinksMyWasteCounter";
                          isDisplayed: boolean;
                          name?: string | null;
                          id: string;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksNews";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksPickUpDay";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksQuizzes";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksRecyclingGuide";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksRequest";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksTips";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | { __typename?: "Error" }
                      | null
                    > | null;
                  } | null;
                }>;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
  } | null;
};

export type GetTopContentBlockTabByContractIdAndAudienceIdQueryVariables =
  Exact<{
    contractId: Scalars["ID"];
    status?: InputMaybe<Enum_Topcontentdto_Status>;
    audienceId: Scalars["ID"];
  }>;

export type GetTopContentBlockTabByContractIdAndAudienceIdQuery = {
  __typename?: "Query";
  getTopContentBlockDTO?: {
    __typename?: "TopContentBlockDTO";
    id: string;
    displayBlock: boolean;
    displayLastThreeContents: boolean;
    hasTopContent: boolean;
    titleContent: string;
    topContent?: {
      __typename?: "EditoContentDTO";
      componentId?: string | null;
      uniqueId: string;
      id: string;
      contentType: string;
      typeName: string;
      attributes: {
        __typename?: "EditoContentDTOAttributes";
        title: string;
        status?: Enum_Editocontentdto_Status | null;
        publishedDate?: any | null;
      };
    } | null;
  } | null;
  getTopContentDTOs?: Array<{
    __typename?: "EditoContentDTO";
    id: string;
    contentType: string;
    typeName: string;
    uniqueId: string;
    attributes: {
      __typename?: "EditoContentDTOAttributes";
      title: string;
      status?: Enum_Editocontentdto_Status | null;
      publishedDate?: any | null;
    };
  } | null> | null;
};

export type GetWelcomeMessageAndSearchEngineBlocksByContractIdQueryVariables =
  Exact<{
    contractId: Scalars["ID"];
  }>;

export type GetWelcomeMessageAndSearchEngineBlocksByContractIdQuery = {
  __typename?: "Query";
  contractCustomizations?: {
    __typename?: "ContractCustomizationEntityResponseCollection";
    data: Array<{
      __typename?: "ContractCustomizationEntity";
      attributes?: {
        __typename?: "ContractCustomization";
        homepage?: {
          __typename?: "HomepageEntityResponse";
          data?: {
            __typename?: "HomepageEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Homepage";
              welcomeMessageBlock?: {
                __typename?: "WelcomeMessageBlockEntityResponse";
                data?: {
                  __typename?: "WelcomeMessageBlockEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "WelcomeMessageBlock";
                    showBlock: boolean;
                    subtitle: string;
                    title: string;
                  } | null;
                } | null;
              } | null;
              searchEngineBlock?: {
                __typename?: "SearchEngineBlockEntityResponse";
                data?: {
                  __typename?: "SearchEngineBlockEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "SearchEngineBlock";
                    titleContent: string;
                  } | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
  } | null;
};

export type UpdateEditoBlockByIdMutationVariables = Exact<{
  updateEditoBlockId: Scalars["ID"];
  data: EditoBlockInput;
}>;

export type UpdateEditoBlockByIdMutation = {
  __typename?: "Mutation";
  updateEditoBlock?: {
    __typename?: "EditoBlockEntityResponse";
    data?: {
      __typename?: "EditoBlockEntity";
      id?: string | null;
      attributes?: {
        __typename?: "EditoBlock";
        displayBlock: boolean;
        titleContent: string;
      } | null;
    } | null;
  } | null;
};

export type UpdateQuizAndTipsBlockByIdMutationVariables = Exact<{
  quizAndTipsBlockId: Scalars["ID"];
  data: QuizAndTipsBlockInput;
}>;

export type UpdateQuizAndTipsBlockByIdMutation = {
  __typename?: "Mutation";
  updateQuizAndTipsBlock?: {
    __typename?: "QuizAndTipsBlockEntityResponse";
    data?: {
      __typename?: "QuizAndTipsBlockEntity";
      attributes?: {
        __typename?: "QuizAndTipsBlock";
        titleContent: string;
        displayBlock: boolean;
        displayQuiz: boolean;
        displayTips: boolean;
        quiz?: {
          __typename?: "QuizEntityResponse";
          data?: { __typename?: "QuizEntity"; id?: string | null } | null;
        } | null;
        tips?: {
          __typename?: "TipRelationResponseCollection";
          data: Array<{ __typename?: "TipEntity"; id?: string | null }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateRecyclingGuideBlockByIdMutationVariables = Exact<{
  updateRecyclingGuideBlockId: Scalars["ID"];
  data: RecyclingGuideBlockInput;
}>;

export type UpdateRecyclingGuideBlockByIdMutation = {
  __typename?: "Mutation";
  updateRecyclingGuideBlock?: {
    __typename?: "RecyclingGuideBlockEntityResponse";
    data?: {
      __typename?: "RecyclingGuideBlockEntity";
      attributes?: {
        __typename?: "RecyclingGuideBlock";
        titleContent: string;
        subtitleContent: string;
        recyclingGuideDisplayContent: string;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateSearchEngineBlockByIdMutationVariables = Exact<{
  updateSearchEngineBlockId: Scalars["ID"];
  data: SearchEngineBlockInput;
}>;

export type UpdateSearchEngineBlockByIdMutation = {
  __typename?: "Mutation";
  updateSearchEngineBlock?: {
    __typename?: "SearchEngineBlockEntityResponse";
    data?: {
      __typename?: "SearchEngineBlockEntity";
      attributes?: {
        __typename?: "SearchEngineBlock";
        titleContent: string;
      } | null;
    } | null;
  } | null;
};

export type UpdateServicesBlockByIdMutationVariables = Exact<{
  updateServicesBlockId: Scalars["ID"];
  data: ServicesBlockInput;
}>;

export type UpdateServicesBlockByIdMutation = {
  __typename?: "Mutation";
  updateServicesBlock?: {
    __typename?: "ServicesBlockEntityResponse";
    data?: {
      __typename?: "ServicesBlockEntity";
      id?: string | null;
      attributes?: {
        __typename?: "ServicesBlock";
        homepage?: {
          __typename?: "HomepageEntityResponse";
          data?: {
            __typename?: "HomepageEntity";
            attributes?: {
              __typename?: "Homepage";
              servicesBlocks?: {
                __typename?: "ServicesBlockRelationResponseCollection";
                data: Array<{
                  __typename?: "ServicesBlockEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "ServicesBlock";
                    titleContent: string;
                    serviceLinks?: Array<
                      | { __typename?: "ComponentLinksAlertNotification" }
                      | {
                          __typename?: "ComponentLinksContactUs";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksDropOffMap";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksEvents";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksExternal";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          externalLink?: string | null;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksFrees";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                          freeContents?: {
                            __typename?: "FreeContentSubServiceRelationResponseCollection";
                            data: Array<{
                              __typename?: "FreeContentSubServiceEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "FreeContentSubService";
                                name: string;
                              } | null;
                            }>;
                          } | null;
                        }
                      | { __typename?: "ComponentLinksKeyMetrics" }
                      | { __typename?: "ComponentLinksMyWasteCounter" }
                      | {
                          __typename?: "ComponentLinksNews";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksPickUpDay";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksQuizzes";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksRecyclingGuide";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksRequest";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | {
                          __typename?: "ComponentLinksTips";
                          id: string;
                          name?: string | null;
                          isDisplayed: boolean;
                          picto?: {
                            __typename?: "UploadFileEntityResponse";
                            data?: {
                              __typename?: "UploadFileEntity";
                              id?: string | null;
                              attributes?: {
                                __typename?: "UploadFile";
                                url: string;
                                alternativeText?: string | null;
                                name: string;
                                ext?: string | null;
                                size: number;
                                width?: number | null;
                                height?: number | null;
                                createdAt?: any | null;
                              } | null;
                            } | null;
                          } | null;
                        }
                      | { __typename?: "Error" }
                      | null
                    > | null;
                  } | null;
                }>;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateTopContentBlockByIdMutationVariables = Exact<{
  updateTopContentBlockId: Scalars["ID"];
  data: TopContentBlockInput;
}>;

export type UpdateTopContentBlockByIdMutation = {
  __typename?: "Mutation";
  updateTopContentBlock?: {
    __typename?: "TopContentBlockEntityResponse";
    data?: {
      __typename?: "TopContentBlockEntity";
      attributes?: {
        __typename?: "TopContentBlock";
        homepage?: {
          __typename?: "HomepageEntityResponse";
          data?: {
            __typename?: "HomepageEntity";
            attributes?: {
              __typename?: "Homepage";
              topContentBlocks?: {
                __typename?: "TopContentBlockRelationResponseCollection";
                data: Array<{
                  __typename?: "TopContentBlockEntity";
                  attributes?: {
                    __typename?: "TopContentBlock";
                    displayBlock: boolean;
                    titleContent: string;
                    hasTopContent: boolean;
                    displayLastThreeContents: boolean;
                  } | null;
                }>;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateWelcomeMessageBlockByIdMutationVariables = Exact<{
  updateWelcomeMessageBlockId: Scalars["ID"];
  data: WelcomeMessageBlockInput;
}>;

export type UpdateWelcomeMessageBlockByIdMutation = {
  __typename?: "Mutation";
  updateWelcomeMessageBlock?: {
    __typename?: "WelcomeMessageBlockEntityResponse";
    data?: {
      __typename?: "WelcomeMessageBlockEntity";
      id?: string | null;
    } | null;
  } | null;
};

export type GetContractCustomizationByIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetContractCustomizationByIdQuery = {
  __typename?: "Query";
  contract?: {
    __typename?: "ContractEntityResponse";
    data?: {
      __typename?: "ContractEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Contract";
        communityUrl?: string | null;
        logo: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
            } | null;
          } | null;
        };
        contractCustomization?: {
          __typename?: "ContractCustomizationEntityResponse";
          data?: {
            __typename?: "ContractCustomizationEntity";
            id?: string | null;
            attributes?: {
              __typename?: "ContractCustomization";
              primaryColor: string;
              secondaryColor?: string | null;
              textContrast: string;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateContractCustomizationByContractIdMutationVariables = Exact<{
  updateContractId: Scalars["ID"];
  data: ContractInput;
}>;

export type UpdateContractCustomizationByContractIdMutation = {
  __typename?: "Mutation";
  updateContract?: {
    __typename?: "ContractEntityResponse";
    data?: {
      __typename?: "ContractEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Contract";
        logo: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              name: string;
              alternativeText?: string | null;
              hash: string;
              mime: string;
              size: number;
              url: string;
              provider: string;
            } | null;
          } | null;
        };
        contractCustomization?: {
          __typename?: "ContractCustomizationEntityResponse";
          data?: {
            __typename?: "ContractCustomizationEntity";
            id?: string | null;
            attributes?: {
              __typename?: "ContractCustomization";
              primaryColor: string;
              secondaryColor?: string | null;
              textContrast: string;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateContractCustomizationByIdMutationVariables = Exact<{
  updateContractCustomizationId: Scalars["ID"];
  data: ContractCustomizationInput;
}>;

export type UpdateContractCustomizationByIdMutation = {
  __typename?: "Mutation";
  updateContractCustomization?: {
    __typename?: "ContractCustomizationEntityResponse";
    data?: {
      __typename?: "ContractCustomizationEntity";
      attributes?: {
        __typename?: "ContractCustomization";
        primaryColor: string;
        secondaryColor?: string | null;
        textContrast: string;
      } | null;
    } | null;
  } | null;
};

export type GetFooterByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetFooterByContractIdQuery = {
  __typename?: "Query";
  contractCustomizations?: {
    __typename?: "ContractCustomizationEntityResponseCollection";
    data: Array<{
      __typename?: "ContractCustomizationEntity";
      attributes?: {
        __typename?: "ContractCustomization";
        footer?: {
          __typename?: "FooterEntityResponse";
          data?: {
            __typename?: "FooterEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Footer";
              accessibilityLevel?: Enum_Footer_Accessibilitylevel | null;
              linkUrl?: string | null;
              linkName?: string | null;
              displayLink?: boolean | null;
              contactUsSubService?: {
                __typename?: "ContactUsSubServiceEntityResponse";
                data?: {
                  __typename?: "ContactUsSubServiceEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "ContactUsSubService";
                    label: string;
                    link?: string | null;
                  } | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
  } | null;
};

export type UpdateFooterPageByIdAndContactUsSubServiceIdMutationVariables =
  Exact<{
    updateFooterId: Scalars["ID"];
    updateFooterData: FooterInput;
    updateContactUsSubServiceId: Scalars["ID"];
    updateContactUsSubServiceData: ContactUsSubServiceInput;
  }>;

export type UpdateFooterPageByIdAndContactUsSubServiceIdMutation = {
  __typename?: "Mutation";
  updateFooter?: {
    __typename?: "FooterEntityResponse";
    data?: {
      __typename?: "FooterEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Footer";
        accessibilityLevel?: Enum_Footer_Accessibilitylevel | null;
      } | null;
    } | null;
  } | null;
  updateContactUsSubService?: {
    __typename?: "ContactUsSubServiceEntityResponse";
    data?: {
      __typename?: "ContactUsSubServiceEntity";
      attributes?: {
        __typename?: "ContactUsSubService";
        label: string;
        link?: string | null;
      } | null;
    } | null;
  } | null;
};

export type GetContractMenuByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetContractMenuByContractIdQuery = {
  __typename?: "Query";
  contract?: {
    __typename?: "ContractEntityResponse";
    data?: {
      __typename?: "ContractEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Contract";
        contractMenu?: {
          __typename?: "ContractMenuEntityResponse";
          data?: {
            __typename?: "ContractMenuEntity";
            id?: string | null;
            attributes?: {
              __typename?: "ContractMenu";
              serviceLinks?: Array<
                | {
                    __typename?: "ComponentLinksAlertNotification";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentLinksContactUs";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentLinksDropOffMap";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentLinksEvents";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentLinksExternal";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    externalLink?: string | null;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentLinksFrees";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | { __typename?: "ComponentLinksKeyMetrics" }
                | {
                    __typename?: "ComponentLinksMyWasteCounter";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentLinksNews";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentLinksPickUpDay";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentLinksQuizzes";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentLinksRecyclingGuide";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentLinksRequest";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | {
                    __typename?: "ComponentLinksTips";
                    id: string;
                    name?: string | null;
                    isDisplayed: boolean;
                    picto?: {
                      __typename?: "UploadFileEntityResponse";
                      data?: {
                        __typename?: "UploadFileEntity";
                        id?: string | null;
                        attributes?: {
                          __typename?: "UploadFile";
                          url: string;
                          alternativeText?: string | null;
                        } | null;
                      } | null;
                    } | null;
                  }
                | { __typename?: "Error" }
                | null
              > | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateContractMenuByIdMutationVariables = Exact<{
  updateMenuPageId: Scalars["ID"];
  data: ContractMenuInput;
}>;

export type UpdateContractMenuByIdMutation = {
  __typename?: "Mutation";
  updateContractMenu?: {
    __typename?: "ContractMenuEntityResponse";
    data?: {
      __typename?: "ContractMenuEntity";
      attributes?: {
        __typename?: "ContractMenu";
        serviceLinks?: Array<
          | { __typename?: "ComponentLinksAlertNotification" }
          | {
              __typename?: "ComponentLinksContactUs";
              id: string;
              name?: string | null;
              isDisplayed: boolean;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentLinksDropOffMap";
              id: string;
              name?: string | null;
              isDisplayed: boolean;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentLinksEvents";
              id: string;
              name?: string | null;
              isDisplayed: boolean;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentLinksExternal";
              id: string;
              name?: string | null;
              isDisplayed: boolean;
              externalLink?: string | null;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentLinksFrees";
              id: string;
              name?: string | null;
              isDisplayed: boolean;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                  } | null;
                } | null;
              } | null;
            }
          | { __typename?: "ComponentLinksKeyMetrics" }
          | { __typename?: "ComponentLinksMyWasteCounter" }
          | {
              __typename?: "ComponentLinksNews";
              id: string;
              name?: string | null;
              isDisplayed: boolean;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentLinksPickUpDay";
              id: string;
              name?: string | null;
              isDisplayed: boolean;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentLinksQuizzes";
              id: string;
              name?: string | null;
              isDisplayed: boolean;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentLinksRecyclingGuide";
              id: string;
              name?: string | null;
              isDisplayed: boolean;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentLinksRequest";
              id: string;
              name?: string | null;
              isDisplayed: boolean;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentLinksTips";
              id: string;
              name?: string | null;
              isDisplayed: boolean;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                  } | null;
                } | null;
              } | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type CreateSectorizationMutationVariables = Exact<{
  data: SectorizationInput;
}>;

export type CreateSectorizationMutation = {
  __typename?: "Mutation";
  createSectorization?: {
    __typename?: "SectorizationEntityResponse";
    data?: {
      __typename?: "SectorizationEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Sectorization";
        createdAt?: any | null;
        description: string;
        name: string;
        polygonCoordinates?: any | null;
        updatedAt?: any | null;
      } | null;
    } | null;
  } | null;
};

export type DeleteSectorizationByIdMutationVariables = Exact<{
  deleteSectorizationId: Scalars["ID"];
}>;

export type DeleteSectorizationByIdMutation = {
  __typename?: "Mutation";
  deleteSectorization?: {
    __typename?: "SectorizationEntityResponse";
    data?: {
      __typename?: "SectorizationEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Sectorization";
        createdAt?: any | null;
        description: string;
        name: string;
        polygonCoordinates?: any | null;
        updatedAt?: any | null;
      } | null;
    } | null;
  } | null;
};

export type GetCitiesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetCitiesByContractIdQuery = {
  __typename?: "Query";
  territories?: {
    __typename?: "TerritoryEntityResponseCollection";
    data: Array<{
      __typename?: "TerritoryEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Territory";
        cities?: {
          __typename?: "CityRelationResponseCollection";
          data: Array<{
            __typename?: "CityEntity";
            attributes?: {
              __typename?: "City";
              name?: string | null;
              GeoJSON?: any | null;
              insee?: string | null;
            } | null;
          }>;
        } | null;
      } | null;
    }>;
  } | null;
};

export type GetSectorizationByCityQueryVariables = Exact<{
  inseeCode: Scalars["String"];
}>;

export type GetSectorizationByCityQuery = {
  __typename?: "Query";
  sectorizationByCity?: {
    __typename?: "CitySectorization";
    GeoJson?: string | null;
  } | null;
};

export type GetSectorizationByIdQueryVariables = Exact<{
  sectorizationId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetSectorizationByIdQuery = {
  __typename?: "Query";
  sectorization?: {
    __typename?: "SectorizationEntityResponse";
    data?: {
      __typename?: "SectorizationEntity";
      attributes?: {
        __typename?: "Sectorization";
        name: string;
        description: string;
        polygonCoordinates?: any | null;
      } | null;
    } | null;
  } | null;
};

export type GetSectorizationsByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
}>;

export type GetSectorizationsByContractIdQuery = {
  __typename?: "Query";
  sectorizations?: {
    __typename?: "SectorizationEntityResponseCollection";
    data: Array<{
      __typename?: "SectorizationEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Sectorization";
        createdAt?: any | null;
        description: string;
        name: string;
        updatedAt?: any | null;
        polygonCoordinates?: any | null;
      } | null;
    }>;
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        total: number;
        pageSize: number;
        page: number;
        pageCount: number;
      };
    };
  } | null;
};

export type UpdateSectorizationByIdMutationVariables = Exact<{
  updateSectorizationId: Scalars["ID"];
  data: SectorizationInput;
}>;

export type UpdateSectorizationByIdMutation = {
  __typename?: "Mutation";
  updateSectorization?: {
    __typename?: "SectorizationEntityResponse";
    data?: { __typename?: "SectorizationEntity"; id?: string | null } | null;
  } | null;
};

export type GetAudiencesQueryVariables = Exact<{
  filters?: InputMaybe<AudienceFiltersInput>;
}>;

export type GetAudiencesQuery = {
  __typename?: "Query";
  audiences?: {
    __typename?: "AudienceEntityResponseCollection";
    data: Array<{
      __typename?: "AudienceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Audience";
        isActive: boolean;
        type: Enum_Audience_Type;
      } | null;
    }>;
  } | null;
};

export type UpdateAudienceByIdMutationVariables = Exact<{
  updateAudienceId: Scalars["ID"];
  data: AudienceInput;
}>;

export type UpdateAudienceByIdMutation = {
  __typename?: "Mutation";
  updateAudience?: {
    __typename?: "AudienceEntityResponse";
    data?: {
      __typename?: "AudienceEntity";
      id?: string | null;
      attributes?: { __typename?: "Audience"; isActive: boolean } | null;
    } | null;
  } | null;
};

export type CreateAlertNotificationMutationVariables = Exact<{
  data: AlertNotificationInput;
}>;

export type CreateAlertNotificationMutation = {
  __typename?: "Mutation";
  createAlertNotification?: {
    __typename?: "AlertNotificationEntityResponse";
    data?: {
      __typename?: "AlertNotificationEntity";
      id?: string | null;
      attributes?: {
        __typename?: "AlertNotification";
        alertUserStorages?: {
          __typename?: "AlertUserStorageRelationResponseCollection";
          data: Array<{
            __typename?: "AlertUserStorageEntity";
            attributes?: {
              __typename?: "AlertUserStorage";
              alertNotificationServiceId: string;
              email?: string | null;
              phoneNumber?: string | null;
              isSMS: boolean;
              isEmail: boolean;
            } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type DeleteAlertNotificationByIdMutationVariables = Exact<{
  deleteAlertNotificationId: Scalars["ID"];
}>;

export type DeleteAlertNotificationByIdMutation = {
  __typename?: "Mutation";
  deleteAlertNotification?: {
    __typename?: "AlertNotificationEntityResponse";
    data?: {
      __typename?: "AlertNotificationEntity";
      id?: string | null;
    } | null;
  } | null;
};

export type GetAlertNotificationByIdQueryVariables = Exact<{
  alertNotificationId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetAlertNotificationByIdQuery = {
  __typename?: "Query";
  alertNotification?: {
    __typename?: "AlertNotificationEntityResponse";
    data?: {
      __typename?: "AlertNotificationEntity";
      id?: string | null;
      attributes?: {
        __typename?: "AlertNotification";
        alertDescription: string;
        alertSmsMessage?: string | null;
        alertMailMessage?: string | null;
        alertTitle?: string | null;
        scheduledAt: any;
        scheduledAtTime: string;
        subject?: string | null;
        sendSMS?: boolean | null;
        sendMail?: boolean | null;
        sectorizations?: {
          __typename?: "SectorizationRelationResponseCollection";
          data: Array<{
            __typename?: "SectorizationEntity";
            id?: string | null;
            attributes?: { __typename?: "Sectorization"; name: string } | null;
          }>;
        } | null;
        cities?: {
          __typename?: "CityRelationResponseCollection";
          data: Array<{
            __typename?: "CityEntity";
            id?: string | null;
            attributes?: { __typename?: "City"; name?: string | null } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type GetAlertNotificationsByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  nowDate: Scalars["Date"];
  nowTime: Scalars["String"];
  filters: AlertNotificationFiltersInput;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
  pagination?: InputMaybe<PaginationArg>;
}>;

export type GetAlertNotificationsByContractIdQuery = {
  __typename?: "Query";
  sentCount?: {
    __typename?: "AlertNotificationEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
    data: Array<{
      __typename?: "AlertNotificationEntity";
      id?: string | null;
      attributes?: {
        __typename?: "AlertNotification";
        sendMail?: boolean | null;
        sendSMS?: boolean | null;
        scheduledAt: any;
        alertSmsMessage?: string | null;
        alertMailMessage?: string | null;
        alertDescription: string;
        scheduledAtTime: string;
      } | null;
    }>;
  } | null;
  notSentCount?: {
    __typename?: "AlertNotificationEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
    data: Array<{
      __typename?: "AlertNotificationEntity";
      id?: string | null;
      attributes?: {
        __typename?: "AlertNotification";
        sendMail?: boolean | null;
        sendSMS?: boolean | null;
        scheduledAt: any;
        alertSmsMessage?: string | null;
        alertMailMessage?: string | null;
        alertDescription: string;
        scheduledAtTime: string;
      } | null;
    }>;
  } | null;
  alertNotifications?: {
    __typename?: "AlertNotificationEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageSize: number;
        pageCount: number;
        total: number;
      };
    };
    data: Array<{
      __typename?: "AlertNotificationEntity";
      id?: string | null;
      attributes?: {
        __typename?: "AlertNotification";
        sendMail?: boolean | null;
        sendSMS?: boolean | null;
        scheduledAt: any;
        alertSmsMessage?: string | null;
        alertMailMessage?: string | null;
        alertDescription: string;
        scheduledAtTime: string;
      } | null;
    }>;
  } | null;
};

export type ProgrammedSendMutationVariables = Exact<{
  isEmail?: InputMaybe<Scalars["Boolean"]>;
  isSms?: InputMaybe<Scalars["Boolean"]>;
  mailSubject?: InputMaybe<Scalars["String"]>;
  smsTitle?: InputMaybe<Scalars["String"]>;
  alertSmsMessage?: InputMaybe<Scalars["String"]>;
  alertMailMessage?: InputMaybe<Scalars["String"]>;
  scheduledAt?: InputMaybe<Scalars["Date"]>;
  time?: InputMaybe<Scalars["String"]>;
  recipientEmails?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
  recipientnumbers?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
}>;

export type ProgrammedSendMutation = {
  __typename?: "Mutation";
  programmedSend?: string | null;
};

export type SendEmailMutationVariables = Exact<{
  subject?: InputMaybe<Scalars["String"]>;
  content?: InputMaybe<Scalars["String"]>;
  recipientEmails:
    | Array<InputMaybe<Scalars["String"]>>
    | InputMaybe<Scalars["String"]>;
}>;

export type SendEmailMutation = {
  __typename?: "Mutation";
  sendEmail?: string | null;
};

export type SendSmsMutationVariables = Exact<{
  content: Scalars["String"];
  scheduledAt?: InputMaybe<Scalars["String"]>;
  sendMultiple?: InputMaybe<Scalars["Boolean"]>;
  phoneNumber:
    | Array<InputMaybe<Scalars["String"]>>
    | InputMaybe<Scalars["String"]>;
}>;

export type SendSmsMutation = {
  __typename?: "Mutation";
  sendSMS?: string | null;
};

export type UpdateAlertNotificationByIdMutationVariables = Exact<{
  updateAlertNotificationId: Scalars["ID"];
  data: AlertNotificationInput;
}>;

export type UpdateAlertNotificationByIdMutation = {
  __typename?: "Mutation";
  updateAlertNotification?: {
    __typename?: "AlertNotificationEntityResponse";
    data?: {
      __typename?: "AlertNotificationEntity";
      id?: string | null;
      attributes?: {
        __typename?: "AlertNotification";
        alertUserStorages?: {
          __typename?: "AlertUserStorageRelationResponseCollection";
          data: Array<{
            __typename?: "AlertUserStorageEntity";
            attributes?: {
              __typename?: "AlertUserStorage";
              alertNotificationServiceId: string;
              email?: string | null;
              phoneNumber?: string | null;
              isSMS: boolean;
              isEmail: boolean;
            } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type CreateDropOffMapMutationVariables = Exact<{
  data: DropOffMapInput;
}>;

export type CreateDropOffMapMutation = {
  __typename?: "Mutation";
  createDropOffMap?: {
    __typename?: "DropOffMapEntityResponse";
    data?: {
      __typename?: "DropOffMapEntity";
      id?: string | null;
      attributes?: {
        __typename?: "DropOffMap";
        name?: string | null;
        address?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        phoneNumber?: string | null;
        mustKnow?: string | null;
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{ __typename?: "AudienceEntity"; id?: string | null }>;
        } | null;
        dropOffMapService?: {
          __typename?: "DropOffMapServiceEntityResponse";
          data?: {
            __typename?: "DropOffMapServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        collectDropOff?: {
          __typename?: "CollectDropOffEntityResponse";
          data?: {
            __typename?: "CollectDropOffEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectDropOff";
              name?: string | null;
            } | null;
          } | null;
        } | null;
        collectVoluntary?: {
          __typename?: "CollectVoluntaryEntityResponse";
          data?: {
            __typename?: "CollectVoluntaryEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectVoluntary";
              name?: string | null;
            } | null;
          } | null;
        } | null;
        downloadableFiles?: Array<{
          __typename?: "ComponentBlocksDownloadBlock";
          id: string;
          linkText: string;
          file: {
            __typename?: "UploadFileEntityResponse";
            data?: {
              __typename?: "UploadFileEntity";
              id?: string | null;
              attributes?: {
                __typename?: "UploadFile";
                name: string;
                alternativeText?: string | null;
                hash: string;
                mime: string;
                size: number;
                url: string;
                provider: string;
              } | null;
            } | null;
          };
        } | null> | null;
        openingHoursBlocks?: Array<
          | {
              __typename?: "ComponentBlocksOpeningDay";
              id: string;
              weekDay: Enum_Componentblocksopeningday_Weekday;
              morningStart?: any | null;
              morningEnd?: any | null;
              afterNoonStart?: any | null;
              afterNoonEnd?: any | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type DeleteDropOffMapByIdMutationVariables = Exact<{
  deleteDropOffMapId: Scalars["ID"];
}>;

export type DeleteDropOffMapByIdMutation = {
  __typename?: "Mutation";
  deleteDropOffMap?: {
    __typename?: "DropOffMapEntityResponse";
    data?: { __typename?: "DropOffMapEntity"; id?: string | null } | null;
  } | null;
};

export type GetDropOffMapByIdQueryVariables = Exact<{
  dropOffMapId: Scalars["ID"];
}>;

export type GetDropOffMapByIdQuery = {
  __typename?: "Query";
  dropOffMap?: {
    __typename?: "DropOffMapEntityResponse";
    data?: {
      __typename?: "DropOffMapEntity";
      id?: string | null;
      attributes?: {
        __typename?: "DropOffMap";
        name?: string | null;
        address?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        phoneNumber?: string | null;
        mustKnow?: string | null;
        hasCustomAddress?: boolean | null;
        customAddress?: string | null;
        wasteFormsStatus?: Enum_Dropoffmap_Wasteformsstatus | null;
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{
            __typename?: "AudienceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Audience";
              type: Enum_Audience_Type;
              isActive: boolean;
            } | null;
          }>;
        } | null;
        dropOffMapService?: {
          __typename?: "DropOffMapServiceEntityResponse";
          data?: {
            __typename?: "DropOffMapServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        collectDropOff?: {
          __typename?: "CollectDropOffEntityResponse";
          data?: {
            __typename?: "CollectDropOffEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectDropOff";
              name?: string | null;
            } | null;
          } | null;
        } | null;
        collectVoluntary?: {
          __typename?: "CollectVoluntaryEntityResponse";
          data?: {
            __typename?: "CollectVoluntaryEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectVoluntary";
              name?: string | null;
            } | null;
          } | null;
        } | null;
        downloadableFiles?: Array<{
          __typename?: "ComponentBlocksDownloadBlock";
          id: string;
          linkText: string;
          file: {
            __typename?: "UploadFileEntityResponse";
            data?: {
              __typename?: "UploadFileEntity";
              id?: string | null;
              attributes?: {
                __typename?: "UploadFile";
                name: string;
                alternativeText?: string | null;
                hash: string;
                mime: string;
                size: number;
                url: string;
                provider: string;
              } | null;
            } | null;
          };
        } | null> | null;
        openingHoursBlocks?: Array<
          | {
              __typename?: "ComponentBlocksOpeningDay";
              id: string;
              weekDay: Enum_Componentblocksopeningday_Weekday;
              morningStart?: any | null;
              morningEnd?: any | null;
              afterNoonStart?: any | null;
              afterNoonEnd?: any | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
        wasteFormsList?: {
          __typename?: "WasteFormRelationResponseCollection";
          data: Array<{
            __typename?: "WasteFormEntity";
            id?: string | null;
            attributes?: {
              __typename?: "WasteForm";
              name?: string | null;
            } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type GetDropOffMapsByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  address?: InputMaybe<Scalars["String"]>;
  collectDropOffId?: InputMaybe<Scalars["ID"]>;
  collectVoluntaryId?: InputMaybe<Scalars["ID"]>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
}>;

export type GetDropOffMapsByContractIdQuery = {
  __typename?: "Query";
  dropOffMaps?: {
    __typename?: "DropOffMapEntityResponseCollection";
    data: Array<{
      __typename?: "DropOffMapEntity";
      id?: string | null;
      attributes?: {
        __typename?: "DropOffMap";
        createdAt?: any | null;
        description?: string | null;
        name?: string | null;
        updatedAt?: any | null;
        address?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        city?: string | null;
        BANFeatureProperties?: any | null;
        collectDropOff?: {
          __typename?: "CollectDropOffEntityResponse";
          data?: {
            __typename?: "CollectDropOffEntity";
            attributes?: {
              __typename?: "CollectDropOff";
              name?: string | null;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    url: string;
                    name: string;
                    hash: string;
                    mime: string;
                    provider: string;
                    size: number;
                  } | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
        collectVoluntary?: {
          __typename?: "CollectVoluntaryEntityResponse";
          data?: {
            __typename?: "CollectVoluntaryEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectVoluntary";
              name?: string | null;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    name: string;
                    url: string;
                    hash: string;
                    mime: string;
                    provider: string;
                    size: number;
                  } | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        total: number;
        pageSize: number;
        page: number;
        pageCount: number;
      };
    };
  } | null;
};

export type UpdateDropOffMapByIdMutationVariables = Exact<{
  updateDropOffMapId: Scalars["ID"];
  data: DropOffMapInput;
}>;

export type UpdateDropOffMapByIdMutation = {
  __typename?: "Mutation";
  updateDropOffMap?: {
    __typename?: "DropOffMapEntityResponse";
    data?: {
      __typename?: "DropOffMapEntity";
      id?: string | null;
      attributes?: {
        __typename?: "DropOffMap";
        name?: string | null;
        address?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        phoneNumber?: string | null;
        mustKnow?: string | null;
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{ __typename?: "AudienceEntity"; id?: string | null }>;
        } | null;
        dropOffMapService?: {
          __typename?: "DropOffMapServiceEntityResponse";
          data?: {
            __typename?: "DropOffMapServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        collectDropOff?: {
          __typename?: "CollectDropOffEntityResponse";
          data?: {
            __typename?: "CollectDropOffEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectDropOff";
              name?: string | null;
            } | null;
          } | null;
        } | null;
        collectVoluntary?: {
          __typename?: "CollectVoluntaryEntityResponse";
          data?: {
            __typename?: "CollectVoluntaryEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectVoluntary";
              name?: string | null;
            } | null;
          } | null;
        } | null;
        downloadableFiles?: Array<{
          __typename?: "ComponentBlocksDownloadBlock";
          id: string;
          linkText: string;
          file: {
            __typename?: "UploadFileEntityResponse";
            data?: {
              __typename?: "UploadFileEntity";
              id?: string | null;
              attributes?: {
                __typename?: "UploadFile";
                name: string;
                alternativeText?: string | null;
                hash: string;
                mime: string;
                size: number;
                url: string;
                provider: string;
              } | null;
            } | null;
          };
        } | null> | null;
        openingHoursBlocks?: Array<
          | {
              __typename?: "ComponentBlocksOpeningDay";
              id: string;
              weekDay: Enum_Componentblocksopeningday_Weekday;
              morningStart?: any | null;
              morningEnd?: any | null;
              afterNoonStart?: any | null;
              afterNoonEnd?: any | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type CreateRequestMutationVariables = Exact<{
  data: RequestInput;
}>;

export type CreateRequestMutation = {
  __typename?: "Mutation";
  createRequest?: {
    __typename?: "RequestEntityResponse";
    data?: { __typename?: "RequestEntity"; id?: string | null } | null;
  } | null;
};

export type CreateRequestAggregateMutationVariables = Exact<{
  data: RequestAggregateInput;
}>;

export type CreateRequestAggregateMutation = {
  __typename?: "Mutation";
  createRequestAggregate?: {
    __typename?: "RequestAggregateEntityResponse";
    data?: {
      __typename?: "RequestAggregateEntity";
      id?: string | null;
      attributes?: {
        __typename?: "RequestAggregate";
        name: string;
        createdAt?: any | null;
        updatedAt?: any | null;
        requestService?: {
          __typename?: "RequestServiceEntityResponse";
          data?: {
            __typename?: "RequestServiceEntity";
            id?: string | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type DeleteRequestAggregateByIdMutationVariables = Exact<{
  deleteRequestAggregateId: Scalars["ID"];
}>;

export type DeleteRequestAggregateByIdMutation = {
  __typename?: "Mutation";
  deleteRequestAggregate?: {
    __typename?: "RequestAggregateEntityResponse";
    data?: { __typename?: "RequestAggregateEntity"; id?: string | null } | null;
  } | null;
};

export type DeleteRequestByIdMutationVariables = Exact<{
  deleteRequestId: Scalars["ID"];
}>;

export type DeleteRequestByIdMutation = {
  __typename?: "Mutation";
  deleteRequest?: {
    __typename?: "RequestEntityResponse";
    data?: { __typename?: "RequestEntity"; id?: string | null } | null;
  } | null;
};

export type DeleteRequestTakedByIdMutationVariables = Exact<{
  deleteRequestTakedId: Scalars["ID"];
}>;

export type DeleteRequestTakedByIdMutation = {
  __typename?: "Mutation";
  deleteRequestTaked?: {
    __typename?: "RequestTakedEntityResponse";
    data?: { __typename?: "RequestTakedEntity"; id?: string | null } | null;
  } | null;
};

export type GetAppointmentsDetailsByRequestIdQueryVariables = Exact<{
  requestId: Scalars["ID"];
}>;

export type GetAppointmentsDetailsByRequestIdQuery = {
  __typename?: "Query";
  getAppointmentsDetails?: {
    __typename?: "AppointmentDetails";
    title?: string | null;
    appointments?: Array<{
      __typename?: "Appointment";
      sectorNames?: Array<string | null> | null;
      timeSlotsWithUsers?: Array<{
        __typename?: "TimeSlotWithUser";
        date?: string | null;
        dynamic?: string | null;
        fixed?: string | null;
        slot?: string | null;
        requestTakeds?: Array<{
          __typename?: "RequestTakeds";
          id?: string | null;
          user?: {
            __typename?: "User";
            name?: string | null;
            surname?: string | null;
            phone?: string | null;
            email?: string | null;
          } | null;
        } | null> | null;
      } | null> | null;
    } | null> | null;
  } | null;
};

export type GetEnrichRequestsByRequestServiceIdQueryVariables = Exact<{
  requestServiceId: Scalars["ID"];
}>;

export type GetEnrichRequestsByRequestServiceIdQuery = {
  __typename?: "Query";
  getEnrichRequests?: Array<{
    __typename?: "EnrichRequest";
    requestName?: string | null;
    requestId?: string | null;
    dynamicAppointments?: number | null;
  } | null> | null;
};

export type GetRequestAggregatesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
}>;

export type GetRequestAggregatesByContractIdQuery = {
  __typename?: "Query";
  requestAggregates?: {
    __typename?: "RequestAggregateEntityResponseCollection";
    data: Array<{
      __typename?: "RequestAggregateEntity";
      id?: string | null;
      attributes?: {
        __typename?: "RequestAggregate";
        name: string;
        order?: number | null;
        requests?: {
          __typename?: "RequestRelationResponseCollection";
          data: Array<{ __typename?: "RequestEntity"; id?: string | null }>;
        } | null;
      } | null;
    }>;
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        total: number;
        page: number;
        pageSize: number;
        pageCount: number;
      };
    };
  } | null;
};

export type GetRequestByIdQueryVariables = Exact<{
  requestId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetRequestByIdQuery = {
  __typename?: "Query";
  request?: {
    __typename?: "RequestEntityResponse";
    data?: {
      __typename?: "RequestEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Request";
        name?: string | null;
        description?: string | null;
        blockText?: string | null;
        isActivated?: boolean | null;
        hasSeveralRequestTypes: boolean;
        hasAddress: boolean;
        fieldAddressLabel?: string | null;
        hasUser: boolean;
        displayUserCivility?: boolean | null;
        isUserNameMandatory?: boolean | null;
        isUserEmailMandatory?: boolean | null;
        isUserPhoneMandatory?: boolean | null;
        userAllowSMSNotification?: boolean | null;
        confirmationMessage?: string | null;
        sendProofOfReceipt?: boolean | null;
        proofOfReceiptSubject?: string | null;
        proofOfReceiptHeader?: string | null;
        hasAppointmentSlots?: boolean | null;
        numberOfRequiredSlots?: number | null;
        hoursBeforeReservationIsActivated?: number | null;
        slotsReservationRules?: any | null;
        requestService?: {
          __typename?: "RequestServiceEntityResponse";
          data?: {
            __typename?: "RequestServiceEntity";
            id?: string | null;
          } | null;
        } | null;
        requestAggregate?: {
          __typename?: "RequestAggregateEntityResponse";
          data?: {
            __typename?: "RequestAggregateEntity";
            id?: string | null;
            attributes?: {
              __typename?: "RequestAggregate";
              name: string;
            } | null;
          } | null;
        } | null;
        requestType?: Array<{
          __typename?: "ComponentBlocksRequestType";
          id: string;
          title: string;
          isEmail?: boolean | null;
          email?: string | null;
          isTSMS?: boolean | null;
        } | null> | null;
        addableBlocks?: Array<
          | {
              __typename?: "ComponentBlocksAttachments";
              id: string;
              attachmentLabel: string;
              isMandatory: boolean;
              multipleAttachments?: boolean | null;
            }
          | {
              __typename?: "ComponentBlocksCheckbox";
              id: string;
              fieldStatusCheckbox: Enum_Componentblockscheckbox_Fieldstatuscheckbox;
              labelCheckbox: string;
            }
          | {
              __typename?: "ComponentBlocksCommentary";
              id: string;
              commentaryStatus: Enum_Componentblockscommentary_Commentarystatus;
              commentaryLabel: string;
              commentaryPlaceholder?: string | null;
            }
          | {
              __typename?: "ComponentBlocksCumbersome";
              id: string;
              cumbersomeLabel: string;
              maxVolumeOfCumbersome?: number | null;
              maxNumberOfCumbersome?: number | null;
              isNumberAndVolume: boolean;
              cumbersomeLimitMessage: string;
            }
          | {
              __typename?: "ComponentBlocksDateChoice";
              id: string;
              fieldStatus: Enum_Componentblocksdatechoice_Fieldstatus;
              fieldLabelDateChoice: string;
            }
          | {
              __typename?: "ComponentBlocksQcm";
              id: string;
              fieldStatusQCM: Enum_Componentblocksqcm_Fieldstatusqcm;
              fieldLabelQCM: string;
              responses: string;
              multipleChoice: boolean;
            }
          | {
              __typename?: "ComponentBlocksQuestions";
              id: string;
              height: boolean;
              questionTextLabel: string;
              questionTextPlaceholder: string;
              textStatus: Enum_Componentblocksquestions_Textstatus;
            }
          | { __typename?: "Error" }
          | null
        > | null;
        requestSlots?: {
          __typename?: "RequestSlotRelationResponseCollection";
          data: Array<{
            __typename?: "RequestSlotEntity";
            id?: string | null;
            attributes?: {
              __typename?: "RequestSlot";
              slotType?: Enum_Requestslot_Slottype | null;
              timeSlots?: any | null;
              slotMessage?: string | null;
              noSlotMessage?: string | null;
              sectorizations?: {
                __typename?: "SectorizationRelationResponseCollection";
                data: Array<{
                  __typename?: "SectorizationEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "Sectorization";
                    name: string;
                    description: string;
                    polygonCoordinates?: any | null;
                  } | null;
                }>;
              } | null;
              slotsExceptions?: Array<{
                __typename?: "ComponentBlocksRequestSlotsExceptions";
                exceptionType?: Enum_Componentblocksrequestslotsexceptions_Exceptiontype | null;
                id: string;
                slotException?: any | null;
              } | null> | null;
              requestTakeds?: {
                __typename?: "RequestTakedRelationResponseCollection";
                data: Array<{
                  __typename?: "RequestTakedEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "RequestTaked";
                    name: string;
                    isActivated?: boolean | null;
                  } | null;
                }>;
              } | null;
            } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type GetRequestsByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
}>;

export type GetRequestsByContractIdQuery = {
  __typename?: "Query";
  requests?: {
    __typename?: "RequestEntityResponseCollection";
    data: Array<{
      __typename?: "RequestEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Request";
        name?: string | null;
        isActivated?: boolean | null;
        hasSeveralRequestTypes: boolean;
        updatedAt?: any | null;
        createdAt?: any | null;
        requestType?: Array<{
          __typename?: "ComponentBlocksRequestType";
          email?: string | null;
          id: string;
          title: string;
          isEmail?: boolean | null;
          isTSMS?: boolean | null;
        } | null> | null;
      } | null;
    }>;
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageCount: number;
        pageSize: number;
        total: number;
      };
    };
  } | null;
};

export type CreateRequestSlotMutationVariables = Exact<{
  data: RequestSlotInput;
}>;

export type CreateRequestSlotMutation = {
  __typename?: "Mutation";
  createRequestSlot?: {
    __typename?: "RequestSlotEntityResponse";
    data?: {
      __typename?: "RequestSlotEntity";
      id?: string | null;
      attributes?: {
        __typename?: "RequestSlot";
        slotType?: Enum_Requestslot_Slottype | null;
        timeSlots?: any | null;
        slotMessage?: string | null;
        noSlotMessage?: string | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        sectorizations?: {
          __typename?: "SectorizationRelationResponseCollection";
          data: Array<{
            __typename?: "SectorizationEntity";
            id?: string | null;
          }>;
        } | null;
        slotsExceptions?: Array<{
          __typename?: "ComponentBlocksRequestSlotsExceptions";
          id: string;
          slotException?: any | null;
          exceptionType?: Enum_Componentblocksrequestslotsexceptions_Exceptiontype | null;
        } | null> | null;
      } | null;
    } | null;
  } | null;
};

export type DeleteRequestSlotByIdMutationVariables = Exact<{
  id: Scalars["ID"];
}>;

export type DeleteRequestSlotByIdMutation = {
  __typename?: "Mutation";
  deleteRequestSlot?: {
    __typename?: "RequestSlotEntityResponse";
    data?: { __typename?: "RequestSlotEntity"; id?: string | null } | null;
  } | null;
};

export type UpdateRequestSlotByIdMutationVariables = Exact<{
  id: Scalars["ID"];
  data: RequestSlotInput;
}>;

export type UpdateRequestSlotByIdMutation = {
  __typename?: "Mutation";
  updateRequestSlot?: {
    __typename?: "RequestSlotEntityResponse";
    data?: {
      __typename?: "RequestSlotEntity";
      id?: string | null;
      attributes?: {
        __typename?: "RequestSlot";
        slotType?: Enum_Requestslot_Slottype | null;
        timeSlots?: any | null;
        slotMessage?: string | null;
        noSlotMessage?: string | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        sectorizations?: {
          __typename?: "SectorizationRelationResponseCollection";
          data: Array<{
            __typename?: "SectorizationEntity";
            id?: string | null;
          }>;
        } | null;
        slotsExceptions?: Array<{
          __typename?: "ComponentBlocksRequestSlotsExceptions";
          id: string;
          slotException?: any | null;
          exceptionType?: Enum_Componentblocksrequestslotsexceptions_Exceptiontype | null;
        } | null> | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateRequestAggregateByIdMutationVariables = Exact<{
  updateRequestAggregateId: Scalars["ID"];
  data: RequestAggregateInput;
}>;

export type UpdateRequestAggregateByIdMutation = {
  __typename?: "Mutation";
  updateRequestAggregate?: {
    __typename?: "RequestAggregateEntityResponse";
    data?: {
      __typename?: "RequestAggregateEntity";
      id?: string | null;
      attributes?: { __typename?: "RequestAggregate"; name: string } | null;
    } | null;
  } | null;
};

export type UpdateRequestAggregateOrderMutationVariables = Exact<{
  requestAggregateOrder:
    | Array<InputMaybe<Scalars["ID"]>>
    | InputMaybe<Scalars["ID"]>;
}>;

export type UpdateRequestAggregateOrderMutation = {
  __typename?: "Mutation";
  updateRequestAggregateOrder?: Array<{
    __typename?: "OrderRequestAggregate";
    oid?: string | null;
  } | null> | null;
};

export type UpdateRequestByIdMutationVariables = Exact<{
  updateRequestId: Scalars["ID"];
  data: RequestInput;
}>;

export type UpdateRequestByIdMutation = {
  __typename?: "Mutation";
  updateRequest?: {
    __typename?: "RequestEntityResponse";
    data?: { __typename?: "RequestEntity"; id?: string | null } | null;
  } | null;
};

export type GetWasteFamiliesByContractIdQueryVariables = Exact<{
  contractId?: InputMaybe<Scalars["ID"]>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
}>;

export type GetWasteFamiliesByContractIdQuery = {
  __typename?: "Query";
  recyclingGuideService?: {
    __typename?: "RecyclingGuideServiceEntityResponse";
    data?: {
      __typename?: "RecyclingGuideServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "RecyclingGuideService";
        wasteFamilies?: {
          __typename?: "WasteFamilyRelationResponseCollection";
          data: Array<{
            __typename?: "WasteFamilyEntity";
            id?: string | null;
            attributes?: {
              __typename?: "WasteFamily";
              familyName: string;
              isSystem: boolean;
              wasteForms?: {
                __typename?: "WasteFormRelationResponseCollection";
                data: Array<{
                  __typename?: "WasteFormEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "WasteForm";
                    name?: string | null;
                  } | null;
                }>;
              } | null;
            } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type UpdateWasteFamilyByIdMutationVariables = Exact<{
  updateWasteFamilyId: Scalars["ID"];
  data: WasteFamilyInput;
}>;

export type UpdateWasteFamilyByIdMutation = {
  __typename?: "Mutation";
  updateWasteFamily?: {
    __typename?: "WasteFamilyEntityResponse";
    data?: {
      __typename?: "WasteFamilyEntity";
      id?: string | null;
      attributes?: {
        __typename?: "WasteFamily";
        familyName: string;
        createdAt?: any | null;
        updatedAt?: any | null;
        isSystem: boolean;
      } | null;
    } | null;
  } | null;
};

export type GetActiveFlowsByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetActiveFlowsByContractIdQuery = {
  __typename?: "Query";
  flows?: {
    __typename?: "FlowEntityResponseCollection";
    data: Array<{
      __typename?: "FlowEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Flow";
        name?: string | null;
        recyclingGesture: Enum_Flow_Recyclinggesture;
      } | null;
    }>;
  } | null;
};

export type GetAllVersionsOfWasteFormByCustomIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  customId?: InputMaybe<Scalars["String"]>;
  statusFilter?: InputMaybe<StringFilterInput>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
  pagination?: InputMaybe<PaginationArg>;
}>;

export type GetAllVersionsOfWasteFormByCustomIdQuery = {
  __typename?: "Query";
  wasteFormsCount?: {
    __typename?: "WasteFormEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  wasteFormsCountDraft?: {
    __typename?: "WasteFormEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  wasteFormsCountPublished?: {
    __typename?: "WasteFormEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  wasteFormsCountArchived?: {
    __typename?: "WasteFormEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  wasteForms?: {
    __typename?: "WasteFormEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageSize: number;
        pageCount: number;
        total: number;
      };
    };
    data: Array<{
      __typename?: "WasteFormEntity";
      id?: string | null;
      attributes?: {
        __typename?: "WasteForm";
        versionNumber?: number | null;
        status?: Enum_Wasteform_Status | null;
        publishedDate?: any | null;
        updatedAt?: any | null;
      } | null;
    }>;
  } | null;
};

export type GetWasteFormByIdQueryVariables = Exact<{
  wasteFormId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetWasteFormByIdQuery = {
  __typename?: "Query";
  wasteForm?: {
    __typename?: "WasteFormEntityResponse";
    data?: {
      __typename?: "WasteFormEntity";
      id?: string | null;
      attributes?: {
        __typename?: "WasteForm";
        customId?: string | null;
        name?: string | null;
        updatedAt?: any | null;
        status?: Enum_Wasteform_Status | null;
        createdAt?: any | null;
        publishedDate?: any | null;
        unpublishedDate?: any | null;
        versionNumber?: number | null;
        draftCreationId?: string | null;
        isHidden?: boolean | null;
        recyclingGestureText?: string | null;
        tags?: {
          __typename?: "TagRelationResponseCollection";
          data: Array<{
            __typename?: "TagEntity";
            id?: string | null;
            attributes?: { __typename?: "Tag"; name: string } | null;
          }>;
        } | null;
        flow?: {
          __typename?: "FlowEntityResponse";
          data?: {
            __typename?: "FlowEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Flow";
              name?: string | null;
              recyclingGesture: Enum_Flow_Recyclinggesture;
            } | null;
          } | null;
        } | null;
        picto?: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              createdAt?: any | null;
              ext?: string | null;
              width?: number | null;
              height?: number | null;
            } | null;
          } | null;
        } | null;
        wasteFamily?: {
          __typename?: "WasteFamilyEntityResponse";
          data?: {
            __typename?: "WasteFamilyEntity";
            id?: string | null;
            attributes?: {
              __typename?: "WasteFamily";
              familyName: string;
              isSystem: boolean;
              createdAt?: any | null;
              updatedAt?: any | null;
            } | null;
          } | null;
        } | null;
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{
            __typename?: "AudienceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Audience";
              type: Enum_Audience_Type;
              isActive: boolean;
            } | null;
          }>;
        } | null;
        contentBlock?: Array<
          | {
              __typename?: "ComponentBlocksFile";
              id: string;
              document?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksHorizontalRule";
              hr?: string | null;
              id: string;
            }
          | {
              __typename?: "ComponentBlocksImage";
              id: string;
              altText?: string | null;
              isDecorative?: boolean | null;
              picture?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "UploadFile";
                    hash: string;
                    mime: string;
                    name: string;
                    provider: string;
                    size: number;
                    url: string;
                    alternativeText?: string | null;
                    createdAt?: any | null;
                    ext?: string | null;
                    width?: number | null;
                    height?: number | null;
                  } | null;
                } | null;
              } | null;
            }
          | {
              __typename?: "ComponentBlocksServices";
              id: string;
              serviceLinksData?: any | null;
            }
          | {
              __typename?: "ComponentBlocksSubHeading";
              id: string;
              subHeadingTag?: Enum_Componentblockssubheading_Subheadingtag | null;
              subHeadingText?: string | null;
            }
          | {
              __typename?: "ComponentBlocksVideo";
              id: string;
              transcriptText?: string | null;
              videoLink?: string | null;
            }
          | {
              __typename?: "ComponentBlocksWysiwyg";
              id: string;
              textEditor?: string | null;
            }
          | { __typename?: "Error" }
          | null
        > | null;
      } | null;
    } | null;
  } | null;
};

export type GetWasteFormsByContractIdQueryVariables = Exact<{
  contractId?: InputMaybe<Scalars["ID"]>;
  statusFilter?: InputMaybe<Scalars["String"]>;
  flowId?: InputMaybe<Scalars["ID"]>;
  name?: InputMaybe<Scalars["String"]>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
  pagination?: InputMaybe<PaginationArg>;
}>;

export type GetWasteFormsByContractIdQuery = {
  __typename?: "Query";
  wasteFormsCount?: {
    __typename?: "WasteFormEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  wasteFormsDraftCount?: {
    __typename?: "WasteFormEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  wasteFormsPublishedCount?: {
    __typename?: "WasteFormEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  wasteFormsArchivedCount?: {
    __typename?: "WasteFormEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: { __typename?: "Pagination"; total: number };
    };
  } | null;
  wasteForms?: {
    __typename?: "WasteFormEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageSize: number;
        pageCount: number;
        total: number;
      };
    };
    data: Array<{
      __typename?: "WasteFormEntity";
      id?: string | null;
      attributes?: {
        __typename?: "WasteForm";
        name?: string | null;
        status?: Enum_Wasteform_Status | null;
        updatedAt?: any | null;
        isHidden?: boolean | null;
      } | null;
    }>;
  } | null;
};

export type GetWasteFormsDraftByCustomIdQueryVariables = Exact<{
  customId: Scalars["String"];
}>;

export type GetWasteFormsDraftByCustomIdQuery = {
  __typename?: "Query";
  wasteForms?: {
    __typename?: "WasteFormEntityResponseCollection";
    data: Array<{ __typename?: "WasteFormEntity"; id?: string | null }>;
  } | null;
};

export type UpdateWasteFormByIdMutationVariables = Exact<{
  updateWasteFormId: Scalars["ID"];
  data: WasteFormInput;
}>;

export type UpdateWasteFormByIdMutation = {
  __typename?: "Mutation";
  versioningHandler?: {
    __typename?: "VersioningEntityResponse";
    data?:
      | { __typename?: "EventEntity" }
      | { __typename?: "FreeContentEntity" }
      | { __typename?: "NewEntity" }
      | { __typename?: "QuizEntity" }
      | { __typename?: "TipEntity" }
      | {
          __typename?: "WasteFormEntity";
          id?: string | null;
          attributes?: {
            __typename?: "WasteForm";
            customId?: string | null;
            isHidden?: boolean | null;
            audiences?: {
              __typename?: "AudienceRelationResponseCollection";
              data: Array<{
                __typename?: "AudienceEntity";
                id?: string | null;
              }>;
            } | null;
          } | null;
        }
      | null;
  } | null;
};

export type GetRecyclingGuideServiceByIdQueryVariables = Exact<{
  recyclingGuideServiceId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetRecyclingGuideServiceByIdQuery = {
  __typename?: "Query";
  recyclingGuideService?: {
    __typename?: "RecyclingGuideServiceEntityResponse";
    data?: {
      __typename?: "RecyclingGuideServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "RecyclingGuideService";
        orderExtension?: boolean | null;
        memoName: string;
        memoDesc?: string | null;
        memoFile?: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              ext?: string | null;
              height?: number | null;
              width?: number | null;
              createdAt?: any | null;
            } | null;
          } | null;
        } | null;
        memoPreview?: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              hash: string;
              mime: string;
              name: string;
              provider: string;
              size: number;
              url: string;
              alternativeText?: string | null;
              ext?: string | null;
              height?: number | null;
              width?: number | null;
              createdAt?: any | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type GetRecyclingGuideServicesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetRecyclingGuideServicesByContractIdQuery = {
  __typename?: "Query";
  recyclingGuideServices?: {
    __typename?: "RecyclingGuideServiceEntityResponseCollection";
    data: Array<{
      __typename?: "RecyclingGuideServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "RecyclingGuideService";
        name: string;
        endDate?: any | null;
        memoName: string;
        memoDesc?: string | null;
        isActivated: boolean;
        orderExtension?: boolean | null;
        wasteFamilies?: {
          __typename?: "WasteFamilyRelationResponseCollection";
          data: Array<{
            __typename?: "WasteFamilyEntity";
            id?: string | null;
            attributes?: {
              __typename?: "WasteFamily";
              createdAt?: any | null;
              familyName: string;
              isSystem: boolean;
              updatedAt?: any | null;
              wasteForms?: {
                __typename?: "WasteFormRelationResponseCollection";
                data: Array<{
                  __typename?: "WasteFormEntity";
                  id?: string | null;
                  attributes?: {
                    __typename?: "WasteForm";
                    name?: string | null;
                  } | null;
                }>;
              } | null;
            } | null;
          }>;
        } | null;
        memoFile?: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              name: string;
              hash: string;
              mime: string;
              size: number;
              url: string;
              provider: string;
            } | null;
          } | null;
        } | null;
        memoPreview?: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              name: string;
              hash: string;
              mime: string;
              size: number;
              url: string;
              provider: string;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
  } | null;
};

export type CreateInformationMessageMutationVariables = Exact<{
  data: InformationMessageInput;
}>;

export type CreateInformationMessageMutation = {
  __typename?: "Mutation";
  createInformationMessage?: {
    __typename?: "InformationMessageEntityResponse";
    data?: {
      __typename?: "InformationMessageEntity";
      id?: string | null;
      attributes?: {
        __typename?: "InformationMessage";
        dateStart: string;
        infoMessage: string;
        dateEnd?: string | null;
        pickUpDays?: {
          __typename?: "PickUpDayRelationResponseCollection";
          data: Array<{ __typename?: "PickUpDayEntity"; id?: string | null }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type CreatePickUpDayMutationVariables = Exact<{
  data: PickUpDayInput;
}>;

export type CreatePickUpDayMutation = {
  __typename?: "Mutation";
  createPickUpDay?: {
    __typename?: "PickUpDayEntityResponse";
    data?: {
      __typename?: "PickUpDayEntity";
      id?: string | null;
      attributes?: {
        __typename?: "PickUpDay";
        name: string;
        description?: string | null;
        periodicity?: Enum_Pickupday_Periodicity | null;
        advancedSelection: any;
        pickUpHours?: string | null;
        includeHoliday: boolean;
        complementaryMention?: string | null;
        createdAt?: any | null;
        updatedAt?: any | null;
        buttonLabel?: string | null;
        externalLink?: string | null;
        request?: {
          __typename?: "RequestEntityResponse";
          data?: { __typename?: "RequestEntity"; id?: string | null } | null;
        } | null;
        flow: {
          __typename?: "FlowEntityResponse";
          data?: {
            __typename?: "FlowEntity";
            id?: string | null;
            attributes?: { __typename?: "Flow"; name?: string | null } | null;
          } | null;
        };
        pickUpDayService?: {
          __typename?: "PickUpDayServiceEntityResponse";
          data?: {
            __typename?: "PickUpDayServiceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "PickUpDayService";
              name: string;
            } | null;
          } | null;
        } | null;
        sectorizations?: {
          __typename?: "SectorizationRelationResponseCollection";
          data: Array<{
            __typename?: "SectorizationEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Sectorization";
              name: string;
              description: string;
              polygonCoordinates?: any | null;
            } | null;
          }>;
        } | null;
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{ __typename?: "AudienceEntity"; id?: string | null }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type DeletePickUpDayByIdMutationVariables = Exact<{
  deletePickUpDayId: Scalars["ID"];
}>;

export type DeletePickUpDayByIdMutation = {
  __typename?: "Mutation";
  deletePickUpDay?: {
    __typename?: "PickUpDayEntityResponse";
    data?: { __typename?: "PickUpDayEntity"; id?: string | null } | null;
  } | null;
};

export type GetActiveRequestsByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetActiveRequestsByContractIdQuery = {
  __typename?: "Query";
  requests?: {
    __typename?: "RequestEntityResponseCollection";
    data: Array<{
      __typename?: "RequestEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Request";
        name?: string | null;
        isActivated?: boolean | null;
        hasSeveralRequestTypes: boolean;
        hasAddress: boolean;
        hasUser: boolean;
      } | null;
    }>;
  } | null;
};

export type GetCollectDoorToDoorsByFlowIdQueryVariables = Exact<{
  flowId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetCollectDoorToDoorsByFlowIdQuery = {
  __typename?: "Query";
  collectDoorToDoors?: {
    __typename?: "CollectDoorToDoorEntityResponseCollection";
    data: Array<{
      __typename?: "CollectDoorToDoorEntity";
      id?: string | null;
      attributes?: {
        __typename?: "CollectDoorToDoor";
        name?: string | null;
      } | null;
    }>;
  } | null;
};

export type GetCollectVoluntariesByFlowIdQueryVariables = Exact<{
  flowId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetCollectVoluntariesByFlowIdQuery = {
  __typename?: "Query";
  collectVoluntaries?: {
    __typename?: "CollectVoluntaryEntityResponseCollection";
    data: Array<{
      __typename?: "CollectVoluntaryEntity";
      id?: string | null;
      attributes?: {
        __typename?: "CollectVoluntary";
        name?: string | null;
      } | null;
    }>;
  } | null;
};

export type GetDropOffCollectTypeByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
}>;

export type GetDropOffCollectTypeByContractIdQuery = {
  __typename?: "Query";
  getDropOffCollectType?: Array<{
    __typename?: "CollectEntity";
    entityTypeName: string;
    uniqueId: string;
    grammaticalGender: string;
    name: string;
    originalId: string;
  } | null> | null;
};

export type GetActiveFlowsByContractAndCityAndSectorizationsQueryVariables =
  Exact<{
    contractId?: InputMaybe<Scalars["ID"]>;
    sectorizationsId?: InputMaybe<
      Array<InputMaybe<Scalars["ID"]>> | InputMaybe<Scalars["ID"]>
    >;
    citiesId?: InputMaybe<
      Array<InputMaybe<Scalars["ID"]>> | InputMaybe<Scalars["ID"]>
    >;
  }>;

export type GetActiveFlowsByContractAndCityAndSectorizationsQuery = {
  __typename?: "Query";
  flows?: {
    __typename?: "FlowEntityResponseCollection";
    data: Array<{
      __typename?: "FlowEntity";
      id?: string | null;
      attributes?: {
        __typename?: "Flow";
        name?: string | null;
        pickUpDays?: {
          __typename?: "PickUpDayRelationResponseCollection";
          data: Array<{ __typename?: "PickUpDayEntity"; id?: string | null }>;
        } | null;
      } | null;
    }>;
  } | null;
};

export type GetInformationMessageByIdQueryVariables = Exact<{
  informationMessageId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetInformationMessageByIdQuery = {
  __typename?: "Query";
  informationMessage?: {
    __typename?: "InformationMessageEntityResponse";
    data?: {
      __typename?: "InformationMessageEntity";
      id?: string | null;
      attributes?: {
        __typename?: "InformationMessage";
        dateStart: string;
        dateEnd?: string | null;
        infoMessage: string;
        pickUpDays?: {
          __typename?: "PickUpDayRelationResponseCollection";
          data: Array<{
            __typename?: "PickUpDayEntity";
            id?: string | null;
            attributes?: { __typename?: "PickUpDay"; name: string } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type GetInformationMessagesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  pickUpDaysId?: InputMaybe<Scalars["ID"]>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
}>;

export type GetInformationMessagesByContractIdQuery = {
  __typename?: "Query";
  informationMessages?: {
    __typename?: "InformationMessageEntityResponseCollection";
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageCount: number;
        pageSize: number;
        total: number;
      };
    };
    data: Array<{
      __typename?: "InformationMessageEntity";
      id?: string | null;
      attributes?: {
        __typename?: "InformationMessage";
        infoMessage: string;
        pickUpDays?: {
          __typename?: "PickUpDayRelationResponseCollection";
          data: Array<{
            __typename?: "PickUpDayEntity";
            id?: string | null;
            attributes?: { __typename?: "PickUpDay"; name: string } | null;
          }>;
        } | null;
      } | null;
    }>;
  } | null;
};

export type GetPickUpDayByIdQueryVariables = Exact<{
  pickUpDayId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetPickUpDayByIdQuery = {
  __typename?: "Query";
  pickUpDay?: {
    __typename?: "PickUpDayEntityResponse";
    data?: {
      __typename?: "PickUpDayEntity";
      id?: string | null;
      attributes?: {
        __typename?: "PickUpDay";
        name: string;
        periodicity?: Enum_Pickupday_Periodicity | null;
        advancedSelection: any;
        pickUpHours?: string | null;
        includeHoliday: boolean;
        complementaryMention?: string | null;
        buttonLabel?: string | null;
        externalLink?: string | null;
        request?: {
          __typename?: "RequestEntityResponse";
          data?: { __typename?: "RequestEntity"; id?: string | null } | null;
        } | null;
        flow: {
          __typename?: "FlowEntityResponse";
          data?: {
            __typename?: "FlowEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Flow";
              name?: string | null;
              recyclingGesture: Enum_Flow_Recyclinggesture;
            } | null;
          } | null;
        };
        sectorizations?: {
          __typename?: "SectorizationRelationResponseCollection";
          data: Array<{
            __typename?: "SectorizationEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Sectorization";
              name: string;
              description: string;
              polygonCoordinates?: any | null;
            } | null;
          }>;
        } | null;
        cities?: {
          __typename?: "CityRelationResponseCollection";
          data: Array<{
            __typename?: "CityEntity";
            id?: string | null;
            attributes?: { __typename?: "City"; name?: string | null } | null;
          }>;
        } | null;
        collectDoorToDoor?: {
          __typename?: "CollectDoorToDoorEntityResponse";
          data?: {
            __typename?: "CollectDoorToDoorEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectDoorToDoor";
              name?: string | null;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
        collectVoluntary?: {
          __typename?: "CollectVoluntaryEntityResponse";
          data?: {
            __typename?: "CollectVoluntaryEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectVoluntary";
              name?: string | null;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{
            __typename?: "AudienceEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Audience";
              type: Enum_Audience_Type;
              isActive: boolean;
            } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type GetPickUpDaysByContractIdQueryVariables = Exact<{
  contractId?: InputMaybe<Scalars["ID"]>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
  pagination?: InputMaybe<PaginationArg>;
}>;

export type GetPickUpDaysByContractIdQuery = {
  __typename?: "Query";
  pickUpDays?: {
    __typename?: "PickUpDayEntityResponseCollection";
    data: Array<{
      __typename?: "PickUpDayEntity";
      id?: string | null;
      attributes?: {
        __typename?: "PickUpDay";
        name: string;
        updatedAt?: any | null;
        cities?: {
          __typename?: "CityRelationResponseCollection";
          data: Array<{
            __typename?: "CityEntity";
            id?: string | null;
            attributes?: { __typename?: "City"; name?: string | null } | null;
          }>;
        } | null;
        collectDoorToDoor?: {
          __typename?: "CollectDoorToDoorEntityResponse";
          data?: {
            __typename?: "CollectDoorToDoorEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectDoorToDoor";
              name?: string | null;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
        collectVoluntary?: {
          __typename?: "CollectVoluntaryEntityResponse";
          data?: {
            __typename?: "CollectVoluntaryEntity";
            id?: string | null;
            attributes?: {
              __typename?: "CollectVoluntary";
              name?: string | null;
              picto?: {
                __typename?: "UploadFileEntityResponse";
                data?: {
                  __typename?: "UploadFileEntity";
                  id?: string | null;
                } | null;
              } | null;
            } | null;
          } | null;
        } | null;
        flow: {
          __typename?: "FlowEntityResponse";
          data?: {
            __typename?: "FlowEntity";
            attributes?: { __typename?: "Flow"; name?: string | null } | null;
          } | null;
        };
        sectorizations?: {
          __typename?: "SectorizationRelationResponseCollection";
          data: Array<{
            __typename?: "SectorizationEntity";
            attributes?: { __typename?: "Sectorization"; name: string } | null;
          }>;
        } | null;
      } | null;
    }>;
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageCount: number;
        pageSize: number;
        total: number;
      };
    };
  } | null;
};

export type GetSearchCitiesByContractIdQueryVariables = Exact<{
  searchTerm: Scalars["String"];
  contractId: Scalars["ID"];
}>;

export type GetSearchCitiesByContractIdQuery = {
  __typename?: "Query";
  searchCities?: Array<{
    __typename?: "CityResult";
    id: string;
    name?: string | null;
  } | null> | null;
};

export type GetSectorizationsPickUpDayByContractIdQueryVariables = Exact<{
  contractId?: InputMaybe<Scalars["ID"]>;
}>;

export type GetSectorizationsPickUpDayByContractIdQuery = {
  __typename?: "Query";
  sectorizations?: {
    __typename?: "SectorizationEntityResponseCollection";
    data: Array<{
      __typename?: "SectorizationEntity";
      id?: string | null;
      attributes?: { __typename?: "Sectorization"; name: string } | null;
    }>;
  } | null;
};

export type UpdateInformationMessageByIdMutationVariables = Exact<{
  updateInformationMessageId: Scalars["ID"];
  data: InformationMessageInput;
}>;

export type UpdateInformationMessageByIdMutation = {
  __typename?: "Mutation";
  updateInformationMessage?: {
    __typename?: "InformationMessageEntityResponse";
    data?: {
      __typename?: "InformationMessageEntity";
      id?: string | null;
      attributes?: {
        __typename?: "InformationMessage";
        infoMessage: string;
        dateStart: string;
        dateEnd?: string | null;
        pickUpDays?: {
          __typename?: "PickUpDayRelationResponseCollection";
          data: Array<{
            __typename?: "PickUpDayEntity";
            id?: string | null;
            attributes?: { __typename?: "PickUpDay"; name: string } | null;
          }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type UpdatePickUpDayByIdMutationVariables = Exact<{
  updatePickUpDayId: Scalars["ID"];
  data: PickUpDayInput;
}>;

export type UpdatePickUpDayByIdMutation = {
  __typename?: "Mutation";
  updatePickUpDay?: {
    __typename?: "PickUpDayEntityResponse";
    data?: {
      __typename?: "PickUpDayEntity";
      id?: string | null;
      attributes?: {
        __typename?: "PickUpDay";
        name: string;
        description?: string | null;
        periodicity?: Enum_Pickupday_Periodicity | null;
        advancedSelection: any;
        pickUpHours?: string | null;
        includeHoliday: boolean;
        complementaryMention?: string | null;
        buttonLabel?: string | null;
        externalLink?: string | null;
        request?: {
          __typename?: "RequestEntityResponse";
          data?: { __typename?: "RequestEntity"; id?: string | null } | null;
        } | null;
        flow: {
          __typename?: "FlowEntityResponse";
          data?: {
            __typename?: "FlowEntity";
            id?: string | null;
            attributes?: { __typename?: "Flow"; name?: string | null } | null;
          } | null;
        };
        sectorizations?: {
          __typename?: "SectorizationRelationResponseCollection";
          data: Array<{
            __typename?: "SectorizationEntity";
            id?: string | null;
            attributes?: {
              __typename?: "Sectorization";
              name: string;
              description: string;
              polygonCoordinates?: any | null;
            } | null;
          }>;
        } | null;
        audiences?: {
          __typename?: "AudienceRelationResponseCollection";
          data: Array<{ __typename?: "AudienceEntity"; id?: string | null }>;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type CreateYwsFormMutationVariables = Exact<{
  data: YesWeScanFormInput;
}>;

export type CreateYwsFormMutation = {
  __typename?: "Mutation";
  createYesWeScanForm?: {
    __typename?: "YesWeScanFormEntityResponse";
    data?: { __typename?: "YesWeScanFormEntity"; id?: string | null } | null;
  } | null;
};

export type CreateYwsQrCodeMutationVariables = Exact<{
  data: YesWeScanQrCodeInput;
}>;

export type CreateYwsQrCodeMutation = {
  __typename?: "Mutation";
  createYesWeScanQrCode?: {
    __typename?: "YesWeScanQrCodeEntityResponse";
    data?: { __typename?: "YesWeScanQrCodeEntity"; id?: string | null } | null;
  } | null;
};

export type GetYwsFormByIdQueryVariables = Exact<{
  ywsFormId: Scalars["ID"];
}>;

export type GetYwsFormByIdQuery = {
  __typename?: "Query";
  yesWeScanForm?: {
    __typename?: "YesWeScanFormEntityResponse";
    data?: {
      __typename?: "YesWeScanFormEntity";
      id?: string | null;
      attributes?: {
        __typename?: "YesWeScanForm";
        reportButtons: string;
        pictureStatus: Enum_Yeswescanform_Picturestatus;
        thankYouMessage: string;
        displayEndingButton: boolean;
        endingButtonIntroduction?: string | null;
        endingButtonLabel?: string | null;
        endingButtonLink?: string | null;
        hasEmail: boolean;
        hasTsms: boolean;
        mailRecipients?: string | null;
        logo?: {
          __typename?: "UploadFileEntityResponse";
          data?: {
            __typename?: "UploadFileEntity";
            id?: string | null;
            attributes?: {
              __typename?: "UploadFile";
              name: string;
              alternativeText?: string | null;
              caption?: string | null;
              width?: number | null;
              height?: number | null;
              formats?: any | null;
              hash: string;
              ext?: string | null;
              mime: string;
              size: number;
              url: string;
              previewUrl?: string | null;
              provider: string;
              provider_metadata?: any | null;
              createdAt?: any | null;
              updatedAt?: any | null;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type GetYwsQrCodesQueryVariables = Exact<{
  filters?: InputMaybe<YesWeScanQrCodeFiltersInput>;
  pagination?: InputMaybe<PaginationArg>;
  sort?: InputMaybe<
    Array<InputMaybe<Scalars["String"]>> | InputMaybe<Scalars["String"]>
  >;
}>;

export type GetYwsQrCodesQuery = {
  __typename?: "Query";
  yesWeScanQrCodes?: {
    __typename?: "YesWeScanQrCodeEntityResponseCollection";
    data: Array<{
      __typename?: "YesWeScanQrCodeEntity";
      id?: string | null;
      attributes?: {
        __typename?: "YesWeScanQrCode";
        name?: string | null;
        address?: string | null;
        city?: string | null;
        lat?: number | null;
        long?: number | null;
        typeAssociation?: Enum_Yeswescanqrcode_Typeassociation | null;
        dropOffMap?: {
          __typename?: "DropOffMapEntityResponse";
          data?: {
            __typename?: "DropOffMapEntity";
            id?: string | null;
            attributes?: {
              __typename?: "DropOffMap";
              address?: string | null;
              name?: string | null;
              hasCustomAddress?: boolean | null;
              customAddress?: string | null;
            } | null;
          } | null;
        } | null;
      } | null;
    }>;
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageCount: number;
        pageSize: number;
        total: number;
      };
    };
  } | null;
};

export type GetYwsQrCodeByIdQueryVariables = Exact<{
  ywsQrCodeId: Scalars["ID"];
}>;

export type GetYwsQrCodeByIdQuery = {
  __typename?: "Query";
  yesWeScanQrCode?: {
    __typename?: "YesWeScanQrCodeEntityResponse";
    data?: {
      __typename?: "YesWeScanQrCodeEntity";
      id?: string | null;
      attributes?: {
        __typename?: "YesWeScanQrCode";
        qrCodeUrl?: string | null;
      } | null;
    } | null;
  } | null;
};

export type GetYwsQrCodesByServiceIdQueryVariables = Exact<{
  ywsServiceId: Scalars["ID"];
}>;

export type GetYwsQrCodesByServiceIdQuery = {
  __typename?: "Query";
  yesWeScanQrCodes?: {
    __typename?: "YesWeScanQrCodeEntityResponseCollection";
    data: Array<{
      __typename?: "YesWeScanQrCodeEntity";
      id?: string | null;
      attributes?: {
        __typename?: "YesWeScanQrCode";
        qrCodeUrl?: string | null;
      } | null;
    }>;
  } | null;
};

export type GetYwsServiceByIdQueryVariables = Exact<{
  serviceId: Scalars["ID"];
}>;

export type GetYwsServiceByIdQuery = {
  __typename?: "Query";
  yesWeScanService?: {
    __typename?: "YesWeScanServiceEntityResponse";
    data?: {
      __typename?: "YesWeScanServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "YesWeScanService";
        startDate?: any | null;
        endDate?: any | null;
        serviceName?: string | null;
        shortName: string;
        yesWeScanForm?: {
          __typename?: "YesWeScanFormEntityResponse";
          data?: {
            __typename?: "YesWeScanFormEntity";
            id?: string | null;
          } | null;
        } | null;
      } | null;
    } | null;
  } | null;
};

export type GetYwsServicesByContractIdQueryVariables = Exact<{
  contractId: Scalars["ID"];
  today?: InputMaybe<Scalars["DateTime"]>;
}>;

export type GetYwsServicesByContractIdQuery = {
  __typename?: "Query";
  yesWeScanServices?: {
    __typename?: "YesWeScanServiceEntityResponseCollection";
    data: Array<{
      __typename?: "YesWeScanServiceEntity";
      id?: string | null;
      attributes?: {
        __typename?: "YesWeScanService";
        serviceName?: string | null;
        shortName: string;
      } | null;
    }>;
  } | null;
};

export type GetYwsUnassociatedQrCodesByServiceIdQueryVariables = Exact<{
  ywsServiceId: Scalars["ID"];
  pagination?: InputMaybe<PaginationArg>;
}>;

export type GetYwsUnassociatedQrCodesByServiceIdQuery = {
  __typename?: "Query";
  yesWeScanQrCodes?: {
    __typename?: "YesWeScanQrCodeEntityResponseCollection";
    data: Array<{ __typename?: "YesWeScanQrCodeEntity"; id?: string | null }>;
    meta: {
      __typename?: "ResponseCollectionMeta";
      pagination: {
        __typename?: "Pagination";
        page: number;
        pageCount: number;
        pageSize: number;
        total: number;
      };
    };
  } | null;
};

export type UpdateYwsFormByIdMutationVariables = Exact<{
  ywsFormId: Scalars["ID"];
  data: YesWeScanFormInput;
}>;

export type UpdateYwsFormByIdMutation = {
  __typename?: "Mutation";
  updateYesWeScanForm?: {
    __typename?: "YesWeScanFormEntityResponse";
    data?: { __typename?: "YesWeScanFormEntity"; id?: string | null } | null;
  } | null;
};

export type UpdateYwsQrCodeByIdMutationVariables = Exact<{
  ywsQrCodeId: Scalars["ID"];
  data: YesWeScanQrCodeInput;
}>;

export type UpdateYwsQrCodeByIdMutation = {
  __typename?: "Mutation";
  updateYesWeScanQrCode?: {
    __typename?: "YesWeScanQrCodeEntityResponse";
    data?: {
      __typename?: "YesWeScanQrCodeEntity";
      id?: string | null;
      attributes?: {
        __typename?: "YesWeScanQrCode";
        qrCodeUrl?: string | null;
      } | null;
    } | null;
  } | null;
};

export const ChangeContractStatusByIdDocument = gql`
  mutation changeContractStatusById($contractId: ID!, $status: Statuses!) {
    changeContractStatus(contractId: $contractId, status: $status) {
      contractId
    }
  }
`;
export type ChangeContractStatusByIdMutationFn = Apollo.MutationFunction<
  ChangeContractStatusByIdMutation,
  ChangeContractStatusByIdMutationVariables
>;

/**
 * __useChangeContractStatusByIdMutation__
 *
 * To run a mutation, you first call `useChangeContractStatusByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeContractStatusByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeContractStatusByIdMutation, { data, loading, error }] = useChangeContractStatusByIdMutation({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      status: // value for 'status'
 *   },
 * });
 */
export function useChangeContractStatusByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ChangeContractStatusByIdMutation,
    ChangeContractStatusByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    ChangeContractStatusByIdMutation,
    ChangeContractStatusByIdMutationVariables
  >(ChangeContractStatusByIdDocument, options);
}
export type ChangeContractStatusByIdMutationHookResult = ReturnType<
  typeof useChangeContractStatusByIdMutation
>;
export type ChangeContractStatusByIdMutationResult =
  Apollo.MutationResult<ChangeContractStatusByIdMutation>;
export type ChangeContractStatusByIdMutationOptions =
  Apollo.BaseMutationOptions<
    ChangeContractStatusByIdMutation,
    ChangeContractStatusByIdMutationVariables
  >;
export const CreateNewDocument = gql`
  mutation createNew($data: NewInput!) {
    createNew(data: $data) {
      data {
        id
        attributes {
          customId
          title
          shortDescription
          newsSubService {
            data {
              id
            }
          }
          status
          publishedDate
          unpublishedDate
          createdAt
          updatedAt
          tags {
            data {
              id
              attributes {
                name
              }
            }
          }
          image {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                ext
                height
                width
                createdAt
              }
            }
          }
          audiences {
            data {
              id
            }
          }
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksHorizontalRule {
              id
              hr
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
              isDecorative
              altText
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
            }
            ... on ComponentBlocksServices {
              id
              serviceLinksData
            }
          }
        }
      }
    }
  }
`;
export type CreateNewMutationFn = Apollo.MutationFunction<
  CreateNewMutation,
  CreateNewMutationVariables
>;

/**
 * __useCreateNewMutation__
 *
 * To run a mutation, you first call `useCreateNewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateNewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createNewMutation, { data, loading, error }] = useCreateNewMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateNewMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateNewMutation,
    CreateNewMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<CreateNewMutation, CreateNewMutationVariables>(
    CreateNewDocument,
    options,
  );
}
export type CreateNewMutationHookResult = ReturnType<
  typeof useCreateNewMutation
>;
export type CreateNewMutationResult = Apollo.MutationResult<CreateNewMutation>;
export type CreateNewMutationOptions = Apollo.BaseMutationOptions<
  CreateNewMutation,
  CreateNewMutationVariables
>;
export const DeleteNewByIdDocument = gql`
  mutation deleteNewById($deleteNewId: ID!) {
    deleteNew(id: $deleteNewId) {
      data {
        id
        attributes {
          customId
          title
          shortDescription
          newsSubService {
            data {
              id
            }
          }
          status
          publishedDate
          unpublishedDate
          createdAt
          updatedAt
          tags {
            data {
              id
              attributes {
                name
              }
            }
          }
          image {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                ext
                height
                width
                createdAt
              }
            }
          }
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksHorizontalRule {
              id
              hr
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
              isDecorative
              altText
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
            }
            ... on ComponentBlocksServices {
              id
              serviceLinksData
            }
          }
        }
      }
    }
  }
`;
export type DeleteNewByIdMutationFn = Apollo.MutationFunction<
  DeleteNewByIdMutation,
  DeleteNewByIdMutationVariables
>;

/**
 * __useDeleteNewByIdMutation__
 *
 * To run a mutation, you first call `useDeleteNewByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteNewByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteNewByIdMutation, { data, loading, error }] = useDeleteNewByIdMutation({
 *   variables: {
 *      deleteNewId: // value for 'deleteNewId'
 *   },
 * });
 */
export function useDeleteNewByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteNewByIdMutation,
    DeleteNewByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteNewByIdMutation,
    DeleteNewByIdMutationVariables
  >(DeleteNewByIdDocument, options);
}
export type DeleteNewByIdMutationHookResult = ReturnType<
  typeof useDeleteNewByIdMutation
>;
export type DeleteNewByIdMutationResult =
  Apollo.MutationResult<DeleteNewByIdMutation>;
export type DeleteNewByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteNewByIdMutation,
  DeleteNewByIdMutationVariables
>;
export const GetAllVersionsOfNewsByCustomIdDocument = gql`
  query getAllVersionsOfNewsByCustomId(
    $contractId: ID!
    $customId: String
    $statusFilter: StringFilterInput
    $sort: [String]
    $pagination: PaginationArg
  ) {
    newsCount: news(
      filters: {
        newsSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    newsCountDraft: news(
      filters: {
        newsSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: { eq: "draft" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    newsCountPublished: news(
      filters: {
        newsSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: { eq: "published" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    newsCountArchived: news(
      filters: {
        newsSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: { eq: "archived" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    news(
      filters: {
        newsSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: $statusFilter
      }
      sort: $sort
      pagination: $pagination
    ) {
      meta {
        pagination {
          page
          pageSize
          pageCount
          total
        }
      }
      data {
        id
        attributes {
          versionNumber
          status
          publishedDate
          updatedAt
        }
      }
    }
  }
`;

/**
 * __useGetAllVersionsOfNewsByCustomIdQuery__
 *
 * To run a query within a React component, call `useGetAllVersionsOfNewsByCustomIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllVersionsOfNewsByCustomIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllVersionsOfNewsByCustomIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      customId: // value for 'customId'
 *      statusFilter: // value for 'statusFilter'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useGetAllVersionsOfNewsByCustomIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAllVersionsOfNewsByCustomIdQuery,
    GetAllVersionsOfNewsByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAllVersionsOfNewsByCustomIdQuery,
    GetAllVersionsOfNewsByCustomIdQueryVariables
  >(GetAllVersionsOfNewsByCustomIdDocument, options);
}
export function useGetAllVersionsOfNewsByCustomIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAllVersionsOfNewsByCustomIdQuery,
    GetAllVersionsOfNewsByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAllVersionsOfNewsByCustomIdQuery,
    GetAllVersionsOfNewsByCustomIdQueryVariables
  >(GetAllVersionsOfNewsByCustomIdDocument, options);
}
export type GetAllVersionsOfNewsByCustomIdQueryHookResult = ReturnType<
  typeof useGetAllVersionsOfNewsByCustomIdQuery
>;
export type GetAllVersionsOfNewsByCustomIdLazyQueryHookResult = ReturnType<
  typeof useGetAllVersionsOfNewsByCustomIdLazyQuery
>;
export type GetAllVersionsOfNewsByCustomIdQueryResult = Apollo.QueryResult<
  GetAllVersionsOfNewsByCustomIdQuery,
  GetAllVersionsOfNewsByCustomIdQueryVariables
>;
export const GetNewByIdDocument = gql`
  query getNewById($newId: ID) {
    new(id: $newId) {
      data {
        id
        attributes {
          customId
          draftCreationId
          title
          shortDescription
          newsSubService {
            data {
              id
            }
          }
          status
          publishedDate
          unpublishedDate
          createdAt
          updatedAt
          tags {
            data {
              id
              attributes {
                name
              }
            }
          }
          image {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                ext
                height
                width
                createdAt
              }
            }
          }
          audiences {
            data {
              id
              attributes {
                type
                isActive
              }
            }
          }
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksHorizontalRule {
              id
              hr
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
              isDecorative
              altText
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
            }
            ... on ComponentBlocksServices {
              id
              serviceLinksData
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetNewByIdQuery__
 *
 * To run a query within a React component, call `useGetNewByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNewByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNewByIdQuery({
 *   variables: {
 *      newId: // value for 'newId'
 *   },
 * });
 */
export function useGetNewByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetNewByIdQuery,
    GetNewByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetNewByIdQuery, GetNewByIdQueryVariables>(
    GetNewByIdDocument,
    options,
  );
}
export function useGetNewByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetNewByIdQuery,
    GetNewByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetNewByIdQuery, GetNewByIdQueryVariables>(
    GetNewByIdDocument,
    options,
  );
}
export type GetNewByIdQueryHookResult = ReturnType<typeof useGetNewByIdQuery>;
export type GetNewByIdLazyQueryHookResult = ReturnType<
  typeof useGetNewByIdLazyQuery
>;
export type GetNewByIdQueryResult = Apollo.QueryResult<
  GetNewByIdQuery,
  GetNewByIdQueryVariables
>;
export const GetNewsByContractIdDocument = gql`
  query getNewsByContractId(
    $contractId: ID!
    $statusFilter: StringFilterInput
    $sort: [String]
    $pagination: PaginationArg
  ) {
    newsCount: news(
      filters: {
        newsSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    newsCountDraft: news(
      filters: {
        newsSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        status: { eq: "draft" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    newsCountPublished: news(
      filters: {
        newsSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        status: { eq: "published" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    newsCountArchived: news(
      filters: {
        newsSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        status: { eq: "archived" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    news(
      filters: {
        newsSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        status: $statusFilter
      }
      sort: $sort
      pagination: $pagination
    ) {
      meta {
        pagination {
          page
          pageSize
          pageCount
          total
        }
      }
      data {
        id
        attributes {
          title
          shortDescription
          status
          publishedDate
          unpublishedDate
        }
      }
    }
  }
`;

/**
 * __useGetNewsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetNewsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNewsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNewsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      statusFilter: // value for 'statusFilter'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useGetNewsByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetNewsByContractIdQuery,
    GetNewsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetNewsByContractIdQuery,
    GetNewsByContractIdQueryVariables
  >(GetNewsByContractIdDocument, options);
}
export function useGetNewsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetNewsByContractIdQuery,
    GetNewsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetNewsByContractIdQuery,
    GetNewsByContractIdQueryVariables
  >(GetNewsByContractIdDocument, options);
}
export type GetNewsByContractIdQueryHookResult = ReturnType<
  typeof useGetNewsByContractIdQuery
>;
export type GetNewsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetNewsByContractIdLazyQuery
>;
export type GetNewsByContractIdQueryResult = Apollo.QueryResult<
  GetNewsByContractIdQuery,
  GetNewsByContractIdQueryVariables
>;
export const GetNewsDraftByCustomIdDocument = gql`
  query getNewsDraftByCustomId($customId: String!) {
    news(filters: { customId: { eq: $customId }, status: { eq: "draft" } }) {
      data {
        id
      }
    }
  }
`;

/**
 * __useGetNewsDraftByCustomIdQuery__
 *
 * To run a query within a React component, call `useGetNewsDraftByCustomIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNewsDraftByCustomIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNewsDraftByCustomIdQuery({
 *   variables: {
 *      customId: // value for 'customId'
 *   },
 * });
 */
export function useGetNewsDraftByCustomIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetNewsDraftByCustomIdQuery,
    GetNewsDraftByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetNewsDraftByCustomIdQuery,
    GetNewsDraftByCustomIdQueryVariables
  >(GetNewsDraftByCustomIdDocument, options);
}
export function useGetNewsDraftByCustomIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetNewsDraftByCustomIdQuery,
    GetNewsDraftByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetNewsDraftByCustomIdQuery,
    GetNewsDraftByCustomIdQueryVariables
  >(GetNewsDraftByCustomIdDocument, options);
}
export type GetNewsDraftByCustomIdQueryHookResult = ReturnType<
  typeof useGetNewsDraftByCustomIdQuery
>;
export type GetNewsDraftByCustomIdLazyQueryHookResult = ReturnType<
  typeof useGetNewsDraftByCustomIdLazyQuery
>;
export type GetNewsDraftByCustomIdQueryResult = Apollo.QueryResult<
  GetNewsDraftByCustomIdQuery,
  GetNewsDraftByCustomIdQueryVariables
>;
export const UpdateNewByIdDocument = gql`
  mutation updateNewById($updateNewId: ID!, $data: JSON!) {
    versioningHandler(data: { id: $updateNewId, data: $data }, entity: "new") {
      data {
        ... on NewEntity {
          id
          attributes {
            customId
          }
        }
      }
    }
  }
`;
export type UpdateNewByIdMutationFn = Apollo.MutationFunction<
  UpdateNewByIdMutation,
  UpdateNewByIdMutationVariables
>;

/**
 * __useUpdateNewByIdMutation__
 *
 * To run a mutation, you first call `useUpdateNewByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateNewByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateNewByIdMutation, { data, loading, error }] = useUpdateNewByIdMutation({
 *   variables: {
 *      updateNewId: // value for 'updateNewId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateNewByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateNewByIdMutation,
    UpdateNewByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateNewByIdMutation,
    UpdateNewByIdMutationVariables
  >(UpdateNewByIdDocument, options);
}
export type UpdateNewByIdMutationHookResult = ReturnType<
  typeof useUpdateNewByIdMutation
>;
export type UpdateNewByIdMutationResult =
  Apollo.MutationResult<UpdateNewByIdMutation>;
export type UpdateNewByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateNewByIdMutation,
  UpdateNewByIdMutationVariables
>;
export const CreateTipDocument = gql`
  mutation createTip($data: TipInput!) {
    createTip(data: $data) {
      data {
        id
        attributes {
          title
          shortDescription
          tipSubService {
            data {
              id
            }
          }
          status
          publishedDate
          unpublishedDate
          createdAt
          updatedAt
          tags {
            data {
              id
              attributes {
                name
              }
            }
          }
          image {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                ext
                height
                width
                createdAt
              }
            }
          }
          audiences {
            data {
              id
            }
          }
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksHorizontalRule {
              id
              hr
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
              isDecorative
              altText
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;
export type CreateTipMutationFn = Apollo.MutationFunction<
  CreateTipMutation,
  CreateTipMutationVariables
>;

/**
 * __useCreateTipMutation__
 *
 * To run a mutation, you first call `useCreateTipMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTipMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTipMutation, { data, loading, error }] = useCreateTipMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateTipMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateTipMutation,
    CreateTipMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<CreateTipMutation, CreateTipMutationVariables>(
    CreateTipDocument,
    options,
  );
}
export type CreateTipMutationHookResult = ReturnType<
  typeof useCreateTipMutation
>;
export type CreateTipMutationResult = Apollo.MutationResult<CreateTipMutation>;
export type CreateTipMutationOptions = Apollo.BaseMutationOptions<
  CreateTipMutation,
  CreateTipMutationVariables
>;
export const DeleteTipByIdDocument = gql`
  mutation deleteTipById($deleteTipId: ID!) {
    deleteTip(id: $deleteTipId) {
      data {
        id
        attributes {
          title
          shortDescription
          tipSubService {
            data {
              id
            }
          }
          status
          publishedDate
          unpublishedDate
          createdAt
          updatedAt
          tags {
            data {
              id
              attributes {
                name
              }
            }
          }
          image {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                ext
                height
                width
                createdAt
              }
            }
          }
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksHorizontalRule {
              id
              hr
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
              isDecorative
              altText
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;
export type DeleteTipByIdMutationFn = Apollo.MutationFunction<
  DeleteTipByIdMutation,
  DeleteTipByIdMutationVariables
>;

/**
 * __useDeleteTipByIdMutation__
 *
 * To run a mutation, you first call `useDeleteTipByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteTipByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteTipByIdMutation, { data, loading, error }] = useDeleteTipByIdMutation({
 *   variables: {
 *      deleteTipId: // value for 'deleteTipId'
 *   },
 * });
 */
export function useDeleteTipByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteTipByIdMutation,
    DeleteTipByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteTipByIdMutation,
    DeleteTipByIdMutationVariables
  >(DeleteTipByIdDocument, options);
}
export type DeleteTipByIdMutationHookResult = ReturnType<
  typeof useDeleteTipByIdMutation
>;
export type DeleteTipByIdMutationResult =
  Apollo.MutationResult<DeleteTipByIdMutation>;
export type DeleteTipByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteTipByIdMutation,
  DeleteTipByIdMutationVariables
>;
export const GetAllVersionsOfTipByCustomIdDocument = gql`
  query getAllVersionsOfTipByCustomId(
    $contractId: ID!
    $customId: String
    $statusFilter: StringFilterInput
    $sort: [String]
    $pagination: PaginationArg
  ) {
    tipsCount: tips(
      filters: {
        tipSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    tipsCountDraft: tips(
      filters: {
        tipSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: { eq: "draft" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    tipsCountPublished: tips(
      filters: {
        tipSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: { eq: "published" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    tipsCountArchived: tips(
      filters: {
        tipSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: { eq: "archived" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    tips(
      filters: {
        tipSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: $statusFilter
      }
      sort: $sort
      pagination: $pagination
    ) {
      meta {
        pagination {
          page
          pageSize
          pageCount
          total
        }
      }
      data {
        id
        attributes {
          versionNumber
          status
          publishedDate
          updatedAt
        }
      }
    }
  }
`;

/**
 * __useGetAllVersionsOfTipByCustomIdQuery__
 *
 * To run a query within a React component, call `useGetAllVersionsOfTipByCustomIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllVersionsOfTipByCustomIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllVersionsOfTipByCustomIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      customId: // value for 'customId'
 *      statusFilter: // value for 'statusFilter'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useGetAllVersionsOfTipByCustomIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAllVersionsOfTipByCustomIdQuery,
    GetAllVersionsOfTipByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAllVersionsOfTipByCustomIdQuery,
    GetAllVersionsOfTipByCustomIdQueryVariables
  >(GetAllVersionsOfTipByCustomIdDocument, options);
}
export function useGetAllVersionsOfTipByCustomIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAllVersionsOfTipByCustomIdQuery,
    GetAllVersionsOfTipByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAllVersionsOfTipByCustomIdQuery,
    GetAllVersionsOfTipByCustomIdQueryVariables
  >(GetAllVersionsOfTipByCustomIdDocument, options);
}
export type GetAllVersionsOfTipByCustomIdQueryHookResult = ReturnType<
  typeof useGetAllVersionsOfTipByCustomIdQuery
>;
export type GetAllVersionsOfTipByCustomIdLazyQueryHookResult = ReturnType<
  typeof useGetAllVersionsOfTipByCustomIdLazyQuery
>;
export type GetAllVersionsOfTipByCustomIdQueryResult = Apollo.QueryResult<
  GetAllVersionsOfTipByCustomIdQuery,
  GetAllVersionsOfTipByCustomIdQueryVariables
>;
export const GetTipByIdDocument = gql`
  query getTipById($tipId: ID) {
    tip(id: $tipId) {
      data {
        id
        attributes {
          customId
          draftCreationId
          title
          shortDescription
          tipSubService {
            data {
              id
            }
          }
          status
          publishedDate
          unpublishedDate
          createdAt
          updatedAt
          tags {
            data {
              id
              attributes {
                name
              }
            }
          }
          image {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                ext
                height
                width
                createdAt
              }
            }
          }
          audiences {
            data {
              id
              attributes {
                type
                isActive
              }
            }
          }
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksHorizontalRule {
              id
              hr
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
              isDecorative
              altText
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
            }
            ... on ComponentBlocksServices {
              id
              serviceLinksData
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetTipByIdQuery__
 *
 * To run a query within a React component, call `useGetTipByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTipByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTipByIdQuery({
 *   variables: {
 *      tipId: // value for 'tipId'
 *   },
 * });
 */
export function useGetTipByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetTipByIdQuery,
    GetTipByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetTipByIdQuery, GetTipByIdQueryVariables>(
    GetTipByIdDocument,
    options,
  );
}
export function useGetTipByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTipByIdQuery,
    GetTipByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetTipByIdQuery, GetTipByIdQueryVariables>(
    GetTipByIdDocument,
    options,
  );
}
export type GetTipByIdQueryHookResult = ReturnType<typeof useGetTipByIdQuery>;
export type GetTipByIdLazyQueryHookResult = ReturnType<
  typeof useGetTipByIdLazyQuery
>;
export type GetTipByIdQueryResult = Apollo.QueryResult<
  GetTipByIdQuery,
  GetTipByIdQueryVariables
>;
export const GetTipsByContractIdDocument = gql`
  query getTipsByContractId(
    $contractId: ID!
    $statusFilter: StringFilterInput
    $title: String
    $sort: [String]
    $pagination: PaginationArg
  ) {
    tipsCount: tips(
      filters: {
        tipSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    tipsCountDraft: tips(
      filters: {
        tipSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        status: { eq: "draft" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    tipsCountPublished: tips(
      filters: {
        tipSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        status: { eq: "published" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    tipsCountArchived: tips(
      filters: {
        tipSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        status: { eq: "archived" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    tips(
      filters: {
        tipSubService: {
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        status: $statusFilter
        title: { contains: $title }
      }
      sort: $sort
      pagination: $pagination
    ) {
      meta {
        pagination {
          page
          pageSize
          pageCount
          total
        }
      }
      data {
        id
        attributes {
          title
          shortDescription
          status
          publishedDate
          unpublishedDate
        }
      }
    }
  }
`;

/**
 * __useGetTipsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetTipsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTipsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTipsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      statusFilter: // value for 'statusFilter'
 *      title: // value for 'title'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useGetTipsByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetTipsByContractIdQuery,
    GetTipsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetTipsByContractIdQuery,
    GetTipsByContractIdQueryVariables
  >(GetTipsByContractIdDocument, options);
}
export function useGetTipsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTipsByContractIdQuery,
    GetTipsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetTipsByContractIdQuery,
    GetTipsByContractIdQueryVariables
  >(GetTipsByContractIdDocument, options);
}
export type GetTipsByContractIdQueryHookResult = ReturnType<
  typeof useGetTipsByContractIdQuery
>;
export type GetTipsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetTipsByContractIdLazyQuery
>;
export type GetTipsByContractIdQueryResult = Apollo.QueryResult<
  GetTipsByContractIdQuery,
  GetTipsByContractIdQueryVariables
>;
export const GetTipsDraftByCustomIdDocument = gql`
  query getTipsDraftByCustomId($customId: String!) {
    tips(filters: { customId: { eq: $customId }, status: { eq: "draft" } }) {
      data {
        id
      }
    }
  }
`;

/**
 * __useGetTipsDraftByCustomIdQuery__
 *
 * To run a query within a React component, call `useGetTipsDraftByCustomIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTipsDraftByCustomIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTipsDraftByCustomIdQuery({
 *   variables: {
 *      customId: // value for 'customId'
 *   },
 * });
 */
export function useGetTipsDraftByCustomIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetTipsDraftByCustomIdQuery,
    GetTipsDraftByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetTipsDraftByCustomIdQuery,
    GetTipsDraftByCustomIdQueryVariables
  >(GetTipsDraftByCustomIdDocument, options);
}
export function useGetTipsDraftByCustomIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTipsDraftByCustomIdQuery,
    GetTipsDraftByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetTipsDraftByCustomIdQuery,
    GetTipsDraftByCustomIdQueryVariables
  >(GetTipsDraftByCustomIdDocument, options);
}
export type GetTipsDraftByCustomIdQueryHookResult = ReturnType<
  typeof useGetTipsDraftByCustomIdQuery
>;
export type GetTipsDraftByCustomIdLazyQueryHookResult = ReturnType<
  typeof useGetTipsDraftByCustomIdLazyQuery
>;
export type GetTipsDraftByCustomIdQueryResult = Apollo.QueryResult<
  GetTipsDraftByCustomIdQuery,
  GetTipsDraftByCustomIdQueryVariables
>;
export const UpdateTipByIdDocument = gql`
  mutation updateTipById($updateTipId: ID!, $data: JSON!) {
    versioningHandler(data: { id: $updateTipId, data: $data }, entity: "tip") {
      data {
        ... on TipEntity {
          id
          attributes {
            customId
          }
        }
      }
    }
  }
`;
export type UpdateTipByIdMutationFn = Apollo.MutationFunction<
  UpdateTipByIdMutation,
  UpdateTipByIdMutationVariables
>;

/**
 * __useUpdateTipByIdMutation__
 *
 * To run a mutation, you first call `useUpdateTipByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTipByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTipByIdMutation, { data, loading, error }] = useUpdateTipByIdMutation({
 *   variables: {
 *      updateTipId: // value for 'updateTipId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTipByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateTipByIdMutation,
    UpdateTipByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateTipByIdMutation,
    UpdateTipByIdMutationVariables
  >(UpdateTipByIdDocument, options);
}
export type UpdateTipByIdMutationHookResult = ReturnType<
  typeof useUpdateTipByIdMutation
>;
export type UpdateTipByIdMutationResult =
  Apollo.MutationResult<UpdateTipByIdMutation>;
export type UpdateTipByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateTipByIdMutation,
  UpdateTipByIdMutationVariables
>;
export const CreateNewFolderDocument = gql`
  mutation createNewFolder(
    $name: String!
    $parentFolderPath: String!
    $parentFolderPathId: ID!
  ) {
    createNewFolder(
      name: $name
      parentFolderPath: $parentFolderPath
      parentFolderPathId: $parentFolderPathId
    ) {
      id
      name
      path
      pathId
    }
  }
`;
export type CreateNewFolderMutationFn = Apollo.MutationFunction<
  CreateNewFolderMutation,
  CreateNewFolderMutationVariables
>;

/**
 * __useCreateNewFolderMutation__
 *
 * To run a mutation, you first call `useCreateNewFolderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateNewFolderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createNewFolderMutation, { data, loading, error }] = useCreateNewFolderMutation({
 *   variables: {
 *      name: // value for 'name'
 *      parentFolderPath: // value for 'parentFolderPath'
 *      parentFolderPathId: // value for 'parentFolderPathId'
 *   },
 * });
 */
export function useCreateNewFolderMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateNewFolderMutation,
    CreateNewFolderMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateNewFolderMutation,
    CreateNewFolderMutationVariables
  >(CreateNewFolderDocument, options);
}
export type CreateNewFolderMutationHookResult = ReturnType<
  typeof useCreateNewFolderMutation
>;
export type CreateNewFolderMutationResult =
  Apollo.MutationResult<CreateNewFolderMutation>;
export type CreateNewFolderMutationOptions = Apollo.BaseMutationOptions<
  CreateNewFolderMutation,
  CreateNewFolderMutationVariables
>;
export const DeleteUnpublishedMediaByImageIdsDocument = gql`
  mutation deleteUnpublishedMediaByImageIds($imageIds: [ID]) {
    deleteUnpublishedMedia(imageIds: $imageIds)
  }
`;
export type DeleteUnpublishedMediaByImageIdsMutationFn =
  Apollo.MutationFunction<
    DeleteUnpublishedMediaByImageIdsMutation,
    DeleteUnpublishedMediaByImageIdsMutationVariables
  >;

/**
 * __useDeleteUnpublishedMediaByImageIdsMutation__
 *
 * To run a mutation, you first call `useDeleteUnpublishedMediaByImageIdsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUnpublishedMediaByImageIdsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUnpublishedMediaByImageIdsMutation, { data, loading, error }] = useDeleteUnpublishedMediaByImageIdsMutation({
 *   variables: {
 *      imageIds: // value for 'imageIds'
 *   },
 * });
 */
export function useDeleteUnpublishedMediaByImageIdsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteUnpublishedMediaByImageIdsMutation,
    DeleteUnpublishedMediaByImageIdsMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteUnpublishedMediaByImageIdsMutation,
    DeleteUnpublishedMediaByImageIdsMutationVariables
  >(DeleteUnpublishedMediaByImageIdsDocument, options);
}
export type DeleteUnpublishedMediaByImageIdsMutationHookResult = ReturnType<
  typeof useDeleteUnpublishedMediaByImageIdsMutation
>;
export type DeleteUnpublishedMediaByImageIdsMutationResult =
  Apollo.MutationResult<DeleteUnpublishedMediaByImageIdsMutation>;
export type DeleteUnpublishedMediaByImageIdsMutationOptions =
  Apollo.BaseMutationOptions<
    DeleteUnpublishedMediaByImageIdsMutation,
    DeleteUnpublishedMediaByImageIdsMutationVariables
  >;
export const GetAllFoldersHierarchyDocument = gql`
  query getAllFoldersHierarchy($path: String!) {
    getAllFoldersHierarchy(path: $path) {
      id
      name
      path
      pathId
    }
  }
`;

/**
 * __useGetAllFoldersHierarchyQuery__
 *
 * To run a query within a React component, call `useGetAllFoldersHierarchyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllFoldersHierarchyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllFoldersHierarchyQuery({
 *   variables: {
 *      path: // value for 'path'
 *   },
 * });
 */
export function useGetAllFoldersHierarchyQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAllFoldersHierarchyQuery,
    GetAllFoldersHierarchyQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAllFoldersHierarchyQuery,
    GetAllFoldersHierarchyQueryVariables
  >(GetAllFoldersHierarchyDocument, options);
}
export function useGetAllFoldersHierarchyLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAllFoldersHierarchyQuery,
    GetAllFoldersHierarchyQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAllFoldersHierarchyQuery,
    GetAllFoldersHierarchyQueryVariables
  >(GetAllFoldersHierarchyDocument, options);
}
export type GetAllFoldersHierarchyQueryHookResult = ReturnType<
  typeof useGetAllFoldersHierarchyQuery
>;
export type GetAllFoldersHierarchyLazyQueryHookResult = ReturnType<
  typeof useGetAllFoldersHierarchyLazyQuery
>;
export type GetAllFoldersHierarchyQueryResult = Apollo.QueryResult<
  GetAllFoldersHierarchyQuery,
  GetAllFoldersHierarchyQueryVariables
>;
export const GetLibraryBreadcrumbTrailDocument = gql`
  query getLibraryBreadcrumbTrail($path: String!) {
    libraryBreadcrumbTrail(path: $path) {
      id
      name
      path
      pathId
    }
  }
`;

/**
 * __useGetLibraryBreadcrumbTrailQuery__
 *
 * To run a query within a React component, call `useGetLibraryBreadcrumbTrailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLibraryBreadcrumbTrailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLibraryBreadcrumbTrailQuery({
 *   variables: {
 *      path: // value for 'path'
 *   },
 * });
 */
export function useGetLibraryBreadcrumbTrailQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetLibraryBreadcrumbTrailQuery,
    GetLibraryBreadcrumbTrailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetLibraryBreadcrumbTrailQuery,
    GetLibraryBreadcrumbTrailQueryVariables
  >(GetLibraryBreadcrumbTrailDocument, options);
}
export function useGetLibraryBreadcrumbTrailLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetLibraryBreadcrumbTrailQuery,
    GetLibraryBreadcrumbTrailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetLibraryBreadcrumbTrailQuery,
    GetLibraryBreadcrumbTrailQueryVariables
  >(GetLibraryBreadcrumbTrailDocument, options);
}
export type GetLibraryBreadcrumbTrailQueryHookResult = ReturnType<
  typeof useGetLibraryBreadcrumbTrailQuery
>;
export type GetLibraryBreadcrumbTrailLazyQueryHookResult = ReturnType<
  typeof useGetLibraryBreadcrumbTrailLazyQuery
>;
export type GetLibraryBreadcrumbTrailQueryResult = Apollo.QueryResult<
  GetLibraryBreadcrumbTrailQuery,
  GetLibraryBreadcrumbTrailQueryVariables
>;
export const GetUploadFilesDocument = gql`
  query getUploadFiles(
    $filters: UploadFileFiltersInput
    $pagination: PaginationArg
    $sort: [String]
  ) {
    uploadFiles(filters: $filters, pagination: $pagination, sort: $sort) {
      data {
        id
        attributes {
          name
          mime
          size
          width
          height
          createdAt
          url
          ext
          alternativeText
          createdAt
        }
      }
      meta {
        pagination {
          total
          pageSize
          pageCount
          page
        }
      }
    }
  }
`;

/**
 * __useGetUploadFilesQuery__
 *
 * To run a query within a React component, call `useGetUploadFilesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUploadFilesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUploadFilesQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetUploadFilesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetUploadFilesQuery,
    GetUploadFilesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetUploadFilesQuery, GetUploadFilesQueryVariables>(
    GetUploadFilesDocument,
    options,
  );
}
export function useGetUploadFilesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetUploadFilesQuery,
    GetUploadFilesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetUploadFilesQuery, GetUploadFilesQueryVariables>(
    GetUploadFilesDocument,
    options,
  );
}
export type GetUploadFilesQueryHookResult = ReturnType<
  typeof useGetUploadFilesQuery
>;
export type GetUploadFilesLazyQueryHookResult = ReturnType<
  typeof useGetUploadFilesLazyQuery
>;
export type GetUploadFilesQueryResult = Apollo.QueryResult<
  GetUploadFilesQuery,
  GetUploadFilesQueryVariables
>;
export const GetUploadFoldersDocument = gql`
  query getUploadFolders($filters: UploadFolderFiltersInput) {
    uploadFolders(filters: $filters) {
      data {
        id
        attributes {
          name
          pathId
          path
          files {
            data {
              id
            }
          }
          children {
            data {
              id
              attributes {
                name
                pathId
                path
                files {
                  data {
                    id
                  }
                }
                children {
                  data {
                    id
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetUploadFoldersQuery__
 *
 * To run a query within a React component, call `useGetUploadFoldersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUploadFoldersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUploadFoldersQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *   },
 * });
 */
export function useGetUploadFoldersQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetUploadFoldersQuery,
    GetUploadFoldersQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetUploadFoldersQuery, GetUploadFoldersQueryVariables>(
    GetUploadFoldersDocument,
    options,
  );
}
export function useGetUploadFoldersLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetUploadFoldersQuery,
    GetUploadFoldersQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetUploadFoldersQuery,
    GetUploadFoldersQueryVariables
  >(GetUploadFoldersDocument, options);
}
export type GetUploadFoldersQueryHookResult = ReturnType<
  typeof useGetUploadFoldersQuery
>;
export type GetUploadFoldersLazyQueryHookResult = ReturnType<
  typeof useGetUploadFoldersLazyQuery
>;
export type GetUploadFoldersQueryResult = Apollo.QueryResult<
  GetUploadFoldersQuery,
  GetUploadFoldersQueryVariables
>;
export const GetUploadFoldersByPathIdDocument = gql`
  query getUploadFoldersByPathId($pathId: Int!) {
    uploadFolders(filters: { pathId: { eq: $pathId } }) {
      data {
        id
        attributes {
          name
          pathId
          path
        }
      }
    }
  }
`;

/**
 * __useGetUploadFoldersByPathIdQuery__
 *
 * To run a query within a React component, call `useGetUploadFoldersByPathIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUploadFoldersByPathIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUploadFoldersByPathIdQuery({
 *   variables: {
 *      pathId: // value for 'pathId'
 *   },
 * });
 */
export function useGetUploadFoldersByPathIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetUploadFoldersByPathIdQuery,
    GetUploadFoldersByPathIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetUploadFoldersByPathIdQuery,
    GetUploadFoldersByPathIdQueryVariables
  >(GetUploadFoldersByPathIdDocument, options);
}
export function useGetUploadFoldersByPathIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetUploadFoldersByPathIdQuery,
    GetUploadFoldersByPathIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetUploadFoldersByPathIdQuery,
    GetUploadFoldersByPathIdQueryVariables
  >(GetUploadFoldersByPathIdDocument, options);
}
export type GetUploadFoldersByPathIdQueryHookResult = ReturnType<
  typeof useGetUploadFoldersByPathIdQuery
>;
export type GetUploadFoldersByPathIdLazyQueryHookResult = ReturnType<
  typeof useGetUploadFoldersByPathIdLazyQuery
>;
export type GetUploadFoldersByPathIdQueryResult = Apollo.QueryResult<
  GetUploadFoldersByPathIdQuery,
  GetUploadFoldersByPathIdQueryVariables
>;
export const UpdateUploadFileByIdDocument = gql`
  mutation updateUploadFileById(
    $updateUploadFileId: ID!
    $data: UploadFileInput!
  ) {
    updateUploadFile(id: $updateUploadFileId, data: $data) {
      data {
        id
        attributes {
          createdAt
          hash
          mime
          name
          provider
          size
          url
          alternativeText
          ext
          height
          width
          createdAt
          related {
            ... on UploadFolder {
              name
              path
              pathId
            }
          }
        }
      }
    }
  }
`;
export type UpdateUploadFileByIdMutationFn = Apollo.MutationFunction<
  UpdateUploadFileByIdMutation,
  UpdateUploadFileByIdMutationVariables
>;

/**
 * __useUpdateUploadFileByIdMutation__
 *
 * To run a mutation, you first call `useUpdateUploadFileByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUploadFileByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUploadFileByIdMutation, { data, loading, error }] = useUpdateUploadFileByIdMutation({
 *   variables: {
 *      updateUploadFileId: // value for 'updateUploadFileId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateUploadFileByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateUploadFileByIdMutation,
    UpdateUploadFileByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateUploadFileByIdMutation,
    UpdateUploadFileByIdMutationVariables
  >(UpdateUploadFileByIdDocument, options);
}
export type UpdateUploadFileByIdMutationHookResult = ReturnType<
  typeof useUpdateUploadFileByIdMutation
>;
export type UpdateUploadFileByIdMutationResult =
  Apollo.MutationResult<UpdateUploadFileByIdMutation>;
export type UpdateUploadFileByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateUploadFileByIdMutation,
  UpdateUploadFileByIdMutationVariables
>;
export const UpdateUploadFolderByIdDocument = gql`
  mutation updateUploadFolderById(
    $updateUploadFolderId: ID!
    $data: UploadFolderInput!
  ) {
    updateUploadFolder(id: $updateUploadFolderId, data: $data) {
      data {
        id
        attributes {
          pathId
          updatedAt
          name
          path
          children {
            data {
              id
              attributes {
                name
                path
                pathId
                children {
                  data {
                    id
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;
export type UpdateUploadFolderByIdMutationFn = Apollo.MutationFunction<
  UpdateUploadFolderByIdMutation,
  UpdateUploadFolderByIdMutationVariables
>;

/**
 * __useUpdateUploadFolderByIdMutation__
 *
 * To run a mutation, you first call `useUpdateUploadFolderByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUploadFolderByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUploadFolderByIdMutation, { data, loading, error }] = useUpdateUploadFolderByIdMutation({
 *   variables: {
 *      updateUploadFolderId: // value for 'updateUploadFolderId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateUploadFolderByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateUploadFolderByIdMutation,
    UpdateUploadFolderByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateUploadFolderByIdMutation,
    UpdateUploadFolderByIdMutationVariables
  >(UpdateUploadFolderByIdDocument, options);
}
export type UpdateUploadFolderByIdMutationHookResult = ReturnType<
  typeof useUpdateUploadFolderByIdMutation
>;
export type UpdateUploadFolderByIdMutationResult =
  Apollo.MutationResult<UpdateUploadFolderByIdMutation>;
export type UpdateUploadFolderByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateUploadFolderByIdMutation,
  UpdateUploadFolderByIdMutationVariables
>;
export const UploadGraphQlDocument = gql`
  mutation uploadGraphQL(
    $refId: ID
    $ref: String
    $field: String
    $info: FileInfoInput
    $file: Upload!
  ) {
    uploadGraphQL(
      refId: $refId
      ref: $ref
      field: $field
      info: $info
      file: $file
    )
  }
`;
export type UploadGraphQlMutationFn = Apollo.MutationFunction<
  UploadGraphQlMutation,
  UploadGraphQlMutationVariables
>;

/**
 * __useUploadGraphQlMutation__
 *
 * To run a mutation, you first call `useUploadGraphQlMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadGraphQlMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadGraphQlMutation, { data, loading, error }] = useUploadGraphQlMutation({
 *   variables: {
 *      refId: // value for 'refId'
 *      ref: // value for 'ref'
 *      field: // value for 'field'
 *      info: // value for 'info'
 *      file: // value for 'file'
 *   },
 * });
 */
export function useUploadGraphQlMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UploadGraphQlMutation,
    UploadGraphQlMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UploadGraphQlMutation,
    UploadGraphQlMutationVariables
  >(UploadGraphQlDocument, options);
}
export type UploadGraphQlMutationHookResult = ReturnType<
  typeof useUploadGraphQlMutation
>;
export type UploadGraphQlMutationResult =
  Apollo.MutationResult<UploadGraphQlMutation>;
export type UploadGraphQlMutationOptions = Apollo.BaseMutationOptions<
  UploadGraphQlMutation,
  UploadGraphQlMutationVariables
>;
export const GetCguByIdDocument = gql`
  query getCguById($cguId: ID) {
    cgu(id: $cguId) {
      data {
        id
        attributes {
          title
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
            }
            ... on Error {
              code
              message
            }
          }
          hasMobile
          isActivated
        }
      }
    }
  }
`;

/**
 * __useGetCguByIdQuery__
 *
 * To run a query within a React component, call `useGetCguByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCguByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCguByIdQuery({
 *   variables: {
 *      cguId: // value for 'cguId'
 *   },
 * });
 */
export function useGetCguByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetCguByIdQuery,
    GetCguByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetCguByIdQuery, GetCguByIdQueryVariables>(
    GetCguByIdDocument,
    options,
  );
}
export function useGetCguByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCguByIdQuery,
    GetCguByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetCguByIdQuery, GetCguByIdQueryVariables>(
    GetCguByIdDocument,
    options,
  );
}
export type GetCguByIdQueryHookResult = ReturnType<typeof useGetCguByIdQuery>;
export type GetCguByIdLazyQueryHookResult = ReturnType<
  typeof useGetCguByIdLazyQuery
>;
export type GetCguByIdQueryResult = Apollo.QueryResult<
  GetCguByIdQuery,
  GetCguByIdQueryVariables
>;
export const GetCguSubServicesByContractIdDocument = gql`
  query getCguSubServicesByContractId($contractId: ID!) {
    cguSubServices(
      filters: { editorialService: { contract: { id: { eq: $contractId } } } }
    ) {
      data {
        id
        attributes {
          cgus {
            data {
              id
              attributes {
                title
                hasMobile
                isActivated
              }
            }
          }
          name
        }
      }
    }
  }
`;

/**
 * __useGetCguSubServicesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetCguSubServicesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCguSubServicesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCguSubServicesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetCguSubServicesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetCguSubServicesByContractIdQuery,
    GetCguSubServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetCguSubServicesByContractIdQuery,
    GetCguSubServicesByContractIdQueryVariables
  >(GetCguSubServicesByContractIdDocument, options);
}
export function useGetCguSubServicesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCguSubServicesByContractIdQuery,
    GetCguSubServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetCguSubServicesByContractIdQuery,
    GetCguSubServicesByContractIdQueryVariables
  >(GetCguSubServicesByContractIdDocument, options);
}
export type GetCguSubServicesByContractIdQueryHookResult = ReturnType<
  typeof useGetCguSubServicesByContractIdQuery
>;
export type GetCguSubServicesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetCguSubServicesByContractIdLazyQuery
>;
export type GetCguSubServicesByContractIdQueryResult = Apollo.QueryResult<
  GetCguSubServicesByContractIdQuery,
  GetCguSubServicesByContractIdQueryVariables
>;
export const UpdateCguByIdDocument = gql`
  mutation updateCguById($updateCguId: ID!, $data: CguInput!) {
    updateCgu(id: $updateCguId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateCguByIdMutationFn = Apollo.MutationFunction<
  UpdateCguByIdMutation,
  UpdateCguByIdMutationVariables
>;

/**
 * __useUpdateCguByIdMutation__
 *
 * To run a mutation, you first call `useUpdateCguByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCguByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCguByIdMutation, { data, loading, error }] = useUpdateCguByIdMutation({
 *   variables: {
 *      updateCguId: // value for 'updateCguId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateCguByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateCguByIdMutation,
    UpdateCguByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateCguByIdMutation,
    UpdateCguByIdMutationVariables
  >(UpdateCguByIdDocument, options);
}
export type UpdateCguByIdMutationHookResult = ReturnType<
  typeof useUpdateCguByIdMutation
>;
export type UpdateCguByIdMutationResult =
  Apollo.MutationResult<UpdateCguByIdMutation>;
export type UpdateCguByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateCguByIdMutation,
  UpdateCguByIdMutationVariables
>;
export const GetConfidentialityByIdDocument = gql`
  query getConfidentialityById($confidentialityId: ID) {
    confidentiality(id: $confidentialityId) {
      data {
        id
        attributes {
          title
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
            }
            ... on Error {
              code
              message
            }
          }
          hasMobile
          isActivated
        }
      }
    }
  }
`;

/**
 * __useGetConfidentialityByIdQuery__
 *
 * To run a query within a React component, call `useGetConfidentialityByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetConfidentialityByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetConfidentialityByIdQuery({
 *   variables: {
 *      confidentialityId: // value for 'confidentialityId'
 *   },
 * });
 */
export function useGetConfidentialityByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetConfidentialityByIdQuery,
    GetConfidentialityByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetConfidentialityByIdQuery,
    GetConfidentialityByIdQueryVariables
  >(GetConfidentialityByIdDocument, options);
}
export function useGetConfidentialityByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetConfidentialityByIdQuery,
    GetConfidentialityByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetConfidentialityByIdQuery,
    GetConfidentialityByIdQueryVariables
  >(GetConfidentialityByIdDocument, options);
}
export type GetConfidentialityByIdQueryHookResult = ReturnType<
  typeof useGetConfidentialityByIdQuery
>;
export type GetConfidentialityByIdLazyQueryHookResult = ReturnType<
  typeof useGetConfidentialityByIdLazyQuery
>;
export type GetConfidentialityByIdQueryResult = Apollo.QueryResult<
  GetConfidentialityByIdQuery,
  GetConfidentialityByIdQueryVariables
>;
export const GetConfidentialitySubServicesByContractIdDocument = gql`
  query getConfidentialitySubServicesByContractId($contractId: ID!) {
    confidentialitySubServices(
      filters: { editorialService: { contract: { id: { eq: $contractId } } } }
    ) {
      data {
        id
        attributes {
          confidentialities {
            data {
              id
              attributes {
                title
                hasMobile
                isActivated
              }
            }
          }
          name
        }
      }
    }
  }
`;

/**
 * __useGetConfidentialitySubServicesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetConfidentialitySubServicesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetConfidentialitySubServicesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetConfidentialitySubServicesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetConfidentialitySubServicesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetConfidentialitySubServicesByContractIdQuery,
    GetConfidentialitySubServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetConfidentialitySubServicesByContractIdQuery,
    GetConfidentialitySubServicesByContractIdQueryVariables
  >(GetConfidentialitySubServicesByContractIdDocument, options);
}
export function useGetConfidentialitySubServicesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetConfidentialitySubServicesByContractIdQuery,
    GetConfidentialitySubServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetConfidentialitySubServicesByContractIdQuery,
    GetConfidentialitySubServicesByContractIdQueryVariables
  >(GetConfidentialitySubServicesByContractIdDocument, options);
}
export type GetConfidentialitySubServicesByContractIdQueryHookResult =
  ReturnType<typeof useGetConfidentialitySubServicesByContractIdQuery>;
export type GetConfidentialitySubServicesByContractIdLazyQueryHookResult =
  ReturnType<typeof useGetConfidentialitySubServicesByContractIdLazyQuery>;
export type GetConfidentialitySubServicesByContractIdQueryResult =
  Apollo.QueryResult<
    GetConfidentialitySubServicesByContractIdQuery,
    GetConfidentialitySubServicesByContractIdQueryVariables
  >;
export const UpdateConfidentialityByIdDocument = gql`
  mutation updateConfidentialityById(
    $updateConfidentialityId: ID!
    $data: ConfidentialityInput!
  ) {
    updateConfidentiality(id: $updateConfidentialityId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateConfidentialityByIdMutationFn = Apollo.MutationFunction<
  UpdateConfidentialityByIdMutation,
  UpdateConfidentialityByIdMutationVariables
>;

/**
 * __useUpdateConfidentialityByIdMutation__
 *
 * To run a mutation, you first call `useUpdateConfidentialityByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateConfidentialityByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateConfidentialityByIdMutation, { data, loading, error }] = useUpdateConfidentialityByIdMutation({
 *   variables: {
 *      updateConfidentialityId: // value for 'updateConfidentialityId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateConfidentialityByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateConfidentialityByIdMutation,
    UpdateConfidentialityByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateConfidentialityByIdMutation,
    UpdateConfidentialityByIdMutationVariables
  >(UpdateConfidentialityByIdDocument, options);
}
export type UpdateConfidentialityByIdMutationHookResult = ReturnType<
  typeof useUpdateConfidentialityByIdMutation
>;
export type UpdateConfidentialityByIdMutationResult =
  Apollo.MutationResult<UpdateConfidentialityByIdMutation>;
export type UpdateConfidentialityByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateConfidentialityByIdMutation,
    UpdateConfidentialityByIdMutationVariables
  >;
export const GetContactUsByIdDocument = gql`
  query getContactUsById($contactUsId: ID) {
    contactUs(id: $contactUsId) {
      data {
        id
        attributes {
          title
          isActivated
          tags {
            data {
              id
              attributes {
                name
              }
            }
          }
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksHorizontalRule {
              id
              hr
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
              isDecorative
              altText
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetContactUsByIdQuery__
 *
 * To run a query within a React component, call `useGetContactUsByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactUsByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactUsByIdQuery({
 *   variables: {
 *      contactUsId: // value for 'contactUsId'
 *   },
 * });
 */
export function useGetContactUsByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetContactUsByIdQuery,
    GetContactUsByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetContactUsByIdQuery, GetContactUsByIdQueryVariables>(
    GetContactUsByIdDocument,
    options,
  );
}
export function useGetContactUsByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetContactUsByIdQuery,
    GetContactUsByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetContactUsByIdQuery,
    GetContactUsByIdQueryVariables
  >(GetContactUsByIdDocument, options);
}
export type GetContactUsByIdQueryHookResult = ReturnType<
  typeof useGetContactUsByIdQuery
>;
export type GetContactUsByIdLazyQueryHookResult = ReturnType<
  typeof useGetContactUsByIdLazyQuery
>;
export type GetContactUsByIdQueryResult = Apollo.QueryResult<
  GetContactUsByIdQuery,
  GetContactUsByIdQueryVariables
>;
export const GetContactUsSubServicesByContractIdDocument = gql`
  query getContactUsSubServicesByContractId($contractId: ID!) {
    contactUsSubServices(
      filters: { editorialService: { contract: { id: { eq: $contractId } } } }
    ) {
      data {
        id
        attributes {
          contactUses {
            data {
              id
              attributes {
                isActivated
                title
              }
            }
          }
          name
          isActivated
        }
      }
    }
  }
`;

/**
 * __useGetContactUsSubServicesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetContactUsSubServicesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactUsSubServicesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactUsSubServicesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetContactUsSubServicesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetContactUsSubServicesByContractIdQuery,
    GetContactUsSubServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetContactUsSubServicesByContractIdQuery,
    GetContactUsSubServicesByContractIdQueryVariables
  >(GetContactUsSubServicesByContractIdDocument, options);
}
export function useGetContactUsSubServicesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetContactUsSubServicesByContractIdQuery,
    GetContactUsSubServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetContactUsSubServicesByContractIdQuery,
    GetContactUsSubServicesByContractIdQueryVariables
  >(GetContactUsSubServicesByContractIdDocument, options);
}
export type GetContactUsSubServicesByContractIdQueryHookResult = ReturnType<
  typeof useGetContactUsSubServicesByContractIdQuery
>;
export type GetContactUsSubServicesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetContactUsSubServicesByContractIdLazyQuery
>;
export type GetContactUsSubServicesByContractIdQueryResult = Apollo.QueryResult<
  GetContactUsSubServicesByContractIdQuery,
  GetContactUsSubServicesByContractIdQueryVariables
>;
export const UpdateContactUsByIdDocument = gql`
  mutation updateContactUsById(
    $updateContactUsId: ID!
    $data: ContactUsInput!
  ) {
    updateContactUs(id: $updateContactUsId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateContactUsByIdMutationFn = Apollo.MutationFunction<
  UpdateContactUsByIdMutation,
  UpdateContactUsByIdMutationVariables
>;

/**
 * __useUpdateContactUsByIdMutation__
 *
 * To run a mutation, you first call `useUpdateContactUsByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateContactUsByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateContactUsByIdMutation, { data, loading, error }] = useUpdateContactUsByIdMutation({
 *   variables: {
 *      updateContactUsId: // value for 'updateContactUsId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateContactUsByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateContactUsByIdMutation,
    UpdateContactUsByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateContactUsByIdMutation,
    UpdateContactUsByIdMutationVariables
  >(UpdateContactUsByIdDocument, options);
}
export type UpdateContactUsByIdMutationHookResult = ReturnType<
  typeof useUpdateContactUsByIdMutation
>;
export type UpdateContactUsByIdMutationResult =
  Apollo.MutationResult<UpdateContactUsByIdMutation>;
export type UpdateContactUsByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateContactUsByIdMutation,
  UpdateContactUsByIdMutationVariables
>;
export const CreateFreeContentDocument = gql`
  mutation createFreeContent($data: FreeContentInput!) {
    createFreeContent(data: $data) {
      data {
        id
        attributes {
          title
          shortDescription
          freeContentSubService {
            data {
              id
            }
          }
          status
          publishedDate
          unpublishedDate
          createdAt
          updatedAt
          tags {
            data {
              id
              attributes {
                name
              }
            }
          }
          image {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                ext
                height
                width
                createdAt
              }
            }
          }
          audiences {
            data {
              id
            }
          }
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksHorizontalRule {
              id
              hr
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
              isDecorative
              altText
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;
export type CreateFreeContentMutationFn = Apollo.MutationFunction<
  CreateFreeContentMutation,
  CreateFreeContentMutationVariables
>;

/**
 * __useCreateFreeContentMutation__
 *
 * To run a mutation, you first call `useCreateFreeContentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateFreeContentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createFreeContentMutation, { data, loading, error }] = useCreateFreeContentMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateFreeContentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateFreeContentMutation,
    CreateFreeContentMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateFreeContentMutation,
    CreateFreeContentMutationVariables
  >(CreateFreeContentDocument, options);
}
export type CreateFreeContentMutationHookResult = ReturnType<
  typeof useCreateFreeContentMutation
>;
export type CreateFreeContentMutationResult =
  Apollo.MutationResult<CreateFreeContentMutation>;
export type CreateFreeContentMutationOptions = Apollo.BaseMutationOptions<
  CreateFreeContentMutation,
  CreateFreeContentMutationVariables
>;
export const DeleteFreeContentByIdDocument = gql`
  mutation deleteFreeContentById($deleteFreeContentId: ID!) {
    deleteFreeContent(id: $deleteFreeContentId) {
      data {
        id
        attributes {
          title
          shortDescription
          freeContentSubService {
            data {
              id
            }
          }
          status
          publishedDate
          unpublishedDate
          createdAt
          updatedAt
          tags {
            data {
              id
              attributes {
                name
              }
            }
          }
          image {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                ext
                height
                width
                createdAt
              }
            }
          }
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksHorizontalRule {
              id
              hr
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
              isDecorative
              altText
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    ext
                    height
                    width
                    createdAt
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;
export type DeleteFreeContentByIdMutationFn = Apollo.MutationFunction<
  DeleteFreeContentByIdMutation,
  DeleteFreeContentByIdMutationVariables
>;

/**
 * __useDeleteFreeContentByIdMutation__
 *
 * To run a mutation, you first call `useDeleteFreeContentByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteFreeContentByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteFreeContentByIdMutation, { data, loading, error }] = useDeleteFreeContentByIdMutation({
 *   variables: {
 *      deleteFreeContentId: // value for 'deleteFreeContentId'
 *   },
 * });
 */
export function useDeleteFreeContentByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteFreeContentByIdMutation,
    DeleteFreeContentByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteFreeContentByIdMutation,
    DeleteFreeContentByIdMutationVariables
  >(DeleteFreeContentByIdDocument, options);
}
export type DeleteFreeContentByIdMutationHookResult = ReturnType<
  typeof useDeleteFreeContentByIdMutation
>;
export type DeleteFreeContentByIdMutationResult =
  Apollo.MutationResult<DeleteFreeContentByIdMutation>;
export type DeleteFreeContentByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteFreeContentByIdMutation,
  DeleteFreeContentByIdMutationVariables
>;
export const GetAllVersionsOfFreeContentByCustomIdDocument = gql`
  query getAllVersionsOfFreeContentByCustomId(
    $contractId: ID!
    $customId: String
    $freeContentSubServiceId: ID!
    $statusFilter: StringFilterInput
    $sort: [String]
    $pagination: PaginationArg
  ) {
    freeContentsCount: freeContents(
      filters: {
        freeContentSubService: {
          id: { eq: $freeContentSubServiceId }
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    freeContentsCountDraft: freeContents(
      filters: {
        freeContentSubService: {
          id: { eq: $freeContentSubServiceId }
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: { eq: "draft" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    freeContentsCountPublished: freeContents(
      filters: {
        freeContentSubService: {
          id: { eq: $freeContentSubServiceId }
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: { eq: "published" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    freeContentsCountArchived: freeContents(
      filters: {
        freeContentSubService: {
          id: { eq: $freeContentSubServiceId }
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: { eq: "archived" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    freeContents(
      filters: {
        freeContentSubService: {
          id: { eq: $freeContentSubServiceId }
          editorialService: { contract: { id: { eq: $contractId } } }
        }
        customId: { eq: $customId }
        status: $statusFilter
      }
      sort: $sort
      pagination: $pagination
    ) {
      meta {
        pagination {
          page
          pageSize
          pageCount
          total
        }
      }
      data {
        id
        attributes {
          freeContentSubService {
            data {
              attributes {
                name
              }
            }
          }
          versionNumber
          status
          publishedDate
          updatedAt
        }
      }
    }
  }
`;

/**
 * __useGetAllVersionsOfFreeContentByCustomIdQuery__
 *
 * To run a query within a React component, call `useGetAllVersionsOfFreeContentByCustomIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllVersionsOfFreeContentByCustomIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllVersionsOfFreeContentByCustomIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      customId: // value for 'customId'
 *      freeContentSubServiceId: // value for 'freeContentSubServiceId'
 *      statusFilter: // value for 'statusFilter'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useGetAllVersionsOfFreeContentByCustomIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAllVersionsOfFreeContentByCustomIdQuery,
    GetAllVersionsOfFreeContentByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAllVersionsOfFreeContentByCustomIdQuery,
    GetAllVersionsOfFreeContentByCustomIdQueryVariables
  >(GetAllVersionsOfFreeContentByCustomIdDocument, options);
}
export function useGetAllVersionsOfFreeContentByCustomIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAllVersionsOfFreeContentByCustomIdQuery,
    GetAllVersionsOfFreeContentByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAllVersionsOfFreeContentByCustomIdQuery,
    GetAllVersionsOfFreeContentByCustomIdQueryVariables
  >(GetAllVersionsOfFreeContentByCustomIdDocument, options);
}
export type GetAllVersionsOfFreeContentByCustomIdQueryHookResult = ReturnType<
  typeof useGetAllVersionsOfFreeContentByCustomIdQuery
>;
export type GetAllVersionsOfFreeContentByCustomIdLazyQueryHookResult =
  ReturnType<typeof useGetAllVersionsOfFreeContentByCustomIdLazyQuery>;
export type GetAllVersionsOfFreeContentByCustomIdQueryResult =
  Apollo.QueryResult<
    GetAllVersionsOfFreeContentByCustomIdQuery,
    GetAllVersionsOfFreeContentByCustomIdQueryVariables
  >;
export const GetFreeContentByIdDocument = gql`
  query getFreeContentById($freeContentId: ID) {
    freeContent(id: $freeContentId) {
      data {
        id
        attributes {
          customId
          draftCreationId
          title
          shortDescription
          freeContentSubService {
            data {
              id
            }
          }
          status
          publishedDate
          unpublishedDate
          createdAt
          updatedAt
          tags {
            data {
              id
              attributes {
                name
              }
            }
          }
          image {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                ext
                height
                width
                createdAt
              }
            }
          }
          audiences {
            data {
              id
              attributes {
                type
                isActive
              }
            }
          }
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksHorizontalRule {
              id
              hr
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
              isDecorative
              altText
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
            }
            ... on ComponentBlocksServices {
              id
              serviceLinksData
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetFreeContentByIdQuery__
 *
 * To run a query within a React component, call `useGetFreeContentByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFreeContentByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFreeContentByIdQuery({
 *   variables: {
 *      freeContentId: // value for 'freeContentId'
 *   },
 * });
 */
export function useGetFreeContentByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetFreeContentByIdQuery,
    GetFreeContentByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetFreeContentByIdQuery,
    GetFreeContentByIdQueryVariables
  >(GetFreeContentByIdDocument, options);
}
export function useGetFreeContentByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFreeContentByIdQuery,
    GetFreeContentByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetFreeContentByIdQuery,
    GetFreeContentByIdQueryVariables
  >(GetFreeContentByIdDocument, options);
}
export type GetFreeContentByIdQueryHookResult = ReturnType<
  typeof useGetFreeContentByIdQuery
>;
export type GetFreeContentByIdLazyQueryHookResult = ReturnType<
  typeof useGetFreeContentByIdLazyQuery
>;
export type GetFreeContentByIdQueryResult = Apollo.QueryResult<
  GetFreeContentByIdQuery,
  GetFreeContentByIdQueryVariables
>;
export const GetFreeContentSubServiceByIdDocument = gql`
  query getFreeContentSubServiceById($freeContentSubServiceId: ID) {
    freeContentSubService(id: $freeContentSubServiceId) {
      data {
        id
        attributes {
          name
          isActivated
        }
      }
    }
  }
`;

/**
 * __useGetFreeContentSubServiceByIdQuery__
 *
 * To run a query within a React component, call `useGetFreeContentSubServiceByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFreeContentSubServiceByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFreeContentSubServiceByIdQuery({
 *   variables: {
 *      freeContentSubServiceId: // value for 'freeContentSubServiceId'
 *   },
 * });
 */
export function useGetFreeContentSubServiceByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetFreeContentSubServiceByIdQuery,
    GetFreeContentSubServiceByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetFreeContentSubServiceByIdQuery,
    GetFreeContentSubServiceByIdQueryVariables
  >(GetFreeContentSubServiceByIdDocument, options);
}
export function useGetFreeContentSubServiceByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFreeContentSubServiceByIdQuery,
    GetFreeContentSubServiceByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetFreeContentSubServiceByIdQuery,
    GetFreeContentSubServiceByIdQueryVariables
  >(GetFreeContentSubServiceByIdDocument, options);
}
export type GetFreeContentSubServiceByIdQueryHookResult = ReturnType<
  typeof useGetFreeContentSubServiceByIdQuery
>;
export type GetFreeContentSubServiceByIdLazyQueryHookResult = ReturnType<
  typeof useGetFreeContentSubServiceByIdLazyQuery
>;
export type GetFreeContentSubServiceByIdQueryResult = Apollo.QueryResult<
  GetFreeContentSubServiceByIdQuery,
  GetFreeContentSubServiceByIdQueryVariables
>;
export const GetFreeContentsBySubServiceIdDocument = gql`
  query getFreeContentsBySubServiceId(
    $freeContentSubServiceId: ID!
    $statusFilter: StringFilterInput
    $sort: [String]
    $pagination: PaginationArg
  ) {
    freeContentsCount: freeContents(
      filters: {
        freeContentSubService: { id: { eq: $freeContentSubServiceId } }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    freeContentsCountDraft: freeContents(
      filters: {
        freeContentSubService: { id: { eq: $freeContentSubServiceId } }
        status: { eq: "draft" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    freeContentsCountPublished: freeContents(
      filters: {
        freeContentSubService: { id: { eq: $freeContentSubServiceId } }
        status: { eq: "published" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    freeContentsCountArchived: freeContents(
      filters: {
        freeContentSubService: { id: { eq: $freeContentSubServiceId } }
        status: { eq: "archived" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    freeContents(
      filters: {
        freeContentSubService: { id: { eq: $freeContentSubServiceId } }
        status: $statusFilter
      }
      sort: $sort
      pagination: $pagination
    ) {
      meta {
        pagination {
          page
          pageSize
          pageCount
          total
        }
      }
      data {
        id
        attributes {
          title
          shortDescription
          status
          publishedDate
          unpublishedDate
        }
      }
    }
  }
`;

/**
 * __useGetFreeContentsBySubServiceIdQuery__
 *
 * To run a query within a React component, call `useGetFreeContentsBySubServiceIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFreeContentsBySubServiceIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFreeContentsBySubServiceIdQuery({
 *   variables: {
 *      freeContentSubServiceId: // value for 'freeContentSubServiceId'
 *      statusFilter: // value for 'statusFilter'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useGetFreeContentsBySubServiceIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFreeContentsBySubServiceIdQuery,
    GetFreeContentsBySubServiceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetFreeContentsBySubServiceIdQuery,
    GetFreeContentsBySubServiceIdQueryVariables
  >(GetFreeContentsBySubServiceIdDocument, options);
}
export function useGetFreeContentsBySubServiceIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFreeContentsBySubServiceIdQuery,
    GetFreeContentsBySubServiceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetFreeContentsBySubServiceIdQuery,
    GetFreeContentsBySubServiceIdQueryVariables
  >(GetFreeContentsBySubServiceIdDocument, options);
}
export type GetFreeContentsBySubServiceIdQueryHookResult = ReturnType<
  typeof useGetFreeContentsBySubServiceIdQuery
>;
export type GetFreeContentsBySubServiceIdLazyQueryHookResult = ReturnType<
  typeof useGetFreeContentsBySubServiceIdLazyQuery
>;
export type GetFreeContentsBySubServiceIdQueryResult = Apollo.QueryResult<
  GetFreeContentsBySubServiceIdQuery,
  GetFreeContentsBySubServiceIdQueryVariables
>;
export const GetFreeContentsDraftByCustomIdDocument = gql`
  query getFreeContentsDraftByCustomId($customId: String!) {
    freeContents(
      filters: { customId: { eq: $customId }, status: { eq: "draft" } }
    ) {
      data {
        id
      }
    }
  }
`;

/**
 * __useGetFreeContentsDraftByCustomIdQuery__
 *
 * To run a query within a React component, call `useGetFreeContentsDraftByCustomIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFreeContentsDraftByCustomIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFreeContentsDraftByCustomIdQuery({
 *   variables: {
 *      customId: // value for 'customId'
 *   },
 * });
 */
export function useGetFreeContentsDraftByCustomIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFreeContentsDraftByCustomIdQuery,
    GetFreeContentsDraftByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetFreeContentsDraftByCustomIdQuery,
    GetFreeContentsDraftByCustomIdQueryVariables
  >(GetFreeContentsDraftByCustomIdDocument, options);
}
export function useGetFreeContentsDraftByCustomIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFreeContentsDraftByCustomIdQuery,
    GetFreeContentsDraftByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetFreeContentsDraftByCustomIdQuery,
    GetFreeContentsDraftByCustomIdQueryVariables
  >(GetFreeContentsDraftByCustomIdDocument, options);
}
export type GetFreeContentsDraftByCustomIdQueryHookResult = ReturnType<
  typeof useGetFreeContentsDraftByCustomIdQuery
>;
export type GetFreeContentsDraftByCustomIdLazyQueryHookResult = ReturnType<
  typeof useGetFreeContentsDraftByCustomIdLazyQuery
>;
export type GetFreeContentsDraftByCustomIdQueryResult = Apollo.QueryResult<
  GetFreeContentsDraftByCustomIdQuery,
  GetFreeContentsDraftByCustomIdQueryVariables
>;
export const UpdateFreeContentByIdDocument = gql`
  mutation updateFreeContentById($updateFreeContentId: ID!, $data: JSON!) {
    versioningHandler(
      data: { id: $updateFreeContentId, data: $data }
      entity: "freeContent"
    ) {
      data {
        ... on FreeContentEntity {
          id
          attributes {
            customId
          }
        }
      }
    }
  }
`;
export type UpdateFreeContentByIdMutationFn = Apollo.MutationFunction<
  UpdateFreeContentByIdMutation,
  UpdateFreeContentByIdMutationVariables
>;

/**
 * __useUpdateFreeContentByIdMutation__
 *
 * To run a mutation, you first call `useUpdateFreeContentByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFreeContentByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFreeContentByIdMutation, { data, loading, error }] = useUpdateFreeContentByIdMutation({
 *   variables: {
 *      updateFreeContentId: // value for 'updateFreeContentId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateFreeContentByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateFreeContentByIdMutation,
    UpdateFreeContentByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateFreeContentByIdMutation,
    UpdateFreeContentByIdMutationVariables
  >(UpdateFreeContentByIdDocument, options);
}
export type UpdateFreeContentByIdMutationHookResult = ReturnType<
  typeof useUpdateFreeContentByIdMutation
>;
export type UpdateFreeContentByIdMutationResult =
  Apollo.MutationResult<UpdateFreeContentByIdMutation>;
export type UpdateFreeContentByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateFreeContentByIdMutation,
  UpdateFreeContentByIdMutationVariables
>;
export const GetCookieByIdDocument = gql`
  query getCookieById($cookieId: ID) {
    cookie(id: $cookieId) {
      data {
        id
        attributes {
          title
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksHorizontalRule {
              id
              hr
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
            }
            ... on Error {
              code
              message
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    name
                    alternativeText
                    mime
                    size
                    url
                    provider
                    hash
                  }
                }
              }
              isDecorative
              altText
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
          }
          hasMobile
          isActivated
        }
      }
    }
  }
`;

/**
 * __useGetCookieByIdQuery__
 *
 * To run a query within a React component, call `useGetCookieByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCookieByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCookieByIdQuery({
 *   variables: {
 *      cookieId: // value for 'cookieId'
 *   },
 * });
 */
export function useGetCookieByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetCookieByIdQuery,
    GetCookieByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetCookieByIdQuery, GetCookieByIdQueryVariables>(
    GetCookieByIdDocument,
    options,
  );
}
export function useGetCookieByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCookieByIdQuery,
    GetCookieByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetCookieByIdQuery, GetCookieByIdQueryVariables>(
    GetCookieByIdDocument,
    options,
  );
}
export type GetCookieByIdQueryHookResult = ReturnType<
  typeof useGetCookieByIdQuery
>;
export type GetCookieByIdLazyQueryHookResult = ReturnType<
  typeof useGetCookieByIdLazyQuery
>;
export type GetCookieByIdQueryResult = Apollo.QueryResult<
  GetCookieByIdQuery,
  GetCookieByIdQueryVariables
>;
export const GetCookiesSubServicesByContractIdDocument = gql`
  query getCookiesSubServicesByContractId($contractId: ID!) {
    cookiesSubServices(
      filters: { editorialService: { contract: { id: { eq: $contractId } } } }
    ) {
      data {
        id
        attributes {
          cookies {
            data {
              id
              attributes {
                title
                hasMobile
                isActivated
              }
            }
          }
          name
        }
      }
    }
  }
`;

/**
 * __useGetCookiesSubServicesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetCookiesSubServicesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCookiesSubServicesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCookiesSubServicesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetCookiesSubServicesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetCookiesSubServicesByContractIdQuery,
    GetCookiesSubServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetCookiesSubServicesByContractIdQuery,
    GetCookiesSubServicesByContractIdQueryVariables
  >(GetCookiesSubServicesByContractIdDocument, options);
}
export function useGetCookiesSubServicesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCookiesSubServicesByContractIdQuery,
    GetCookiesSubServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetCookiesSubServicesByContractIdQuery,
    GetCookiesSubServicesByContractIdQueryVariables
  >(GetCookiesSubServicesByContractIdDocument, options);
}
export type GetCookiesSubServicesByContractIdQueryHookResult = ReturnType<
  typeof useGetCookiesSubServicesByContractIdQuery
>;
export type GetCookiesSubServicesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetCookiesSubServicesByContractIdLazyQuery
>;
export type GetCookiesSubServicesByContractIdQueryResult = Apollo.QueryResult<
  GetCookiesSubServicesByContractIdQuery,
  GetCookiesSubServicesByContractIdQueryVariables
>;
export const UpdateCookieByIdDocument = gql`
  mutation updateCookieById($updateCookieId: ID!, $data: CookieInput!) {
    updateCookie(id: $updateCookieId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateCookieByIdMutationFn = Apollo.MutationFunction<
  UpdateCookieByIdMutation,
  UpdateCookieByIdMutationVariables
>;

/**
 * __useUpdateCookieByIdMutation__
 *
 * To run a mutation, you first call `useUpdateCookieByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCookieByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCookieByIdMutation, { data, loading, error }] = useUpdateCookieByIdMutation({
 *   variables: {
 *      updateCookieId: // value for 'updateCookieId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateCookieByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateCookieByIdMutation,
    UpdateCookieByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateCookieByIdMutation,
    UpdateCookieByIdMutationVariables
  >(UpdateCookieByIdDocument, options);
}
export type UpdateCookieByIdMutationHookResult = ReturnType<
  typeof useUpdateCookieByIdMutation
>;
export type UpdateCookieByIdMutationResult =
  Apollo.MutationResult<UpdateCookieByIdMutation>;
export type UpdateCookieByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateCookieByIdMutation,
  UpdateCookieByIdMutationVariables
>;
export const GetActivedServicesByContractIdDocument = gql`
  query getActivedServicesByContractId($contractId: ID!, $today: Date!) {
    editorialServices(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        id
      }
    }
    recyclingGuideServices(
      filters: {
        contract: {
          id: { eq: $contractId }
          recyclingGuideService: {
            isActivated: { eq: true }
            startDate: { lte: $today }
            endDate: { gte: $today }
          }
        }
      }
    ) {
      data {
        id
        attributes {
          name
        }
      }
    }
    requestServices(
      filters: {
        contract: {
          id: { eq: $contractId }
          requestService: {
            isActivated: { eq: true }
            startDate: { lte: $today }
            endDate: { gte: $today }
          }
        }
      }
    ) {
      data {
        id
        attributes {
          name
        }
      }
    }
    dropOffMapServices(
      filters: {
        contract: {
          id: { eq: $contractId }
          dropOffMapService: {
            isActivated: { eq: true }
            startDate: { lte: $today }
            endDate: { gte: $today }
          }
        }
      }
    ) {
      data {
        id
        attributes {
          name
        }
      }
    }
    alertNotificationServices(
      filters: {
        contract: {
          id: { eq: $contractId }
          alertNotificationService: {
            isActivated: { eq: true }
            startDate: { lte: $today }
            endDate: { gte: $today }
          }
        }
      }
    ) {
      data {
        id
        attributes {
          name
        }
      }
    }
    pickUpDayServices(
      filters: {
        contract: {
          id: { eq: $contractId }
          pickUpDayService: {
            isActivated: { eq: true }
            startDate: { lte: $today }
            endDate: { gte: $today }
          }
        }
      }
    ) {
      data {
        id
        attributes {
          name
        }
      }
    }
  }
`;

/**
 * __useGetActivedServicesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetActivedServicesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetActivedServicesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetActivedServicesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      today: // value for 'today'
 *   },
 * });
 */
export function useGetActivedServicesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetActivedServicesByContractIdQuery,
    GetActivedServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetActivedServicesByContractIdQuery,
    GetActivedServicesByContractIdQueryVariables
  >(GetActivedServicesByContractIdDocument, options);
}
export function useGetActivedServicesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetActivedServicesByContractIdQuery,
    GetActivedServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetActivedServicesByContractIdQuery,
    GetActivedServicesByContractIdQueryVariables
  >(GetActivedServicesByContractIdDocument, options);
}
export type GetActivedServicesByContractIdQueryHookResult = ReturnType<
  typeof useGetActivedServicesByContractIdQuery
>;
export type GetActivedServicesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetActivedServicesByContractIdLazyQuery
>;
export type GetActivedServicesByContractIdQueryResult = Apollo.QueryResult<
  GetActivedServicesByContractIdQuery,
  GetActivedServicesByContractIdQueryVariables
>;
export const GetBlockServicesSubSelectionDocument = gql`
  query getBlockServicesSubSelection(
    $audience: ID
    $selectedService: LinkServiceType!
    $serviceId: ID!
  ) {
    getEditoContentLinkedServices(
      audience: $audience
      selectedService: $selectedService
      serviceId: $serviceId
    ) {
      elements {
        id
        name
        type
        idFreeContentSubService
      }
    }
  }
`;

/**
 * __useGetBlockServicesSubSelectionQuery__
 *
 * To run a query within a React component, call `useGetBlockServicesSubSelectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBlockServicesSubSelectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBlockServicesSubSelectionQuery({
 *   variables: {
 *      audience: // value for 'audience'
 *      selectedService: // value for 'selectedService'
 *      serviceId: // value for 'serviceId'
 *   },
 * });
 */
export function useGetBlockServicesSubSelectionQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetBlockServicesSubSelectionQuery,
    GetBlockServicesSubSelectionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetBlockServicesSubSelectionQuery,
    GetBlockServicesSubSelectionQueryVariables
  >(GetBlockServicesSubSelectionDocument, options);
}
export function useGetBlockServicesSubSelectionLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetBlockServicesSubSelectionQuery,
    GetBlockServicesSubSelectionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetBlockServicesSubSelectionQuery,
    GetBlockServicesSubSelectionQueryVariables
  >(GetBlockServicesSubSelectionDocument, options);
}
export type GetBlockServicesSubSelectionQueryHookResult = ReturnType<
  typeof useGetBlockServicesSubSelectionQuery
>;
export type GetBlockServicesSubSelectionLazyQueryHookResult = ReturnType<
  typeof useGetBlockServicesSubSelectionLazyQuery
>;
export type GetBlockServicesSubSelectionQueryResult = Apollo.QueryResult<
  GetBlockServicesSubSelectionQuery,
  GetBlockServicesSubSelectionQueryVariables
>;
export const GetTagsByContractIdDocument = gql`
  query getTagsByContractId($contractId: ID) {
    tags(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        id
        attributes {
          name
        }
      }
    }
  }
`;

/**
 * __useGetTagsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetTagsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTagsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTagsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetTagsByContractIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetTagsByContractIdQuery,
    GetTagsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetTagsByContractIdQuery,
    GetTagsByContractIdQueryVariables
  >(GetTagsByContractIdDocument, options);
}
export function useGetTagsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTagsByContractIdQuery,
    GetTagsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetTagsByContractIdQuery,
    GetTagsByContractIdQueryVariables
  >(GetTagsByContractIdDocument, options);
}
export type GetTagsByContractIdQueryHookResult = ReturnType<
  typeof useGetTagsByContractIdQuery
>;
export type GetTagsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetTagsByContractIdLazyQuery
>;
export type GetTagsByContractIdQueryResult = Apollo.QueryResult<
  GetTagsByContractIdQuery,
  GetTagsByContractIdQueryVariables
>;
export const CreateNewTagDocument = gql`
  mutation createNewTag($contractId: ID!, $tagName: String!) {
    createNewTag(contractId: $contractId, tagName: $tagName) {
      contractId
      id
      name
    }
  }
`;
export type CreateNewTagMutationFn = Apollo.MutationFunction<
  CreateNewTagMutation,
  CreateNewTagMutationVariables
>;

/**
 * __useCreateNewTagMutation__
 *
 * To run a mutation, you first call `useCreateNewTagMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateNewTagMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createNewTagMutation, { data, loading, error }] = useCreateNewTagMutation({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      tagName: // value for 'tagName'
 *   },
 * });
 */
export function useCreateNewTagMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateNewTagMutation,
    CreateNewTagMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateNewTagMutation,
    CreateNewTagMutationVariables
  >(CreateNewTagDocument, options);
}
export type CreateNewTagMutationHookResult = ReturnType<
  typeof useCreateNewTagMutation
>;
export type CreateNewTagMutationResult =
  Apollo.MutationResult<CreateNewTagMutation>;
export type CreateNewTagMutationOptions = Apollo.BaseMutationOptions<
  CreateNewTagMutation,
  CreateNewTagMutationVariables
>;
export const DeleteTagByIdDocument = gql`
  mutation deleteTagById($deleteTagId: ID!) {
    deleteTag(id: $deleteTagId) {
      data {
        id
        attributes {
          name
          createdAt
        }
      }
    }
  }
`;
export type DeleteTagByIdMutationFn = Apollo.MutationFunction<
  DeleteTagByIdMutation,
  DeleteTagByIdMutationVariables
>;

/**
 * __useDeleteTagByIdMutation__
 *
 * To run a mutation, you first call `useDeleteTagByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteTagByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteTagByIdMutation, { data, loading, error }] = useDeleteTagByIdMutation({
 *   variables: {
 *      deleteTagId: // value for 'deleteTagId'
 *   },
 * });
 */
export function useDeleteTagByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteTagByIdMutation,
    DeleteTagByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteTagByIdMutation,
    DeleteTagByIdMutationVariables
  >(DeleteTagByIdDocument, options);
}
export type DeleteTagByIdMutationHookResult = ReturnType<
  typeof useDeleteTagByIdMutation
>;
export type DeleteTagByIdMutationResult =
  Apollo.MutationResult<DeleteTagByIdMutation>;
export type DeleteTagByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteTagByIdMutation,
  DeleteTagByIdMutationVariables
>;
export const GetCountContentPerTagByContractIdDocument = gql`
  query getCountContentPerTagByContractId($contractId: ID!) {
    countContentPerTag(contractId: $contractId) {
      id
      name
      count
    }
  }
`;

/**
 * __useGetCountContentPerTagByContractIdQuery__
 *
 * To run a query within a React component, call `useGetCountContentPerTagByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCountContentPerTagByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCountContentPerTagByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetCountContentPerTagByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetCountContentPerTagByContractIdQuery,
    GetCountContentPerTagByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetCountContentPerTagByContractIdQuery,
    GetCountContentPerTagByContractIdQueryVariables
  >(GetCountContentPerTagByContractIdDocument, options);
}
export function useGetCountContentPerTagByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCountContentPerTagByContractIdQuery,
    GetCountContentPerTagByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetCountContentPerTagByContractIdQuery,
    GetCountContentPerTagByContractIdQueryVariables
  >(GetCountContentPerTagByContractIdDocument, options);
}
export type GetCountContentPerTagByContractIdQueryHookResult = ReturnType<
  typeof useGetCountContentPerTagByContractIdQuery
>;
export type GetCountContentPerTagByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetCountContentPerTagByContractIdLazyQuery
>;
export type GetCountContentPerTagByContractIdQueryResult = Apollo.QueryResult<
  GetCountContentPerTagByContractIdQuery,
  GetCountContentPerTagByContractIdQueryVariables
>;
export const UpdateTagByIdDocument = gql`
  mutation updateTagById($updateTagId: ID!, $data: TagInput!) {
    updateTag(id: $updateTagId, data: $data) {
      data {
        id
        attributes {
          name
          createdAt
        }
      }
    }
  }
`;
export type UpdateTagByIdMutationFn = Apollo.MutationFunction<
  UpdateTagByIdMutation,
  UpdateTagByIdMutationVariables
>;

/**
 * __useUpdateTagByIdMutation__
 *
 * To run a mutation, you first call `useUpdateTagByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTagByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTagByIdMutation, { data, loading, error }] = useUpdateTagByIdMutation({
 *   variables: {
 *      updateTagId: // value for 'updateTagId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTagByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateTagByIdMutation,
    UpdateTagByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateTagByIdMutation,
    UpdateTagByIdMutationVariables
  >(UpdateTagByIdDocument, options);
}
export type UpdateTagByIdMutationHookResult = ReturnType<
  typeof useUpdateTagByIdMutation
>;
export type UpdateTagByIdMutationResult =
  Apollo.MutationResult<UpdateTagByIdMutation>;
export type UpdateTagByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateTagByIdMutation,
  UpdateTagByIdMutationVariables
>;
export const CreateContentTypeForContractIdDocument = gql`
  mutation createContentTypeForContractId(
    $contractId: ID
    $name: String
    $description: String
  ) {
    createContentTypeForContractId(
      contractId: $contractId
      name: $name
      description: $description
    ) {
      id
    }
  }
`;
export type CreateContentTypeForContractIdMutationFn = Apollo.MutationFunction<
  CreateContentTypeForContractIdMutation,
  CreateContentTypeForContractIdMutationVariables
>;

/**
 * __useCreateContentTypeForContractIdMutation__
 *
 * To run a mutation, you first call `useCreateContentTypeForContractIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateContentTypeForContractIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createContentTypeForContractIdMutation, { data, loading, error }] = useCreateContentTypeForContractIdMutation({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      name: // value for 'name'
 *      description: // value for 'description'
 *   },
 * });
 */
export function useCreateContentTypeForContractIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateContentTypeForContractIdMutation,
    CreateContentTypeForContractIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateContentTypeForContractIdMutation,
    CreateContentTypeForContractIdMutationVariables
  >(CreateContentTypeForContractIdDocument, options);
}
export type CreateContentTypeForContractIdMutationHookResult = ReturnType<
  typeof useCreateContentTypeForContractIdMutation
>;
export type CreateContentTypeForContractIdMutationResult =
  Apollo.MutationResult<CreateContentTypeForContractIdMutation>;
export type CreateContentTypeForContractIdMutationOptions =
  Apollo.BaseMutationOptions<
    CreateContentTypeForContractIdMutation,
    CreateContentTypeForContractIdMutationVariables
  >;
export const GetContentTypesByContractIdDocument = gql`
  query getContentTypesByContractId($contractId: ID!) {
    getContentTypeDTOs(contractId: $contractId) {
      subServiceId
      type
      name
      description
    }
  }
`;

/**
 * __useGetContentTypesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetContentTypesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContentTypesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContentTypesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetContentTypesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetContentTypesByContractIdQuery,
    GetContentTypesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetContentTypesByContractIdQuery,
    GetContentTypesByContractIdQueryVariables
  >(GetContentTypesByContractIdDocument, options);
}
export function useGetContentTypesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetContentTypesByContractIdQuery,
    GetContentTypesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetContentTypesByContractIdQuery,
    GetContentTypesByContractIdQueryVariables
  >(GetContentTypesByContractIdDocument, options);
}
export type GetContentTypesByContractIdQueryHookResult = ReturnType<
  typeof useGetContentTypesByContractIdQuery
>;
export type GetContentTypesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetContentTypesByContractIdLazyQuery
>;
export type GetContentTypesByContractIdQueryResult = Apollo.QueryResult<
  GetContentTypesByContractIdQuery,
  GetContentTypesByContractIdQueryVariables
>;
export const UpdateCookiesSubServiceByIdDocument = gql`
  mutation updateCookiesSubServiceById(
    $updateSubServiceId: ID!
    $data: CookiesSubServiceInput!
  ) {
    updateCookiesSubService(id: $updateSubServiceId, data: $data) {
      data {
        id
        attributes {
          name
          description
        }
      }
    }
  }
`;
export type UpdateCookiesSubServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateCookiesSubServiceByIdMutation,
  UpdateCookiesSubServiceByIdMutationVariables
>;

/**
 * __useUpdateCookiesSubServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateCookiesSubServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCookiesSubServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCookiesSubServiceByIdMutation, { data, loading, error }] = useUpdateCookiesSubServiceByIdMutation({
 *   variables: {
 *      updateSubServiceId: // value for 'updateSubServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateCookiesSubServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateCookiesSubServiceByIdMutation,
    UpdateCookiesSubServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateCookiesSubServiceByIdMutation,
    UpdateCookiesSubServiceByIdMutationVariables
  >(UpdateCookiesSubServiceByIdDocument, options);
}
export type UpdateCookiesSubServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateCookiesSubServiceByIdMutation
>;
export type UpdateCookiesSubServiceByIdMutationResult =
  Apollo.MutationResult<UpdateCookiesSubServiceByIdMutation>;
export type UpdateCookiesSubServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateCookiesSubServiceByIdMutation,
    UpdateCookiesSubServiceByIdMutationVariables
  >;
export const UpdateAccessibilitySubServiceByIdDocument = gql`
  mutation updateAccessibilitySubServiceById(
    $updateSubServiceId: ID!
    $data: AccessibilitySubServiceInput!
  ) {
    updateAccessibilitySubService(id: $updateSubServiceId, data: $data) {
      data {
        id
        attributes {
          name
          description
        }
      }
    }
  }
`;
export type UpdateAccessibilitySubServiceByIdMutationFn =
  Apollo.MutationFunction<
    UpdateAccessibilitySubServiceByIdMutation,
    UpdateAccessibilitySubServiceByIdMutationVariables
  >;

/**
 * __useUpdateAccessibilitySubServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateAccessibilitySubServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAccessibilitySubServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAccessibilitySubServiceByIdMutation, { data, loading, error }] = useUpdateAccessibilitySubServiceByIdMutation({
 *   variables: {
 *      updateSubServiceId: // value for 'updateSubServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateAccessibilitySubServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAccessibilitySubServiceByIdMutation,
    UpdateAccessibilitySubServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateAccessibilitySubServiceByIdMutation,
    UpdateAccessibilitySubServiceByIdMutationVariables
  >(UpdateAccessibilitySubServiceByIdDocument, options);
}
export type UpdateAccessibilitySubServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateAccessibilitySubServiceByIdMutation
>;
export type UpdateAccessibilitySubServiceByIdMutationResult =
  Apollo.MutationResult<UpdateAccessibilitySubServiceByIdMutation>;
export type UpdateAccessibilitySubServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateAccessibilitySubServiceByIdMutation,
    UpdateAccessibilitySubServiceByIdMutationVariables
  >;
export const UpdateContactUsSubServiceByIdDocument = gql`
  mutation updateContactUsSubServiceById(
    $updateSubServiceId: ID!
    $data: ContactUsSubServiceInput!
  ) {
    updateContactUsSubService(id: $updateSubServiceId, data: $data) {
      data {
        id
        attributes {
          name
          description
        }
      }
    }
  }
`;
export type UpdateContactUsSubServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateContactUsSubServiceByIdMutation,
  UpdateContactUsSubServiceByIdMutationVariables
>;

/**
 * __useUpdateContactUsSubServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateContactUsSubServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateContactUsSubServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateContactUsSubServiceByIdMutation, { data, loading, error }] = useUpdateContactUsSubServiceByIdMutation({
 *   variables: {
 *      updateSubServiceId: // value for 'updateSubServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateContactUsSubServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateContactUsSubServiceByIdMutation,
    UpdateContactUsSubServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateContactUsSubServiceByIdMutation,
    UpdateContactUsSubServiceByIdMutationVariables
  >(UpdateContactUsSubServiceByIdDocument, options);
}
export type UpdateContactUsSubServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateContactUsSubServiceByIdMutation
>;
export type UpdateContactUsSubServiceByIdMutationResult =
  Apollo.MutationResult<UpdateContactUsSubServiceByIdMutation>;
export type UpdateContactUsSubServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateContactUsSubServiceByIdMutation,
    UpdateContactUsSubServiceByIdMutationVariables
  >;
export const UpdateCguSubServiceByIdDocument = gql`
  mutation updateCguSubServiceById(
    $updateSubServiceId: ID!
    $data: CguSubServiceInput!
  ) {
    updateCguSubService(id: $updateSubServiceId, data: $data) {
      data {
        id
        attributes {
          name
          description
        }
      }
    }
  }
`;
export type UpdateCguSubServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateCguSubServiceByIdMutation,
  UpdateCguSubServiceByIdMutationVariables
>;

/**
 * __useUpdateCguSubServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateCguSubServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCguSubServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCguSubServiceByIdMutation, { data, loading, error }] = useUpdateCguSubServiceByIdMutation({
 *   variables: {
 *      updateSubServiceId: // value for 'updateSubServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateCguSubServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateCguSubServiceByIdMutation,
    UpdateCguSubServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateCguSubServiceByIdMutation,
    UpdateCguSubServiceByIdMutationVariables
  >(UpdateCguSubServiceByIdDocument, options);
}
export type UpdateCguSubServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateCguSubServiceByIdMutation
>;
export type UpdateCguSubServiceByIdMutationResult =
  Apollo.MutationResult<UpdateCguSubServiceByIdMutation>;
export type UpdateCguSubServiceByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateCguSubServiceByIdMutation,
  UpdateCguSubServiceByIdMutationVariables
>;
export const UpdateConfidentialitySubServiceByIdDocument = gql`
  mutation updateConfidentialitySubServiceById(
    $updateSubServiceId: ID!
    $data: ConfidentialitySubServiceInput!
  ) {
    updateConfidentialitySubService(id: $updateSubServiceId, data: $data) {
      data {
        id
        attributes {
          name
          description
        }
      }
    }
  }
`;
export type UpdateConfidentialitySubServiceByIdMutationFn =
  Apollo.MutationFunction<
    UpdateConfidentialitySubServiceByIdMutation,
    UpdateConfidentialitySubServiceByIdMutationVariables
  >;

/**
 * __useUpdateConfidentialitySubServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateConfidentialitySubServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateConfidentialitySubServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateConfidentialitySubServiceByIdMutation, { data, loading, error }] = useUpdateConfidentialitySubServiceByIdMutation({
 *   variables: {
 *      updateSubServiceId: // value for 'updateSubServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateConfidentialitySubServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateConfidentialitySubServiceByIdMutation,
    UpdateConfidentialitySubServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateConfidentialitySubServiceByIdMutation,
    UpdateConfidentialitySubServiceByIdMutationVariables
  >(UpdateConfidentialitySubServiceByIdDocument, options);
}
export type UpdateConfidentialitySubServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateConfidentialitySubServiceByIdMutation
>;
export type UpdateConfidentialitySubServiceByIdMutationResult =
  Apollo.MutationResult<UpdateConfidentialitySubServiceByIdMutation>;
export type UpdateConfidentialitySubServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateConfidentialitySubServiceByIdMutation,
    UpdateConfidentialitySubServiceByIdMutationVariables
  >;
export const UpdateNewsSubServiceByIdDocument = gql`
  mutation updateNewsSubServiceById(
    $updateSubServiceId: ID!
    $data: NewsSubServiceInput!
  ) {
    updateNewsSubService(id: $updateSubServiceId, data: $data) {
      data {
        id
        attributes {
          name
          description
        }
      }
    }
  }
`;
export type UpdateNewsSubServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateNewsSubServiceByIdMutation,
  UpdateNewsSubServiceByIdMutationVariables
>;

/**
 * __useUpdateNewsSubServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateNewsSubServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateNewsSubServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateNewsSubServiceByIdMutation, { data, loading, error }] = useUpdateNewsSubServiceByIdMutation({
 *   variables: {
 *      updateSubServiceId: // value for 'updateSubServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateNewsSubServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateNewsSubServiceByIdMutation,
    UpdateNewsSubServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateNewsSubServiceByIdMutation,
    UpdateNewsSubServiceByIdMutationVariables
  >(UpdateNewsSubServiceByIdDocument, options);
}
export type UpdateNewsSubServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateNewsSubServiceByIdMutation
>;
export type UpdateNewsSubServiceByIdMutationResult =
  Apollo.MutationResult<UpdateNewsSubServiceByIdMutation>;
export type UpdateNewsSubServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateNewsSubServiceByIdMutation,
    UpdateNewsSubServiceByIdMutationVariables
  >;
export const UpdateTipSubServiceByIdDocument = gql`
  mutation updateTipSubServiceById(
    $updateSubServiceId: ID!
    $data: TipSubServiceInput!
  ) {
    updateTipSubService(id: $updateSubServiceId, data: $data) {
      data {
        id
        attributes {
          name
          description
        }
      }
    }
  }
`;
export type UpdateTipSubServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateTipSubServiceByIdMutation,
  UpdateTipSubServiceByIdMutationVariables
>;

/**
 * __useUpdateTipSubServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateTipSubServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTipSubServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTipSubServiceByIdMutation, { data, loading, error }] = useUpdateTipSubServiceByIdMutation({
 *   variables: {
 *      updateSubServiceId: // value for 'updateSubServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTipSubServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateTipSubServiceByIdMutation,
    UpdateTipSubServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateTipSubServiceByIdMutation,
    UpdateTipSubServiceByIdMutationVariables
  >(UpdateTipSubServiceByIdDocument, options);
}
export type UpdateTipSubServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateTipSubServiceByIdMutation
>;
export type UpdateTipSubServiceByIdMutationResult =
  Apollo.MutationResult<UpdateTipSubServiceByIdMutation>;
export type UpdateTipSubServiceByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateTipSubServiceByIdMutation,
  UpdateTipSubServiceByIdMutationVariables
>;
export const UpdateQuizSubServiceByIdDocument = gql`
  mutation updateQuizSubServiceById(
    $updateSubServiceId: ID!
    $data: QuizSubServiceInput!
  ) {
    updateQuizSubService(id: $updateSubServiceId, data: $data) {
      data {
        id
        attributes {
          name
          description
        }
      }
    }
  }
`;
export type UpdateQuizSubServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateQuizSubServiceByIdMutation,
  UpdateQuizSubServiceByIdMutationVariables
>;

/**
 * __useUpdateQuizSubServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateQuizSubServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateQuizSubServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateQuizSubServiceByIdMutation, { data, loading, error }] = useUpdateQuizSubServiceByIdMutation({
 *   variables: {
 *      updateSubServiceId: // value for 'updateSubServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateQuizSubServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateQuizSubServiceByIdMutation,
    UpdateQuizSubServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateQuizSubServiceByIdMutation,
    UpdateQuizSubServiceByIdMutationVariables
  >(UpdateQuizSubServiceByIdDocument, options);
}
export type UpdateQuizSubServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateQuizSubServiceByIdMutation
>;
export type UpdateQuizSubServiceByIdMutationResult =
  Apollo.MutationResult<UpdateQuizSubServiceByIdMutation>;
export type UpdateQuizSubServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateQuizSubServiceByIdMutation,
    UpdateQuizSubServiceByIdMutationVariables
  >;
export const UpdateEventSubServiceByIdDocument = gql`
  mutation updateEventSubServiceById(
    $updateSubServiceId: ID!
    $data: EventSubServiceInput!
  ) {
    updateEventSubService(id: $updateSubServiceId, data: $data) {
      data {
        id
        attributes {
          name
          description
        }
      }
    }
  }
`;
export type UpdateEventSubServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateEventSubServiceByIdMutation,
  UpdateEventSubServiceByIdMutationVariables
>;

/**
 * __useUpdateEventSubServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateEventSubServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateEventSubServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateEventSubServiceByIdMutation, { data, loading, error }] = useUpdateEventSubServiceByIdMutation({
 *   variables: {
 *      updateSubServiceId: // value for 'updateSubServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateEventSubServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateEventSubServiceByIdMutation,
    UpdateEventSubServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateEventSubServiceByIdMutation,
    UpdateEventSubServiceByIdMutationVariables
  >(UpdateEventSubServiceByIdDocument, options);
}
export type UpdateEventSubServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateEventSubServiceByIdMutation
>;
export type UpdateEventSubServiceByIdMutationResult =
  Apollo.MutationResult<UpdateEventSubServiceByIdMutation>;
export type UpdateEventSubServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateEventSubServiceByIdMutation,
    UpdateEventSubServiceByIdMutationVariables
  >;
export const UpdateFreeContentSubServiceByIdDocument = gql`
  mutation updateFreeContentSubServiceById(
    $updateSubServiceId: ID!
    $data: FreeContentSubServiceInput!
  ) {
    updateFreeContentSubService(id: $updateSubServiceId, data: $data) {
      data {
        id
        attributes {
          name
          description
        }
      }
    }
  }
`;
export type UpdateFreeContentSubServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateFreeContentSubServiceByIdMutation,
  UpdateFreeContentSubServiceByIdMutationVariables
>;

/**
 * __useUpdateFreeContentSubServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateFreeContentSubServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFreeContentSubServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFreeContentSubServiceByIdMutation, { data, loading, error }] = useUpdateFreeContentSubServiceByIdMutation({
 *   variables: {
 *      updateSubServiceId: // value for 'updateSubServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateFreeContentSubServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateFreeContentSubServiceByIdMutation,
    UpdateFreeContentSubServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateFreeContentSubServiceByIdMutation,
    UpdateFreeContentSubServiceByIdMutationVariables
  >(UpdateFreeContentSubServiceByIdDocument, options);
}
export type UpdateFreeContentSubServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateFreeContentSubServiceByIdMutation
>;
export type UpdateFreeContentSubServiceByIdMutationResult =
  Apollo.MutationResult<UpdateFreeContentSubServiceByIdMutation>;
export type UpdateFreeContentSubServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateFreeContentSubServiceByIdMutation,
    UpdateFreeContentSubServiceByIdMutationVariables
  >;
export const GetCollectionMethodsDocument = gql`
  query getCollectionMethods($contractId: ID, $sort: [String]) {
    collectDoorToDoors(
      filters: { contract: { id: { eq: $contractId } } }
      sort: $sort
    ) {
      data {
        id
        attributes {
          name
        }
      }
    }
    collectVoluntaries(
      filters: { contract: { id: { eq: $contractId } } }
      sort: $sort
    ) {
      data {
        id
        attributes {
          name
        }
      }
    }
    collectDropOffs(
      filters: { contract: { id: { eq: $contractId } } }
      sort: $sort
    ) {
      data {
        id
        attributes {
          name
        }
      }
    }
  }
`;

/**
 * __useGetCollectionMethodsQuery__
 *
 * To run a query within a React component, call `useGetCollectionMethodsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCollectionMethodsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCollectionMethodsQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetCollectionMethodsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetCollectionMethodsQuery,
    GetCollectionMethodsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetCollectionMethodsQuery,
    GetCollectionMethodsQueryVariables
  >(GetCollectionMethodsDocument, options);
}
export function useGetCollectionMethodsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCollectionMethodsQuery,
    GetCollectionMethodsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetCollectionMethodsQuery,
    GetCollectionMethodsQueryVariables
  >(GetCollectionMethodsDocument, options);
}
export type GetCollectionMethodsQueryHookResult = ReturnType<
  typeof useGetCollectionMethodsQuery
>;
export type GetCollectionMethodsLazyQueryHookResult = ReturnType<
  typeof useGetCollectionMethodsLazyQuery
>;
export type GetCollectionMethodsQueryResult = Apollo.QueryResult<
  GetCollectionMethodsQuery,
  GetCollectionMethodsQueryVariables
>;
export const GetFlowColorsDocument = gql`
  query getFlowColors($contractId: ID) {
    flowColors(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        __typename
        id
        attributes {
          name
          hexaCode
          shouldChangeHexaCode
        }
      }
    }
  }
`;

/**
 * __useGetFlowColorsQuery__
 *
 * To run a query within a React component, call `useGetFlowColorsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFlowColorsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFlowColorsQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetFlowColorsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetFlowColorsQuery,
    GetFlowColorsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetFlowColorsQuery, GetFlowColorsQueryVariables>(
    GetFlowColorsDocument,
    options,
  );
}
export function useGetFlowColorsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFlowColorsQuery,
    GetFlowColorsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetFlowColorsQuery, GetFlowColorsQueryVariables>(
    GetFlowColorsDocument,
    options,
  );
}
export type GetFlowColorsQueryHookResult = ReturnType<
  typeof useGetFlowColorsQuery
>;
export type GetFlowColorsLazyQueryHookResult = ReturnType<
  typeof useGetFlowColorsLazyQuery
>;
export type GetFlowColorsQueryResult = Apollo.QueryResult<
  GetFlowColorsQuery,
  GetFlowColorsQueryVariables
>;
export const GetFlowsDocument = gql`
  query getFlows($filters: FlowFiltersInput) {
    flows(filters: $filters) {
      data {
        id
        attributes {
          name
          isActivated
          createdAt
          recyclingGesture
          wasteForms {
            data {
              id
              attributes {
                name
              }
            }
          }
          code
          color {
            data {
              id
              attributes {
                hexaCode
                name
              }
            }
          }
          collectVoluntaries {
            data {
              id
              attributes {
                name
              }
            }
          }
          collectDoorToDoors {
            data {
              id
              attributes {
                name
              }
            }
          }
          collectDropOffs {
            data {
              id
              attributes {
                name
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetFlowsQuery__
 *
 * To run a query within a React component, call `useGetFlowsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFlowsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFlowsQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *   },
 * });
 */
export function useGetFlowsQuery(
  baseOptions?: Apollo.QueryHookOptions<GetFlowsQuery, GetFlowsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetFlowsQuery, GetFlowsQueryVariables>(
    GetFlowsDocument,
    options,
  );
}
export function useGetFlowsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFlowsQuery,
    GetFlowsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetFlowsQuery, GetFlowsQueryVariables>(
    GetFlowsDocument,
    options,
  );
}
export type GetFlowsQueryHookResult = ReturnType<typeof useGetFlowsQuery>;
export type GetFlowsLazyQueryHookResult = ReturnType<
  typeof useGetFlowsLazyQuery
>;
export type GetFlowsQueryResult = Apollo.QueryResult<
  GetFlowsQuery,
  GetFlowsQueryVariables
>;
export const UpdateFlowByIdDocument = gql`
  mutation updateFlowById($updateFlowId: ID!, $data: FlowInput!) {
    updateFlow(id: $updateFlowId, data: $data) {
      data {
        id
        attributes {
          name
          isActivated
          recyclingGesture
          color {
            data {
              id
              attributes {
                hexaCode
                name
              }
            }
          }
          code
          collectDoorToDoors {
            data {
              id
              attributes {
                name
              }
            }
          }
          collectDropOffs {
            data {
              id
              attributes {
                name
              }
            }
          }
          collectVoluntaries {
            data {
              id
              attributes {
                name
              }
            }
          }
        }
      }
    }
  }
`;
export type UpdateFlowByIdMutationFn = Apollo.MutationFunction<
  UpdateFlowByIdMutation,
  UpdateFlowByIdMutationVariables
>;

/**
 * __useUpdateFlowByIdMutation__
 *
 * To run a mutation, you first call `useUpdateFlowByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFlowByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFlowByIdMutation, { data, loading, error }] = useUpdateFlowByIdMutation({
 *   variables: {
 *      updateFlowId: // value for 'updateFlowId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateFlowByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateFlowByIdMutation,
    UpdateFlowByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateFlowByIdMutation,
    UpdateFlowByIdMutationVariables
  >(UpdateFlowByIdDocument, options);
}
export type UpdateFlowByIdMutationHookResult = ReturnType<
  typeof useUpdateFlowByIdMutation
>;
export type UpdateFlowByIdMutationResult =
  Apollo.MutationResult<UpdateFlowByIdMutation>;
export type UpdateFlowByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateFlowByIdMutation,
  UpdateFlowByIdMutationVariables
>;
export const CreateClientContactDocument = gql`
  mutation createClientContact($data: ClientContactInput!) {
    createClientContact(data: $data) {
      data {
        id
      }
    }
  }
`;
export type CreateClientContactMutationFn = Apollo.MutationFunction<
  CreateClientContactMutation,
  CreateClientContactMutationVariables
>;

/**
 * __useCreateClientContactMutation__
 *
 * To run a mutation, you first call `useCreateClientContactMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateClientContactMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createClientContactMutation, { data, loading, error }] = useCreateClientContactMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateClientContactMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateClientContactMutation,
    CreateClientContactMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateClientContactMutation,
    CreateClientContactMutationVariables
  >(CreateClientContactDocument, options);
}
export type CreateClientContactMutationHookResult = ReturnType<
  typeof useCreateClientContactMutation
>;
export type CreateClientContactMutationResult =
  Apollo.MutationResult<CreateClientContactMutation>;
export type CreateClientContactMutationOptions = Apollo.BaseMutationOptions<
  CreateClientContactMutation,
  CreateClientContactMutationVariables
>;
export const CreateEmptyContractDocument = gql`
  mutation createEmptyContract(
    $clientName: String!
    $clientType: String!
    $siretNumber: Long
    $contactFirstName: String!
    $contactLastName: String!
    $contactEmail: String!
    $contactPhoneNumber: String!
    $isRvFrance: Boolean!
    $isNonExclusive: Boolean!
    $ccap: Long
    $clear: Long
    $isFreemium: Boolean!
    $servicesToActivate: [ServiceType]!
  ) {
    createEmptyContract(
      clientName: $clientName
      clientType: $clientType
      siretNumber: $siretNumber
      contactFirstName: $contactFirstName
      contactLastName: $contactLastName
      contactEmail: $contactEmail
      contactPhoneNumber: $contactPhoneNumber
      isRVFrance: $isRvFrance
      ccap: $ccap
      clear: $clear
      isNonExclusive: $isNonExclusive
      isFreemium: $isFreemium
      servicesToActivate: $servicesToActivate
    ) {
      ... on ContractCreateOutput {
        id
        clientName
        siret
        isRVFrance
        ccap
        clear
      }
      ... on ClientContactCreateOutput {
        firstName
        lastName
        email
        phoneNumber
      }
    }
  }
`;
export type CreateEmptyContractMutationFn = Apollo.MutationFunction<
  CreateEmptyContractMutation,
  CreateEmptyContractMutationVariables
>;

/**
 * __useCreateEmptyContractMutation__
 *
 * To run a mutation, you first call `useCreateEmptyContractMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateEmptyContractMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createEmptyContractMutation, { data, loading, error }] = useCreateEmptyContractMutation({
 *   variables: {
 *      clientName: // value for 'clientName'
 *      clientType: // value for 'clientType'
 *      siretNumber: // value for 'siretNumber'
 *      contactFirstName: // value for 'contactFirstName'
 *      contactLastName: // value for 'contactLastName'
 *      contactEmail: // value for 'contactEmail'
 *      contactPhoneNumber: // value for 'contactPhoneNumber'
 *      isRvFrance: // value for 'isRvFrance'
 *      isNonExclusive: // value for 'isNonExclusive'
 *      ccap: // value for 'ccap'
 *      clear: // value for 'clear'
 *      isFreemium: // value for 'isFreemium'
 *      servicesToActivate: // value for 'servicesToActivate'
 *   },
 * });
 */
export function useCreateEmptyContractMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateEmptyContractMutation,
    CreateEmptyContractMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateEmptyContractMutation,
    CreateEmptyContractMutationVariables
  >(CreateEmptyContractDocument, options);
}
export type CreateEmptyContractMutationHookResult = ReturnType<
  typeof useCreateEmptyContractMutation
>;
export type CreateEmptyContractMutationResult =
  Apollo.MutationResult<CreateEmptyContractMutation>;
export type CreateEmptyContractMutationOptions = Apollo.BaseMutationOptions<
  CreateEmptyContractMutation,
  CreateEmptyContractMutationVariables
>;
export const DeleteContractByIdDocument = gql`
  mutation deleteContractById($deleteContractId: ID!) {
    deleteContract(id: $deleteContractId) {
      data {
        id
      }
    }
  }
`;
export type DeleteContractByIdMutationFn = Apollo.MutationFunction<
  DeleteContractByIdMutation,
  DeleteContractByIdMutationVariables
>;

/**
 * __useDeleteContractByIdMutation__
 *
 * To run a mutation, you first call `useDeleteContractByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteContractByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteContractByIdMutation, { data, loading, error }] = useDeleteContractByIdMutation({
 *   variables: {
 *      deleteContractId: // value for 'deleteContractId'
 *   },
 * });
 */
export function useDeleteContractByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteContractByIdMutation,
    DeleteContractByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteContractByIdMutation,
    DeleteContractByIdMutationVariables
  >(DeleteContractByIdDocument, options);
}
export type DeleteContractByIdMutationHookResult = ReturnType<
  typeof useDeleteContractByIdMutation
>;
export type DeleteContractByIdMutationResult =
  Apollo.MutationResult<DeleteContractByIdMutation>;
export type DeleteContractByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteContractByIdMutation,
  DeleteContractByIdMutationVariables
>;
export const UpdateContractInformationsDocument = gql`
  mutation updateContractInformations(
    $contractId: ID!
    $contractData: ContractInput!
    $clientContactId: ID!
    $clientContactData: ClientContactInput!
  ) {
    updateContract(id: $contractId, data: $contractData) {
      data {
        id
        attributes {
          clientName
          siret
          contractStatus
          isNonExclusive
          clientType
          isRVFrance
          ccap
          clear
        }
      }
    }
    updateClientContact(id: $clientContactId, data: $clientContactData) {
      data {
        id
        attributes {
          firstName
          lastName
          email
          phoneNumber
        }
      }
    }
  }
`;
export type UpdateContractInformationsMutationFn = Apollo.MutationFunction<
  UpdateContractInformationsMutation,
  UpdateContractInformationsMutationVariables
>;

/**
 * __useUpdateContractInformationsMutation__
 *
 * To run a mutation, you first call `useUpdateContractInformationsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateContractInformationsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateContractInformationsMutation, { data, loading, error }] = useUpdateContractInformationsMutation({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      contractData: // value for 'contractData'
 *      clientContactId: // value for 'clientContactId'
 *      clientContactData: // value for 'clientContactData'
 *   },
 * });
 */
export function useUpdateContractInformationsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateContractInformationsMutation,
    UpdateContractInformationsMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateContractInformationsMutation,
    UpdateContractInformationsMutationVariables
  >(UpdateContractInformationsDocument, options);
}
export type UpdateContractInformationsMutationHookResult = ReturnType<
  typeof useUpdateContractInformationsMutation
>;
export type UpdateContractInformationsMutationResult =
  Apollo.MutationResult<UpdateContractInformationsMutation>;
export type UpdateContractInformationsMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateContractInformationsMutation,
    UpdateContractInformationsMutationVariables
  >;
export const CreateYwsServiceDocument = gql`
  mutation createYwsService($service: ServiceInput!, $contractId: ID!) {
    createYwsService(service: $service, contractId: $contractId) {
      id
    }
  }
`;
export type CreateYwsServiceMutationFn = Apollo.MutationFunction<
  CreateYwsServiceMutation,
  CreateYwsServiceMutationVariables
>;

/**
 * __useCreateYwsServiceMutation__
 *
 * To run a mutation, you first call `useCreateYwsServiceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateYwsServiceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createYwsServiceMutation, { data, loading, error }] = useCreateYwsServiceMutation({
 *   variables: {
 *      service: // value for 'service'
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useCreateYwsServiceMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateYwsServiceMutation,
    CreateYwsServiceMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateYwsServiceMutation,
    CreateYwsServiceMutationVariables
  >(CreateYwsServiceDocument, options);
}
export type CreateYwsServiceMutationHookResult = ReturnType<
  typeof useCreateYwsServiceMutation
>;
export type CreateYwsServiceMutationResult =
  Apollo.MutationResult<CreateYwsServiceMutation>;
export type CreateYwsServiceMutationOptions = Apollo.BaseMutationOptions<
  CreateYwsServiceMutation,
  CreateYwsServiceMutationVariables
>;
export const DeleteYwsServiceByIdDocument = gql`
  mutation deleteYwsServiceById($deleteYesWeScanServiceId: ID!) {
    deleteYesWeScanService(id: $deleteYesWeScanServiceId) {
      data {
        id
      }
    }
  }
`;
export type DeleteYwsServiceByIdMutationFn = Apollo.MutationFunction<
  DeleteYwsServiceByIdMutation,
  DeleteYwsServiceByIdMutationVariables
>;

/**
 * __useDeleteYwsServiceByIdMutation__
 *
 * To run a mutation, you first call `useDeleteYwsServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteYwsServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteYwsServiceByIdMutation, { data, loading, error }] = useDeleteYwsServiceByIdMutation({
 *   variables: {
 *      deleteYesWeScanServiceId: // value for 'deleteYesWeScanServiceId'
 *   },
 * });
 */
export function useDeleteYwsServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteYwsServiceByIdMutation,
    DeleteYwsServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteYwsServiceByIdMutation,
    DeleteYwsServiceByIdMutationVariables
  >(DeleteYwsServiceByIdDocument, options);
}
export type DeleteYwsServiceByIdMutationHookResult = ReturnType<
  typeof useDeleteYwsServiceByIdMutation
>;
export type DeleteYwsServiceByIdMutationResult =
  Apollo.MutationResult<DeleteYwsServiceByIdMutation>;
export type DeleteYwsServiceByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteYwsServiceByIdMutation,
  DeleteYwsServiceByIdMutationVariables
>;
export const GetChannelTypeByIdDocument = gql`
  query getChannelTypeById($channelTypeId: ID) {
    channelType(id: $channelTypeId) {
      data {
        id
        attributes {
          hasWebApp
          hasWebSite
          hasYesWeScan
        }
      }
    }
  }
`;

/**
 * __useGetChannelTypeByIdQuery__
 *
 * To run a query within a React component, call `useGetChannelTypeByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChannelTypeByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChannelTypeByIdQuery({
 *   variables: {
 *      channelTypeId: // value for 'channelTypeId'
 *   },
 * });
 */
export function useGetChannelTypeByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetChannelTypeByIdQuery,
    GetChannelTypeByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetChannelTypeByIdQuery,
    GetChannelTypeByIdQueryVariables
  >(GetChannelTypeByIdDocument, options);
}
export function useGetChannelTypeByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetChannelTypeByIdQuery,
    GetChannelTypeByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetChannelTypeByIdQuery,
    GetChannelTypeByIdQueryVariables
  >(GetChannelTypeByIdDocument, options);
}
export type GetChannelTypeByIdQueryHookResult = ReturnType<
  typeof useGetChannelTypeByIdQuery
>;
export type GetChannelTypeByIdLazyQueryHookResult = ReturnType<
  typeof useGetChannelTypeByIdLazyQuery
>;
export type GetChannelTypeByIdQueryResult = Apollo.QueryResult<
  GetChannelTypeByIdQuery,
  GetChannelTypeByIdQueryVariables
>;
export const UpdateServicesActivationDocument = gql`
  mutation updateServicesActivation(
    $serviceName: ServiceType!
    $serviceId: ID!
    $isActivated: Boolean!
    $contractId: ID!
    $startDate: Date
    $endDate: Date
    $isUpdated: Boolean!
  ) {
    servicesActivation(
      ServiceName: $serviceName
      serviceId: $serviceId
      isActivated: $isActivated
      contractId: $contractId
      startDate: $startDate
      endDate: $endDate
      isUpdated: $isUpdated
    ) {
      contractId
      endDate
      isActivated
      serviceId
      serviceName
      startDate
    }
  }
`;
export type UpdateServicesActivationMutationFn = Apollo.MutationFunction<
  UpdateServicesActivationMutation,
  UpdateServicesActivationMutationVariables
>;

/**
 * __useUpdateServicesActivationMutation__
 *
 * To run a mutation, you first call `useUpdateServicesActivationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateServicesActivationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateServicesActivationMutation, { data, loading, error }] = useUpdateServicesActivationMutation({
 *   variables: {
 *      serviceName: // value for 'serviceName'
 *      serviceId: // value for 'serviceId'
 *      isActivated: // value for 'isActivated'
 *      contractId: // value for 'contractId'
 *      startDate: // value for 'startDate'
 *      endDate: // value for 'endDate'
 *      isUpdated: // value for 'isUpdated'
 *   },
 * });
 */
export function useUpdateServicesActivationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateServicesActivationMutation,
    UpdateServicesActivationMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateServicesActivationMutation,
    UpdateServicesActivationMutationVariables
  >(UpdateServicesActivationDocument, options);
}
export type UpdateServicesActivationMutationHookResult = ReturnType<
  typeof useUpdateServicesActivationMutation
>;
export type UpdateServicesActivationMutationResult =
  Apollo.MutationResult<UpdateServicesActivationMutation>;
export type UpdateServicesActivationMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateServicesActivationMutation,
    UpdateServicesActivationMutationVariables
  >;
export const UpdateChannelTypeByIdDocument = gql`
  mutation updateChannelTypeById(
    $updateChannelTypeId: ID!
    $data: ChannelTypeInput!
  ) {
    updateChannelType(id: $updateChannelTypeId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateChannelTypeByIdMutationFn = Apollo.MutationFunction<
  UpdateChannelTypeByIdMutation,
  UpdateChannelTypeByIdMutationVariables
>;

/**
 * __useUpdateChannelTypeByIdMutation__
 *
 * To run a mutation, you first call `useUpdateChannelTypeByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateChannelTypeByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateChannelTypeByIdMutation, { data, loading, error }] = useUpdateChannelTypeByIdMutation({
 *   variables: {
 *      updateChannelTypeId: // value for 'updateChannelTypeId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateChannelTypeByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateChannelTypeByIdMutation,
    UpdateChannelTypeByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateChannelTypeByIdMutation,
    UpdateChannelTypeByIdMutationVariables
  >(UpdateChannelTypeByIdDocument, options);
}
export type UpdateChannelTypeByIdMutationHookResult = ReturnType<
  typeof useUpdateChannelTypeByIdMutation
>;
export type UpdateChannelTypeByIdMutationResult =
  Apollo.MutationResult<UpdateChannelTypeByIdMutation>;
export type UpdateChannelTypeByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateChannelTypeByIdMutation,
  UpdateChannelTypeByIdMutationVariables
>;
export const UpdateRecyclingGuideServiceByIdDocument = gql`
  mutation updateRecyclingGuideServiceById(
    $id: ID!
    $data: RecyclingGuideServiceInput!
  ) {
    updateRecyclingGuideService(id: $id, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateRecyclingGuideServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateRecyclingGuideServiceByIdMutation,
  UpdateRecyclingGuideServiceByIdMutationVariables
>;

/**
 * __useUpdateRecyclingGuideServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateRecyclingGuideServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateRecyclingGuideServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateRecyclingGuideServiceByIdMutation, { data, loading, error }] = useUpdateRecyclingGuideServiceByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateRecyclingGuideServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateRecyclingGuideServiceByIdMutation,
    UpdateRecyclingGuideServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateRecyclingGuideServiceByIdMutation,
    UpdateRecyclingGuideServiceByIdMutationVariables
  >(UpdateRecyclingGuideServiceByIdDocument, options);
}
export type UpdateRecyclingGuideServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateRecyclingGuideServiceByIdMutation
>;
export type UpdateRecyclingGuideServiceByIdMutationResult =
  Apollo.MutationResult<UpdateRecyclingGuideServiceByIdMutation>;
export type UpdateRecyclingGuideServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateRecyclingGuideServiceByIdMutation,
    UpdateRecyclingGuideServiceByIdMutationVariables
  >;
export const UpdatePickUpDayServiceByIdDocument = gql`
  mutation updatePickUpDayServiceById($id: ID!, $data: PickUpDayServiceInput!) {
    updatePickUpDayService(id: $id, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdatePickUpDayServiceByIdMutationFn = Apollo.MutationFunction<
  UpdatePickUpDayServiceByIdMutation,
  UpdatePickUpDayServiceByIdMutationVariables
>;

/**
 * __useUpdatePickUpDayServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdatePickUpDayServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePickUpDayServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePickUpDayServiceByIdMutation, { data, loading, error }] = useUpdatePickUpDayServiceByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdatePickUpDayServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdatePickUpDayServiceByIdMutation,
    UpdatePickUpDayServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdatePickUpDayServiceByIdMutation,
    UpdatePickUpDayServiceByIdMutationVariables
  >(UpdatePickUpDayServiceByIdDocument, options);
}
export type UpdatePickUpDayServiceByIdMutationHookResult = ReturnType<
  typeof useUpdatePickUpDayServiceByIdMutation
>;
export type UpdatePickUpDayServiceByIdMutationResult =
  Apollo.MutationResult<UpdatePickUpDayServiceByIdMutation>;
export type UpdatePickUpDayServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdatePickUpDayServiceByIdMutation,
    UpdatePickUpDayServiceByIdMutationVariables
  >;
export const UpdateRequestServiceByIdDocument = gql`
  mutation updateRequestServiceById($id: ID!, $data: RequestServiceInput!) {
    updateRequestService(id: $id, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateRequestServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateRequestServiceByIdMutation,
  UpdateRequestServiceByIdMutationVariables
>;

/**
 * __useUpdateRequestServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateRequestServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateRequestServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateRequestServiceByIdMutation, { data, loading, error }] = useUpdateRequestServiceByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateRequestServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateRequestServiceByIdMutation,
    UpdateRequestServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateRequestServiceByIdMutation,
    UpdateRequestServiceByIdMutationVariables
  >(UpdateRequestServiceByIdDocument, options);
}
export type UpdateRequestServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateRequestServiceByIdMutation
>;
export type UpdateRequestServiceByIdMutationResult =
  Apollo.MutationResult<UpdateRequestServiceByIdMutation>;
export type UpdateRequestServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateRequestServiceByIdMutation,
    UpdateRequestServiceByIdMutationVariables
  >;
export const UpdateDropOffMapServiceByIdDocument = gql`
  mutation updateDropOffMapServiceById(
    $id: ID!
    $data: DropOffMapServiceInput!
  ) {
    updateDropOffMapService(id: $id, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateDropOffMapServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateDropOffMapServiceByIdMutation,
  UpdateDropOffMapServiceByIdMutationVariables
>;

/**
 * __useUpdateDropOffMapServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateDropOffMapServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateDropOffMapServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateDropOffMapServiceByIdMutation, { data, loading, error }] = useUpdateDropOffMapServiceByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateDropOffMapServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateDropOffMapServiceByIdMutation,
    UpdateDropOffMapServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateDropOffMapServiceByIdMutation,
    UpdateDropOffMapServiceByIdMutationVariables
  >(UpdateDropOffMapServiceByIdDocument, options);
}
export type UpdateDropOffMapServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateDropOffMapServiceByIdMutation
>;
export type UpdateDropOffMapServiceByIdMutationResult =
  Apollo.MutationResult<UpdateDropOffMapServiceByIdMutation>;
export type UpdateDropOffMapServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateDropOffMapServiceByIdMutation,
    UpdateDropOffMapServiceByIdMutationVariables
  >;
export const UpdateAlertNotificationServiceByIdDocument = gql`
  mutation updateAlertNotificationServiceById(
    $id: ID!
    $data: AlertNotificationServiceInput!
  ) {
    updateAlertNotificationService(id: $id, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateAlertNotificationServiceByIdMutationFn =
  Apollo.MutationFunction<
    UpdateAlertNotificationServiceByIdMutation,
    UpdateAlertNotificationServiceByIdMutationVariables
  >;

/**
 * __useUpdateAlertNotificationServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateAlertNotificationServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAlertNotificationServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAlertNotificationServiceByIdMutation, { data, loading, error }] = useUpdateAlertNotificationServiceByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateAlertNotificationServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAlertNotificationServiceByIdMutation,
    UpdateAlertNotificationServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateAlertNotificationServiceByIdMutation,
    UpdateAlertNotificationServiceByIdMutationVariables
  >(UpdateAlertNotificationServiceByIdDocument, options);
}
export type UpdateAlertNotificationServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateAlertNotificationServiceByIdMutation
>;
export type UpdateAlertNotificationServiceByIdMutationResult =
  Apollo.MutationResult<UpdateAlertNotificationServiceByIdMutation>;
export type UpdateAlertNotificationServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateAlertNotificationServiceByIdMutation,
    UpdateAlertNotificationServiceByIdMutationVariables
  >;
export const UpdateEventServiceByIdDocument = gql`
  mutation updateEventServiceById($id: ID!, $data: EventSubServiceInput!) {
    updateEventSubService(id: $id, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateEventServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateEventServiceByIdMutation,
  UpdateEventServiceByIdMutationVariables
>;

/**
 * __useUpdateEventServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateEventServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateEventServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateEventServiceByIdMutation, { data, loading, error }] = useUpdateEventServiceByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateEventServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateEventServiceByIdMutation,
    UpdateEventServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateEventServiceByIdMutation,
    UpdateEventServiceByIdMutationVariables
  >(UpdateEventServiceByIdDocument, options);
}
export type UpdateEventServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateEventServiceByIdMutation
>;
export type UpdateEventServiceByIdMutationResult =
  Apollo.MutationResult<UpdateEventServiceByIdMutation>;
export type UpdateEventServiceByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateEventServiceByIdMutation,
  UpdateEventServiceByIdMutationVariables
>;
export const UpdateFreeContentServiceByIdDocument = gql`
  mutation updateFreeContentServiceById(
    $id: ID!
    $data: FreeContentSubServiceInput!
  ) {
    updateFreeContentSubService(id: $id, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateFreeContentServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateFreeContentServiceByIdMutation,
  UpdateFreeContentServiceByIdMutationVariables
>;

/**
 * __useUpdateFreeContentServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateFreeContentServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFreeContentServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFreeContentServiceByIdMutation, { data, loading, error }] = useUpdateFreeContentServiceByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateFreeContentServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateFreeContentServiceByIdMutation,
    UpdateFreeContentServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateFreeContentServiceByIdMutation,
    UpdateFreeContentServiceByIdMutationVariables
  >(UpdateFreeContentServiceByIdDocument, options);
}
export type UpdateFreeContentServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateFreeContentServiceByIdMutation
>;
export type UpdateFreeContentServiceByIdMutationResult =
  Apollo.MutationResult<UpdateFreeContentServiceByIdMutation>;
export type UpdateFreeContentServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateFreeContentServiceByIdMutation,
    UpdateFreeContentServiceByIdMutationVariables
  >;
export const UpdateNewsServiceByIdDocument = gql`
  mutation updateNewsServiceById($id: ID!, $data: NewsSubServiceInput!) {
    updateNewsSubService(id: $id, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateNewsServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateNewsServiceByIdMutation,
  UpdateNewsServiceByIdMutationVariables
>;

/**
 * __useUpdateNewsServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateNewsServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateNewsServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateNewsServiceByIdMutation, { data, loading, error }] = useUpdateNewsServiceByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateNewsServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateNewsServiceByIdMutation,
    UpdateNewsServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateNewsServiceByIdMutation,
    UpdateNewsServiceByIdMutationVariables
  >(UpdateNewsServiceByIdDocument, options);
}
export type UpdateNewsServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateNewsServiceByIdMutation
>;
export type UpdateNewsServiceByIdMutationResult =
  Apollo.MutationResult<UpdateNewsServiceByIdMutation>;
export type UpdateNewsServiceByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateNewsServiceByIdMutation,
  UpdateNewsServiceByIdMutationVariables
>;
export const UpdateQuizServiceByIdDocument = gql`
  mutation updateQuizServiceById($id: ID!, $data: QuizSubServiceInput!) {
    updateQuizSubService(id: $id, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateQuizServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateQuizServiceByIdMutation,
  UpdateQuizServiceByIdMutationVariables
>;

/**
 * __useUpdateQuizServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateQuizServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateQuizServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateQuizServiceByIdMutation, { data, loading, error }] = useUpdateQuizServiceByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateQuizServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateQuizServiceByIdMutation,
    UpdateQuizServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateQuizServiceByIdMutation,
    UpdateQuizServiceByIdMutationVariables
  >(UpdateQuizServiceByIdDocument, options);
}
export type UpdateQuizServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateQuizServiceByIdMutation
>;
export type UpdateQuizServiceByIdMutationResult =
  Apollo.MutationResult<UpdateQuizServiceByIdMutation>;
export type UpdateQuizServiceByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateQuizServiceByIdMutation,
  UpdateQuizServiceByIdMutationVariables
>;
export const UpdateTipServiceByIdDocument = gql`
  mutation updateTipServiceById($id: ID!, $data: TipSubServiceInput!) {
    updateTipSubService(id: $id, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateTipServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateTipServiceByIdMutation,
  UpdateTipServiceByIdMutationVariables
>;

/**
 * __useUpdateTipServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateTipServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTipServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTipServiceByIdMutation, { data, loading, error }] = useUpdateTipServiceByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTipServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateTipServiceByIdMutation,
    UpdateTipServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateTipServiceByIdMutation,
    UpdateTipServiceByIdMutationVariables
  >(UpdateTipServiceByIdDocument, options);
}
export type UpdateTipServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateTipServiceByIdMutation
>;
export type UpdateTipServiceByIdMutationResult =
  Apollo.MutationResult<UpdateTipServiceByIdMutation>;
export type UpdateTipServiceByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateTipServiceByIdMutation,
  UpdateTipServiceByIdMutationVariables
>;
export const UpdateContactUsServiceByIdDocument = gql`
  mutation updateContactUsServiceById(
    $id: ID!
    $data: ContactUsSubServiceInput!
  ) {
    updateContactUsSubService(id: $id, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateContactUsServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateContactUsServiceByIdMutation,
  UpdateContactUsServiceByIdMutationVariables
>;

/**
 * __useUpdateContactUsServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateContactUsServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateContactUsServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateContactUsServiceByIdMutation, { data, loading, error }] = useUpdateContactUsServiceByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateContactUsServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateContactUsServiceByIdMutation,
    UpdateContactUsServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateContactUsServiceByIdMutation,
    UpdateContactUsServiceByIdMutationVariables
  >(UpdateContactUsServiceByIdDocument, options);
}
export type UpdateContactUsServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateContactUsServiceByIdMutation
>;
export type UpdateContactUsServiceByIdMutationResult =
  Apollo.MutationResult<UpdateContactUsServiceByIdMutation>;
export type UpdateContactUsServiceByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateContactUsServiceByIdMutation,
    UpdateContactUsServiceByIdMutationVariables
  >;
export const UpdateYwsServiceByIdDocument = gql`
  mutation updateYwsServiceById(
    $updateYesWeScanServiceId: ID!
    $data: YesWeScanServiceInput!
  ) {
    updateYesWeScanService(id: $updateYesWeScanServiceId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateYwsServiceByIdMutationFn = Apollo.MutationFunction<
  UpdateYwsServiceByIdMutation,
  UpdateYwsServiceByIdMutationVariables
>;

/**
 * __useUpdateYwsServiceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateYwsServiceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateYwsServiceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateYwsServiceByIdMutation, { data, loading, error }] = useUpdateYwsServiceByIdMutation({
 *   variables: {
 *      updateYesWeScanServiceId: // value for 'updateYesWeScanServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateYwsServiceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateYwsServiceByIdMutation,
    UpdateYwsServiceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateYwsServiceByIdMutation,
    UpdateYwsServiceByIdMutationVariables
  >(UpdateYwsServiceByIdDocument, options);
}
export type UpdateYwsServiceByIdMutationHookResult = ReturnType<
  typeof useUpdateYwsServiceByIdMutation
>;
export type UpdateYwsServiceByIdMutationResult =
  Apollo.MutationResult<UpdateYwsServiceByIdMutation>;
export type UpdateYwsServiceByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateYwsServiceByIdMutation,
  UpdateYwsServiceByIdMutationVariables
>;
export const YwsActivationDocument = gql`
  mutation ywsActivation($contractId: ID!) {
    ywsActivation(contractId: $contractId) {
      id
    }
  }
`;
export type YwsActivationMutationFn = Apollo.MutationFunction<
  YwsActivationMutation,
  YwsActivationMutationVariables
>;

/**
 * __useYwsActivationMutation__
 *
 * To run a mutation, you first call `useYwsActivationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useYwsActivationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [ywsActivationMutation, { data, loading, error }] = useYwsActivationMutation({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useYwsActivationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    YwsActivationMutation,
    YwsActivationMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    YwsActivationMutation,
    YwsActivationMutationVariables
  >(YwsActivationDocument, options);
}
export type YwsActivationMutationHookResult = ReturnType<
  typeof useYwsActivationMutation
>;
export type YwsActivationMutationResult =
  Apollo.MutationResult<YwsActivationMutation>;
export type YwsActivationMutationOptions = Apollo.BaseMutationOptions<
  YwsActivationMutation,
  YwsActivationMutationVariables
>;
export const YwsDeactivationDocument = gql`
  mutation ywsDeactivation($contractId: ID!) {
    ywsDeactivation(contractId: $contractId) {
      id
    }
  }
`;
export type YwsDeactivationMutationFn = Apollo.MutationFunction<
  YwsDeactivationMutation,
  YwsDeactivationMutationVariables
>;

/**
 * __useYwsDeactivationMutation__
 *
 * To run a mutation, you first call `useYwsDeactivationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useYwsDeactivationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [ywsDeactivationMutation, { data, loading, error }] = useYwsDeactivationMutation({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useYwsDeactivationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    YwsDeactivationMutation,
    YwsDeactivationMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    YwsDeactivationMutation,
    YwsDeactivationMutationVariables
  >(YwsDeactivationDocument, options);
}
export type YwsDeactivationMutationHookResult = ReturnType<
  typeof useYwsDeactivationMutation
>;
export type YwsDeactivationMutationResult =
  Apollo.MutationResult<YwsDeactivationMutation>;
export type YwsDeactivationMutationOptions = Apollo.BaseMutationOptions<
  YwsDeactivationMutation,
  YwsDeactivationMutationVariables
>;
export const CreateCityDocument = gql`
  mutation createCity($data: CityInput!) {
    createCity(data: $data) {
      data {
        id
      }
    }
  }
`;
export type CreateCityMutationFn = Apollo.MutationFunction<
  CreateCityMutation,
  CreateCityMutationVariables
>;

/**
 * __useCreateCityMutation__
 *
 * To run a mutation, you first call `useCreateCityMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCityMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCityMutation, { data, loading, error }] = useCreateCityMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateCityMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateCityMutation,
    CreateCityMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<CreateCityMutation, CreateCityMutationVariables>(
    CreateCityDocument,
    options,
  );
}
export type CreateCityMutationHookResult = ReturnType<
  typeof useCreateCityMutation
>;
export type CreateCityMutationResult =
  Apollo.MutationResult<CreateCityMutation>;
export type CreateCityMutationOptions = Apollo.BaseMutationOptions<
  CreateCityMutation,
  CreateCityMutationVariables
>;
export const DeleteCityByIdDocument = gql`
  mutation deleteCityById($cityId: ID!) {
    deleteCity(id: $cityId) {
      data {
        id
      }
    }
  }
`;
export type DeleteCityByIdMutationFn = Apollo.MutationFunction<
  DeleteCityByIdMutation,
  DeleteCityByIdMutationVariables
>;

/**
 * __useDeleteCityByIdMutation__
 *
 * To run a mutation, you first call `useDeleteCityByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCityByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCityByIdMutation, { data, loading, error }] = useDeleteCityByIdMutation({
 *   variables: {
 *      cityId: // value for 'cityId'
 *   },
 * });
 */
export function useDeleteCityByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteCityByIdMutation,
    DeleteCityByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteCityByIdMutation,
    DeleteCityByIdMutationVariables
  >(DeleteCityByIdDocument, options);
}
export type DeleteCityByIdMutationHookResult = ReturnType<
  typeof useDeleteCityByIdMutation
>;
export type DeleteCityByIdMutationResult =
  Apollo.MutationResult<DeleteCityByIdMutation>;
export type DeleteCityByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteCityByIdMutation,
  DeleteCityByIdMutationVariables
>;
export const DeleteEpciByIdDocument = gql`
  mutation deleteEpciById($deleteEpciId: ID!) {
    deleteEpci(id: $deleteEpciId) {
      data {
        id
      }
    }
  }
`;
export type DeleteEpciByIdMutationFn = Apollo.MutationFunction<
  DeleteEpciByIdMutation,
  DeleteEpciByIdMutationVariables
>;

/**
 * __useDeleteEpciByIdMutation__
 *
 * To run a mutation, you first call `useDeleteEpciByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteEpciByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteEpciByIdMutation, { data, loading, error }] = useDeleteEpciByIdMutation({
 *   variables: {
 *      deleteEpciId: // value for 'deleteEpciId'
 *   },
 * });
 */
export function useDeleteEpciByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteEpciByIdMutation,
    DeleteEpciByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteEpciByIdMutation,
    DeleteEpciByIdMutationVariables
  >(DeleteEpciByIdDocument, options);
}
export type DeleteEpciByIdMutationHookResult = ReturnType<
  typeof useDeleteEpciByIdMutation
>;
export type DeleteEpciByIdMutationResult =
  Apollo.MutationResult<DeleteEpciByIdMutation>;
export type DeleteEpciByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteEpciByIdMutation,
  DeleteEpciByIdMutationVariables
>;
export const GetCitiesByEpciIdDocument = gql`
  query getCitiesByEpciId($epciId: ID!) {
    cities(filters: { epci: { id: { eq: $epciId } } }) {
      data {
        id
        attributes {
          department
          insee
          name
          postalCode
          region
          siren
          GeoJSON
        }
      }
    }
  }
`;

/**
 * __useGetCitiesByEpciIdQuery__
 *
 * To run a query within a React component, call `useGetCitiesByEpciIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCitiesByEpciIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCitiesByEpciIdQuery({
 *   variables: {
 *      epciId: // value for 'epciId'
 *   },
 * });
 */
export function useGetCitiesByEpciIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetCitiesByEpciIdQuery,
    GetCitiesByEpciIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetCitiesByEpciIdQuery,
    GetCitiesByEpciIdQueryVariables
  >(GetCitiesByEpciIdDocument, options);
}
export function useGetCitiesByEpciIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCitiesByEpciIdQuery,
    GetCitiesByEpciIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetCitiesByEpciIdQuery,
    GetCitiesByEpciIdQueryVariables
  >(GetCitiesByEpciIdDocument, options);
}
export type GetCitiesByEpciIdQueryHookResult = ReturnType<
  typeof useGetCitiesByEpciIdQuery
>;
export type GetCitiesByEpciIdLazyQueryHookResult = ReturnType<
  typeof useGetCitiesByEpciIdLazyQuery
>;
export type GetCitiesByEpciIdQueryResult = Apollo.QueryResult<
  GetCitiesByEpciIdQuery,
  GetCitiesByEpciIdQueryVariables
>;
export const GetCitiesInformationsDocument = gql`
  query getCitiesInformations($searchTerm: String!) {
    getCitiesInformations(searchTerm: $searchTerm, prehome: false) {
      name
      postalCode
      department {
        code
        name
      }
      region {
        code
        name
      }
      insee
      siren
    }
  }
`;

/**
 * __useGetCitiesInformationsQuery__
 *
 * To run a query within a React component, call `useGetCitiesInformationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCitiesInformationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCitiesInformationsQuery({
 *   variables: {
 *      searchTerm: // value for 'searchTerm'
 *   },
 * });
 */
export function useGetCitiesInformationsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetCitiesInformationsQuery,
    GetCitiesInformationsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetCitiesInformationsQuery,
    GetCitiesInformationsQueryVariables
  >(GetCitiesInformationsDocument, options);
}
export function useGetCitiesInformationsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCitiesInformationsQuery,
    GetCitiesInformationsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetCitiesInformationsQuery,
    GetCitiesInformationsQueryVariables
  >(GetCitiesInformationsDocument, options);
}
export type GetCitiesInformationsQueryHookResult = ReturnType<
  typeof useGetCitiesInformationsQuery
>;
export type GetCitiesInformationsLazyQueryHookResult = ReturnType<
  typeof useGetCitiesInformationsLazyQuery
>;
export type GetCitiesInformationsQueryResult = Apollo.QueryResult<
  GetCitiesInformationsQuery,
  GetCitiesInformationsQueryVariables
>;
export const GetContractCitiesByContractIdDocument = gql`
  query getContractCitiesByContractId(
    $contractId: ID!
    $pagination: PaginationArg
    $sort: [String]
  ) {
    cities(
      filters: {
        territories: { contract: { id: { eq: $contractId } } }
        epci: { id: { eq: null } }
      }
      pagination: $pagination
      sort: $sort
    ) {
      data {
        id
        attributes {
          name
          insee
          siren
          postalCode
          department
          region
        }
      }
      meta {
        pagination {
          total
          page
          pageSize
          pageCount
        }
      }
    }
  }
`;

/**
 * __useGetContractCitiesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetContractCitiesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContractCitiesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContractCitiesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetContractCitiesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetContractCitiesByContractIdQuery,
    GetContractCitiesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetContractCitiesByContractIdQuery,
    GetContractCitiesByContractIdQueryVariables
  >(GetContractCitiesByContractIdDocument, options);
}
export function useGetContractCitiesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetContractCitiesByContractIdQuery,
    GetContractCitiesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetContractCitiesByContractIdQuery,
    GetContractCitiesByContractIdQueryVariables
  >(GetContractCitiesByContractIdDocument, options);
}
export type GetContractCitiesByContractIdQueryHookResult = ReturnType<
  typeof useGetContractCitiesByContractIdQuery
>;
export type GetContractCitiesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetContractCitiesByContractIdLazyQuery
>;
export type GetContractCitiesByContractIdQueryResult = Apollo.QueryResult<
  GetContractCitiesByContractIdQuery,
  GetContractCitiesByContractIdQueryVariables
>;
export const GetEpcisInformationsDocument = gql`
  query getEpcisInformations($searchTerm: String!) {
    getEpcisInformations(searchTerm: $searchTerm) {
      code
      name
    }
  }
`;

/**
 * __useGetEpcisInformationsQuery__
 *
 * To run a query within a React component, call `useGetEpcisInformationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEpcisInformationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEpcisInformationsQuery({
 *   variables: {
 *      searchTerm: // value for 'searchTerm'
 *   },
 * });
 */
export function useGetEpcisInformationsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEpcisInformationsQuery,
    GetEpcisInformationsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEpcisInformationsQuery,
    GetEpcisInformationsQueryVariables
  >(GetEpcisInformationsDocument, options);
}
export function useGetEpcisInformationsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEpcisInformationsQuery,
    GetEpcisInformationsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEpcisInformationsQuery,
    GetEpcisInformationsQueryVariables
  >(GetEpcisInformationsDocument, options);
}
export type GetEpcisInformationsQueryHookResult = ReturnType<
  typeof useGetEpcisInformationsQuery
>;
export type GetEpcisInformationsLazyQueryHookResult = ReturnType<
  typeof useGetEpcisInformationsLazyQuery
>;
export type GetEpcisInformationsQueryResult = Apollo.QueryResult<
  GetEpcisInformationsQuery,
  GetEpcisInformationsQueryVariables
>;
export const GetTerritoriesByContractIdDocument = gql`
  query getTerritoriesByContractId($contractId: ID!) {
    territories(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        id
        attributes {
          cities {
            data {
              id
              attributes {
                name
                insee
                department
                postalCode
                region
                siren
              }
            }
          }
          numberOfInhabitants
          epcis {
            data {
              id
              attributes {
                name
                siren
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetTerritoriesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetTerritoriesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTerritoriesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTerritoriesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetTerritoriesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetTerritoriesByContractIdQuery,
    GetTerritoriesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetTerritoriesByContractIdQuery,
    GetTerritoriesByContractIdQueryVariables
  >(GetTerritoriesByContractIdDocument, options);
}
export function useGetTerritoriesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTerritoriesByContractIdQuery,
    GetTerritoriesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetTerritoriesByContractIdQuery,
    GetTerritoriesByContractIdQueryVariables
  >(GetTerritoriesByContractIdDocument, options);
}
export type GetTerritoriesByContractIdQueryHookResult = ReturnType<
  typeof useGetTerritoriesByContractIdQuery
>;
export type GetTerritoriesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetTerritoriesByContractIdLazyQuery
>;
export type GetTerritoriesByContractIdQueryResult = Apollo.QueryResult<
  GetTerritoriesByContractIdQuery,
  GetTerritoriesByContractIdQueryVariables
>;
export const ImportMunicipalitiesByContractIdDocument = gql`
  mutation importMunicipalitiesByContractId($contractId: ID!, $file: String!) {
    importMunicipalities(contractId: $contractId, file: $file)
  }
`;
export type ImportMunicipalitiesByContractIdMutationFn =
  Apollo.MutationFunction<
    ImportMunicipalitiesByContractIdMutation,
    ImportMunicipalitiesByContractIdMutationVariables
  >;

/**
 * __useImportMunicipalitiesByContractIdMutation__
 *
 * To run a mutation, you first call `useImportMunicipalitiesByContractIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useImportMunicipalitiesByContractIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [importMunicipalitiesByContractIdMutation, { data, loading, error }] = useImportMunicipalitiesByContractIdMutation({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      file: // value for 'file'
 *   },
 * });
 */
export function useImportMunicipalitiesByContractIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ImportMunicipalitiesByContractIdMutation,
    ImportMunicipalitiesByContractIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    ImportMunicipalitiesByContractIdMutation,
    ImportMunicipalitiesByContractIdMutationVariables
  >(ImportMunicipalitiesByContractIdDocument, options);
}
export type ImportMunicipalitiesByContractIdMutationHookResult = ReturnType<
  typeof useImportMunicipalitiesByContractIdMutation
>;
export type ImportMunicipalitiesByContractIdMutationResult =
  Apollo.MutationResult<ImportMunicipalitiesByContractIdMutation>;
export type ImportMunicipalitiesByContractIdMutationOptions =
  Apollo.BaseMutationOptions<
    ImportMunicipalitiesByContractIdMutation,
    ImportMunicipalitiesByContractIdMutationVariables
  >;
export const ImportSirenByContractIdDocument = gql`
  mutation importSirenByContractId($contractId: ID!, $file: String!) {
    importSiren(contractId: $contractId, file: $file)
  }
`;
export type ImportSirenByContractIdMutationFn = Apollo.MutationFunction<
  ImportSirenByContractIdMutation,
  ImportSirenByContractIdMutationVariables
>;

/**
 * __useImportSirenByContractIdMutation__
 *
 * To run a mutation, you first call `useImportSirenByContractIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useImportSirenByContractIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [importSirenByContractIdMutation, { data, loading, error }] = useImportSirenByContractIdMutation({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      file: // value for 'file'
 *   },
 * });
 */
export function useImportSirenByContractIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ImportSirenByContractIdMutation,
    ImportSirenByContractIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    ImportSirenByContractIdMutation,
    ImportSirenByContractIdMutationVariables
  >(ImportSirenByContractIdDocument, options);
}
export type ImportSirenByContractIdMutationHookResult = ReturnType<
  typeof useImportSirenByContractIdMutation
>;
export type ImportSirenByContractIdMutationResult =
  Apollo.MutationResult<ImportSirenByContractIdMutation>;
export type ImportSirenByContractIdMutationOptions = Apollo.BaseMutationOptions<
  ImportSirenByContractIdMutation,
  ImportSirenByContractIdMutationVariables
>;
export const UpdateCityByIdDocument = gql`
  mutation updateCityById($cityId: ID!, $data: CityInput!) {
    updateCity(id: $cityId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateCityByIdMutationFn = Apollo.MutationFunction<
  UpdateCityByIdMutation,
  UpdateCityByIdMutationVariables
>;

/**
 * __useUpdateCityByIdMutation__
 *
 * To run a mutation, you first call `useUpdateCityByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCityByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCityByIdMutation, { data, loading, error }] = useUpdateCityByIdMutation({
 *   variables: {
 *      cityId: // value for 'cityId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateCityByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateCityByIdMutation,
    UpdateCityByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateCityByIdMutation,
    UpdateCityByIdMutationVariables
  >(UpdateCityByIdDocument, options);
}
export type UpdateCityByIdMutationHookResult = ReturnType<
  typeof useUpdateCityByIdMutation
>;
export type UpdateCityByIdMutationResult =
  Apollo.MutationResult<UpdateCityByIdMutation>;
export type UpdateCityByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateCityByIdMutation,
  UpdateCityByIdMutationVariables
>;
export const UpdateTerritoryByIdDocument = gql`
  mutation updateTerritoryById(
    $updateTerritoryId: ID!
    $data: TerritoryInput!
  ) {
    updateTerritory(id: $updateTerritoryId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateTerritoryByIdMutationFn = Apollo.MutationFunction<
  UpdateTerritoryByIdMutation,
  UpdateTerritoryByIdMutationVariables
>;

/**
 * __useUpdateTerritoryByIdMutation__
 *
 * To run a mutation, you first call `useUpdateTerritoryByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTerritoryByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTerritoryByIdMutation, { data, loading, error }] = useUpdateTerritoryByIdMutation({
 *   variables: {
 *      updateTerritoryId: // value for 'updateTerritoryId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTerritoryByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateTerritoryByIdMutation,
    UpdateTerritoryByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateTerritoryByIdMutation,
    UpdateTerritoryByIdMutationVariables
  >(UpdateTerritoryByIdDocument, options);
}
export type UpdateTerritoryByIdMutationHookResult = ReturnType<
  typeof useUpdateTerritoryByIdMutation
>;
export type UpdateTerritoryByIdMutationResult =
  Apollo.MutationResult<UpdateTerritoryByIdMutation>;
export type UpdateTerritoryByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateTerritoryByIdMutation,
  UpdateTerritoryByIdMutationVariables
>;
export const CreateBackOfficeUserDocument = gql`
  query createBackOfficeUser(
    $firstName: String!
    $lastName: String!
    $email: String!
    $phoneNumber: String!
    $role: String!
    $contract: String!
  ) {
    createBackOfficeUser(
      firstName: $firstName
      lastName: $lastName
      email: $email
      phoneNumber: $phoneNumber
      role: $role
      contract: $contract
    ) {
      email
      uuid
      firstName
      lastName
      phoneNumber
      role
    }
  }
`;

/**
 * __useCreateBackOfficeUserQuery__
 *
 * To run a query within a React component, call `useCreateBackOfficeUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCreateBackOfficeUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCreateBackOfficeUserQuery({
 *   variables: {
 *      firstName: // value for 'firstName'
 *      lastName: // value for 'lastName'
 *      email: // value for 'email'
 *      phoneNumber: // value for 'phoneNumber'
 *      role: // value for 'role'
 *      contract: // value for 'contract'
 *   },
 * });
 */
export function useCreateBackOfficeUserQuery(
  baseOptions: Apollo.QueryHookOptions<
    CreateBackOfficeUserQuery,
    CreateBackOfficeUserQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    CreateBackOfficeUserQuery,
    CreateBackOfficeUserQueryVariables
  >(CreateBackOfficeUserDocument, options);
}
export function useCreateBackOfficeUserLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    CreateBackOfficeUserQuery,
    CreateBackOfficeUserQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    CreateBackOfficeUserQuery,
    CreateBackOfficeUserQueryVariables
  >(CreateBackOfficeUserDocument, options);
}
export type CreateBackOfficeUserQueryHookResult = ReturnType<
  typeof useCreateBackOfficeUserQuery
>;
export type CreateBackOfficeUserLazyQueryHookResult = ReturnType<
  typeof useCreateBackOfficeUserLazyQuery
>;
export type CreateBackOfficeUserQueryResult = Apollo.QueryResult<
  CreateBackOfficeUserQuery,
  CreateBackOfficeUserQueryVariables
>;
export const DeleteBackOfficeUserByUuidDocument = gql`
  query deleteBackOfficeUserByUuid($uuid: String) {
    deleteBackOfficeUser(uuid: $uuid) {
      id
      name
      surname
      phone
      email
      uuid
      firstName
      lastName
      phoneNumber
      role
    }
  }
`;

/**
 * __useDeleteBackOfficeUserByUuidQuery__
 *
 * To run a query within a React component, call `useDeleteBackOfficeUserByUuidQuery` and pass it any options that fit your needs.
 * When your component renders, `useDeleteBackOfficeUserByUuidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDeleteBackOfficeUserByUuidQuery({
 *   variables: {
 *      uuid: // value for 'uuid'
 *   },
 * });
 */
export function useDeleteBackOfficeUserByUuidQuery(
  baseOptions?: Apollo.QueryHookOptions<
    DeleteBackOfficeUserByUuidQuery,
    DeleteBackOfficeUserByUuidQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    DeleteBackOfficeUserByUuidQuery,
    DeleteBackOfficeUserByUuidQueryVariables
  >(DeleteBackOfficeUserByUuidDocument, options);
}
export function useDeleteBackOfficeUserByUuidLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    DeleteBackOfficeUserByUuidQuery,
    DeleteBackOfficeUserByUuidQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    DeleteBackOfficeUserByUuidQuery,
    DeleteBackOfficeUserByUuidQueryVariables
  >(DeleteBackOfficeUserByUuidDocument, options);
}
export type DeleteBackOfficeUserByUuidQueryHookResult = ReturnType<
  typeof useDeleteBackOfficeUserByUuidQuery
>;
export type DeleteBackOfficeUserByUuidLazyQueryHookResult = ReturnType<
  typeof useDeleteBackOfficeUserByUuidLazyQuery
>;
export type DeleteBackOfficeUserByUuidQueryResult = Apollo.QueryResult<
  DeleteBackOfficeUserByUuidQuery,
  DeleteBackOfficeUserByUuidQueryVariables
>;
export const GetBackOfficeUserListByContractIdDocument = gql`
  query getBackOfficeUserListByContractId($contractId: ID) {
    getBackOfficeUserListByContractId(contractId: $contractId) {
      uuid
      email
      firstName
      lastName
      phoneNumber
      role
    }
  }
`;

/**
 * __useGetBackOfficeUserListByContractIdQuery__
 *
 * To run a query within a React component, call `useGetBackOfficeUserListByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBackOfficeUserListByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBackOfficeUserListByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetBackOfficeUserListByContractIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetBackOfficeUserListByContractIdQuery,
    GetBackOfficeUserListByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetBackOfficeUserListByContractIdQuery,
    GetBackOfficeUserListByContractIdQueryVariables
  >(GetBackOfficeUserListByContractIdDocument, options);
}
export function useGetBackOfficeUserListByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetBackOfficeUserListByContractIdQuery,
    GetBackOfficeUserListByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetBackOfficeUserListByContractIdQuery,
    GetBackOfficeUserListByContractIdQueryVariables
  >(GetBackOfficeUserListByContractIdDocument, options);
}
export type GetBackOfficeUserListByContractIdQueryHookResult = ReturnType<
  typeof useGetBackOfficeUserListByContractIdQuery
>;
export type GetBackOfficeUserListByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetBackOfficeUserListByContractIdLazyQuery
>;
export type GetBackOfficeUserListByContractIdQueryResult = Apollo.QueryResult<
  GetBackOfficeUserListByContractIdQuery,
  GetBackOfficeUserListByContractIdQueryVariables
>;
export const UpdateBackOfficeUserByUuidDocument = gql`
  query updateBackOfficeUserByUuid(
    $uuid: String!
    $firstName: String!
    $lastName: String!
    $email: String!
    $phoneNumber: String!
    $role: String!
    $isRoleUpdated: Boolean!
    $contractId: String!
  ) {
    updateBackOfficeUser(
      uuid: $uuid
      firstName: $firstName
      lastName: $lastName
      email: $email
      phoneNumber: $phoneNumber
      role: $role
      isRoleUpdated: $isRoleUpdated
      contractId: $contractId
    ) {
      email
      uuid
      firstName
      lastName
      phoneNumber
      role
    }
  }
`;

/**
 * __useUpdateBackOfficeUserByUuidQuery__
 *
 * To run a query within a React component, call `useUpdateBackOfficeUserByUuidQuery` and pass it any options that fit your needs.
 * When your component renders, `useUpdateBackOfficeUserByUuidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUpdateBackOfficeUserByUuidQuery({
 *   variables: {
 *      uuid: // value for 'uuid'
 *      firstName: // value for 'firstName'
 *      lastName: // value for 'lastName'
 *      email: // value for 'email'
 *      phoneNumber: // value for 'phoneNumber'
 *      role: // value for 'role'
 *      isRoleUpdated: // value for 'isRoleUpdated'
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useUpdateBackOfficeUserByUuidQuery(
  baseOptions: Apollo.QueryHookOptions<
    UpdateBackOfficeUserByUuidQuery,
    UpdateBackOfficeUserByUuidQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    UpdateBackOfficeUserByUuidQuery,
    UpdateBackOfficeUserByUuidQueryVariables
  >(UpdateBackOfficeUserByUuidDocument, options);
}
export function useUpdateBackOfficeUserByUuidLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    UpdateBackOfficeUserByUuidQuery,
    UpdateBackOfficeUserByUuidQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    UpdateBackOfficeUserByUuidQuery,
    UpdateBackOfficeUserByUuidQueryVariables
  >(UpdateBackOfficeUserByUuidDocument, options);
}
export type UpdateBackOfficeUserByUuidQueryHookResult = ReturnType<
  typeof useUpdateBackOfficeUserByUuidQuery
>;
export type UpdateBackOfficeUserByUuidLazyQueryHookResult = ReturnType<
  typeof useUpdateBackOfficeUserByUuidLazyQuery
>;
export type UpdateBackOfficeUserByUuidQueryResult = Apollo.QueryResult<
  UpdateBackOfficeUserByUuidQuery,
  UpdateBackOfficeUserByUuidQueryVariables
>;
export const GetActiveServicesByContractIdDocument = gql`
  query getActiveServicesByContractId($contractId: ID!) {
    editorialServices(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        attributes {
          eventSubService {
            data {
              attributes {
                isActivated
                startDate
                endDate
              }
            }
          }
          newsSubService {
            data {
              attributes {
                isActivated
                startDate
                endDate
              }
            }
          }
          quizSubService {
            data {
              attributes {
                isActivated
                startDate
                endDate
              }
            }
          }
          tipSubService {
            data {
              attributes {
                isActivated
                startDate
                endDate
              }
            }
          }
          freeContentSubServices {
            data {
              attributes {
                isActivated
                startDate
                endDate
              }
            }
          }
          contactUsSubService {
            data {
              attributes {
                isActivated
                startDate
                endDate
              }
            }
          }
        }
      }
    }
    recyclingGuideServices(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        attributes {
          isActivated
          startDate
          endDate
        }
      }
    }
    requestServices(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        attributes {
          isActivated
          startDate
          endDate
        }
      }
    }
  }
`;

/**
 * __useGetActiveServicesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetActiveServicesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetActiveServicesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetActiveServicesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetActiveServicesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetActiveServicesByContractIdQuery,
    GetActiveServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetActiveServicesByContractIdQuery,
    GetActiveServicesByContractIdQueryVariables
  >(GetActiveServicesByContractIdDocument, options);
}
export function useGetActiveServicesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetActiveServicesByContractIdQuery,
    GetActiveServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetActiveServicesByContractIdQuery,
    GetActiveServicesByContractIdQueryVariables
  >(GetActiveServicesByContractIdDocument, options);
}
export type GetActiveServicesByContractIdQueryHookResult = ReturnType<
  typeof useGetActiveServicesByContractIdQuery
>;
export type GetActiveServicesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetActiveServicesByContractIdLazyQuery
>;
export type GetActiveServicesByContractIdQueryResult = Apollo.QueryResult<
  GetActiveServicesByContractIdQuery,
  GetActiveServicesByContractIdQueryVariables
>;
export const GetAddressCoordinatesDocument = gql`
  query getAddressCoordinates($searchTerm: String!, $housenumber: Boolean) {
    getAddressCoordinates(searchTerm: $searchTerm, housenumber: $housenumber) {
      name
      latitude
      longitude
      banFeaturesProperties
    }
  }
`;

/**
 * __useGetAddressCoordinatesQuery__
 *
 * To run a query within a React component, call `useGetAddressCoordinatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAddressCoordinatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAddressCoordinatesQuery({
 *   variables: {
 *      searchTerm: // value for 'searchTerm'
 *      housenumber: // value for 'housenumber'
 *   },
 * });
 */
export function useGetAddressCoordinatesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAddressCoordinatesQuery,
    GetAddressCoordinatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAddressCoordinatesQuery,
    GetAddressCoordinatesQueryVariables
  >(GetAddressCoordinatesDocument, options);
}
export function useGetAddressCoordinatesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAddressCoordinatesQuery,
    GetAddressCoordinatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAddressCoordinatesQuery,
    GetAddressCoordinatesQueryVariables
  >(GetAddressCoordinatesDocument, options);
}
export type GetAddressCoordinatesQueryHookResult = ReturnType<
  typeof useGetAddressCoordinatesQuery
>;
export type GetAddressCoordinatesLazyQueryHookResult = ReturnType<
  typeof useGetAddressCoordinatesLazyQuery
>;
export type GetAddressCoordinatesQueryResult = Apollo.QueryResult<
  GetAddressCoordinatesQuery,
  GetAddressCoordinatesQueryVariables
>;
export const GetContractByIdDocument = gql`
  query getContractById($contractId: ID!) {
    contract(id: $contractId) {
      data {
        id
        attributes {
          clientName
          clientType
          contractStatus
          siret
          mwcSiren
          clear
          ccap
          isNonExclusive
          isRVFrance
          isFreemium
          pathId
          idPianoAnalytics
          logo {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
              }
            }
          }
          channelType {
            data {
              id
              attributes {
                hasWebApp
                hasWebSite
                hasYesWeScan
              }
            }
          }
          clientContact {
            data {
              id
              attributes {
                firstName
                lastName
                email
                phoneNumber
              }
            }
          }
          contractCustomization {
            data {
              id
              attributes {
                primaryColor
                secondaryColor
                textContrast
              }
            }
          }
          editorialService {
            data {
              id
              attributes {
                eventSubService {
                  data {
                    id
                    attributes {
                      name
                      isActivated
                      startDate
                      endDate
                    }
                  }
                }
                freeContentSubServices {
                  data {
                    id
                    attributes {
                      name
                      isActivated
                      startDate
                      endDate
                    }
                  }
                }
                newsSubService {
                  data {
                    id
                    attributes {
                      name
                      isActivated
                      startDate
                      endDate
                    }
                  }
                }
                quizSubService {
                  data {
                    id
                    attributes {
                      name
                      isActivated
                      startDate
                      endDate
                    }
                  }
                }
                tipSubService {
                  data {
                    id
                    attributes {
                      name
                      isActivated
                      startDate
                      endDate
                    }
                  }
                }
                contactUsSubService {
                  data {
                    id
                    attributes {
                      label
                      name
                      isActivated
                      startDate
                      endDate
                    }
                  }
                }
                cookiesSubService {
                  data {
                    id
                    attributes {
                      name
                    }
                  }
                }
                cguSubService {
                  data {
                    id
                    attributes {
                      name
                    }
                  }
                }
                confidentialitySubService {
                  data {
                    id
                    attributes {
                      name
                    }
                  }
                }
              }
            }
          }
          alertNotificationService {
            data {
              id
              attributes {
                name
                isActivated
                startDate
                endDate
              }
            }
          }
          recyclingGuideService {
            data {
              id
              attributes {
                name
                isActivated
                memoName
                startDate
                endDate
              }
            }
          }
          pickUpDayService {
            data {
              id
              attributes {
                name
                isActivated
                startDate
                endDate
              }
            }
          }
          dropOffMapService {
            data {
              id
              attributes {
                name
                isActivated
                startDate
                endDate
              }
            }
          }
          requestService {
            data {
              id
              attributes {
                name
                isActivated
                startDate
                endDate
              }
            }
          }
          yesWeScanServices {
            data {
              id
              attributes {
                startDate
                endDate
                serviceName
                shortName
              }
            }
          }
          MwCounterService {
            data {
              id
              attributes {
                name
                isActivated
                startDate
                endDate
              }
            }
          }
          audiences(filters: { isActive: { eq: true } }) {
            data {
              id
              attributes {
                type
                isActive
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetContractByIdQuery__
 *
 * To run a query within a React component, call `useGetContractByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContractByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContractByIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetContractByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetContractByIdQuery,
    GetContractByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetContractByIdQuery, GetContractByIdQueryVariables>(
    GetContractByIdDocument,
    options,
  );
}
export function useGetContractByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetContractByIdQuery,
    GetContractByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetContractByIdQuery,
    GetContractByIdQueryVariables
  >(GetContractByIdDocument, options);
}
export type GetContractByIdQueryHookResult = ReturnType<
  typeof useGetContractByIdQuery
>;
export type GetContractByIdLazyQueryHookResult = ReturnType<
  typeof useGetContractByIdLazyQuery
>;
export type GetContractByIdQueryResult = Apollo.QueryResult<
  GetContractByIdQuery,
  GetContractByIdQueryVariables
>;
export const GetContractsDocument = gql`
  query getContracts {
    contracts {
      data {
        id
        attributes {
          clientName
          contractStatus
          dueDate
          clientType
          isNonExclusive
          isRVFrance
          isFreemium
          idPianoAnalytics
          logo {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
              }
            }
          }
          channelType {
            data {
              id
              attributes {
                hasWebApp
                hasWebSite
                hasYesWeScan
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetContractsQuery__
 *
 * To run a query within a React component, call `useGetContractsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContractsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContractsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetContractsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetContractsQuery,
    GetContractsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetContractsQuery, GetContractsQueryVariables>(
    GetContractsDocument,
    options,
  );
}
export function useGetContractsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetContractsQuery,
    GetContractsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetContractsQuery, GetContractsQueryVariables>(
    GetContractsDocument,
    options,
  );
}
export type GetContractsQueryHookResult = ReturnType<
  typeof useGetContractsQuery
>;
export type GetContractsLazyQueryHookResult = ReturnType<
  typeof useGetContractsLazyQuery
>;
export type GetContractsQueryResult = Apollo.QueryResult<
  GetContractsQuery,
  GetContractsQueryVariables
>;
export const GetUserContractsDocument = gql`
  query getUserContracts($uuid: String!) {
    getUserContracts(uuid: $uuid) {
      id
      clientName
      contractStatus
      dueDate
      clientType
      isNonExclusive
      isRVFrance
      isFreemium
      updatedAt
      logo {
        hash
        mime
        name
        provider
        size
        url
        alternativeText
      }
      channelType {
        hasWebApp
        hasWebSite
        hasYesWeScan
      }
    }
  }
`;

/**
 * __useGetUserContractsQuery__
 *
 * To run a query within a React component, call `useGetUserContractsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserContractsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserContractsQuery({
 *   variables: {
 *      uuid: // value for 'uuid'
 *   },
 * });
 */
export function useGetUserContractsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetUserContractsQuery,
    GetUserContractsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetUserContractsQuery, GetUserContractsQueryVariables>(
    GetUserContractsDocument,
    options,
  );
}
export function useGetUserContractsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetUserContractsQuery,
    GetUserContractsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetUserContractsQuery,
    GetUserContractsQueryVariables
  >(GetUserContractsDocument, options);
}
export type GetUserContractsQueryHookResult = ReturnType<
  typeof useGetUserContractsQuery
>;
export type GetUserContractsLazyQueryHookResult = ReturnType<
  typeof useGetUserContractsLazyQuery
>;
export type GetUserContractsQueryResult = Apollo.QueryResult<
  GetUserContractsQuery,
  GetUserContractsQueryVariables
>;
export const CreateMwcFlowDocument = gql`
  mutation createMwcFlow($data: MwcFlowInput!) {
    createMwcFlow(data: $data) {
      data {
        id
      }
    }
  }
`;
export type CreateMwcFlowMutationFn = Apollo.MutationFunction<
  CreateMwcFlowMutation,
  CreateMwcFlowMutationVariables
>;

/**
 * __useCreateMwcFlowMutation__
 *
 * To run a mutation, you first call `useCreateMwcFlowMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateMwcFlowMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createMwcFlowMutation, { data, loading, error }] = useCreateMwcFlowMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateMwcFlowMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateMwcFlowMutation,
    CreateMwcFlowMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateMwcFlowMutation,
    CreateMwcFlowMutationVariables
  >(CreateMwcFlowDocument, options);
}
export type CreateMwcFlowMutationHookResult = ReturnType<
  typeof useCreateMwcFlowMutation
>;
export type CreateMwcFlowMutationResult =
  Apollo.MutationResult<CreateMwcFlowMutation>;
export type CreateMwcFlowMutationOptions = Apollo.BaseMutationOptions<
  CreateMwcFlowMutation,
  CreateMwcFlowMutationVariables
>;
export const DeleteMwcFlowDocument = gql`
  mutation deleteMwcFlow($deleteMwcFlowId: ID!) {
    deleteMwcFlow(id: $deleteMwcFlowId) {
      data {
        id
      }
    }
  }
`;
export type DeleteMwcFlowMutationFn = Apollo.MutationFunction<
  DeleteMwcFlowMutation,
  DeleteMwcFlowMutationVariables
>;

/**
 * __useDeleteMwcFlowMutation__
 *
 * To run a mutation, you first call `useDeleteMwcFlowMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteMwcFlowMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteMwcFlowMutation, { data, loading, error }] = useDeleteMwcFlowMutation({
 *   variables: {
 *      deleteMwcFlowId: // value for 'deleteMwcFlowId'
 *   },
 * });
 */
export function useDeleteMwcFlowMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteMwcFlowMutation,
    DeleteMwcFlowMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteMwcFlowMutation,
    DeleteMwcFlowMutationVariables
  >(DeleteMwcFlowDocument, options);
}
export type DeleteMwcFlowMutationHookResult = ReturnType<
  typeof useDeleteMwcFlowMutation
>;
export type DeleteMwcFlowMutationResult =
  Apollo.MutationResult<DeleteMwcFlowMutation>;
export type DeleteMwcFlowMutationOptions = Apollo.BaseMutationOptions<
  DeleteMwcFlowMutation,
  DeleteMwcFlowMutationVariables
>;
export const GetActivatedMwcFlowsByContractIdDocument = gql`
  query getActivatedMwcFlowsByContractId($contractId: ID!) {
    flows(
      filters: {
        contract: { id: { eq: $contractId } }
        isActivated: { eq: true }
        code: { in: ["OMR", "CS", "V", "PA", "DV"] }
      }
    ) {
      data {
        id
        attributes {
          name
          code
        }
      }
    }
  }
`;

/**
 * __useGetActivatedMwcFlowsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetActivatedMwcFlowsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetActivatedMwcFlowsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetActivatedMwcFlowsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetActivatedMwcFlowsByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetActivatedMwcFlowsByContractIdQuery,
    GetActivatedMwcFlowsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetActivatedMwcFlowsByContractIdQuery,
    GetActivatedMwcFlowsByContractIdQueryVariables
  >(GetActivatedMwcFlowsByContractIdDocument, options);
}
export function useGetActivatedMwcFlowsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetActivatedMwcFlowsByContractIdQuery,
    GetActivatedMwcFlowsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetActivatedMwcFlowsByContractIdQuery,
    GetActivatedMwcFlowsByContractIdQueryVariables
  >(GetActivatedMwcFlowsByContractIdDocument, options);
}
export type GetActivatedMwcFlowsByContractIdQueryHookResult = ReturnType<
  typeof useGetActivatedMwcFlowsByContractIdQuery
>;
export type GetActivatedMwcFlowsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetActivatedMwcFlowsByContractIdLazyQuery
>;
export type GetActivatedMwcFlowsByContractIdQueryResult = Apollo.QueryResult<
  GetActivatedMwcFlowsByContractIdQuery,
  GetActivatedMwcFlowsByContractIdQueryVariables
>;
export const GetMwcAverageProductionDocument = gql`
  query getMwcAverageProduction($contractId: ID) {
    getMwcAverageProduction(contractId: $contractId)
  }
`;

/**
 * __useGetMwcAverageProductionQuery__
 *
 * To run a query within a React component, call `useGetMwcAverageProductionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMwcAverageProductionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMwcAverageProductionQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetMwcAverageProductionQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetMwcAverageProductionQuery,
    GetMwcAverageProductionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetMwcAverageProductionQuery,
    GetMwcAverageProductionQueryVariables
  >(GetMwcAverageProductionDocument, options);
}
export function useGetMwcAverageProductionLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetMwcAverageProductionQuery,
    GetMwcAverageProductionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetMwcAverageProductionQuery,
    GetMwcAverageProductionQueryVariables
  >(GetMwcAverageProductionDocument, options);
}
export type GetMwcAverageProductionQueryHookResult = ReturnType<
  typeof useGetMwcAverageProductionQuery
>;
export type GetMwcAverageProductionLazyQueryHookResult = ReturnType<
  typeof useGetMwcAverageProductionLazyQuery
>;
export type GetMwcAverageProductionQueryResult = Apollo.QueryResult<
  GetMwcAverageProductionQuery,
  GetMwcAverageProductionQueryVariables
>;
export const GetMwcBarometerParamsDocument = gql`
  query getMwcBarometerParams($mwCounterServiceId: ID) {
    mwCounterService(id: $mwCounterServiceId) {
      data {
        attributes {
          barometerParams
        }
      }
    }
  }
`;

/**
 * __useGetMwcBarometerParamsQuery__
 *
 * To run a query within a React component, call `useGetMwcBarometerParamsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMwcBarometerParamsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMwcBarometerParamsQuery({
 *   variables: {
 *      mwCounterServiceId: // value for 'mwCounterServiceId'
 *   },
 * });
 */
export function useGetMwcBarometerParamsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetMwcBarometerParamsQuery,
    GetMwcBarometerParamsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetMwcBarometerParamsQuery,
    GetMwcBarometerParamsQueryVariables
  >(GetMwcBarometerParamsDocument, options);
}
export function useGetMwcBarometerParamsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetMwcBarometerParamsQuery,
    GetMwcBarometerParamsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetMwcBarometerParamsQuery,
    GetMwcBarometerParamsQueryVariables
  >(GetMwcBarometerParamsDocument, options);
}
export type GetMwcBarometerParamsQueryHookResult = ReturnType<
  typeof useGetMwcBarometerParamsQuery
>;
export type GetMwcBarometerParamsLazyQueryHookResult = ReturnType<
  typeof useGetMwcBarometerParamsLazyQuery
>;
export type GetMwcBarometerParamsQueryResult = Apollo.QueryResult<
  GetMwcBarometerParamsQuery,
  GetMwcBarometerParamsQueryVariables
>;
export const GetMwcContactDocument = gql`
  query getMwcContact($filters: MwCounterServiceFiltersInput) {
    mwCounterServices(filters: $filters) {
      data {
        attributes {
          serviceName
          contactEmail
          phoneNumber
          postalAddress
          postalCode
          city
        }
      }
    }
  }
`;

/**
 * __useGetMwcContactQuery__
 *
 * To run a query within a React component, call `useGetMwcContactQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMwcContactQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMwcContactQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *   },
 * });
 */
export function useGetMwcContactQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetMwcContactQuery,
    GetMwcContactQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetMwcContactQuery, GetMwcContactQueryVariables>(
    GetMwcContactDocument,
    options,
  );
}
export function useGetMwcContactLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetMwcContactQuery,
    GetMwcContactQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetMwcContactQuery, GetMwcContactQueryVariables>(
    GetMwcContactDocument,
    options,
  );
}
export type GetMwcContactQueryHookResult = ReturnType<
  typeof useGetMwcContactQuery
>;
export type GetMwcContactLazyQueryHookResult = ReturnType<
  typeof useGetMwcContactLazyQuery
>;
export type GetMwcContactQueryResult = Apollo.QueryResult<
  GetMwcContactQuery,
  GetMwcContactQueryVariables
>;
export const GetMwcFlowByFlowIdDocument = gql`
  query getMwcFlowByFlowId($flowId: ID!) {
    flow(id: $flowId) {
      data {
        id
        attributes {
          mwcFlow {
            data {
              id
              attributes {
                flow {
                  data {
                    id
                    attributes {
                      name
                    }
                  }
                }
                averageProductionPerson
                weightSystem
                blocks {
                  ... on ComponentBlocksSubHeading {
                    id
                    subHeadingText
                    subHeadingTag
                  }
                  ... on ComponentBlocksVideo {
                    id
                    videoLink
                    transcriptText
                  }
                  ... on ComponentBlocksWysiwyg {
                    id
                    textEditor
                  }
                  ... on ComponentBlocksImage {
                    id
                    picture {
                      data {
                        id
                        attributes {
                          name
                          alternativeText
                          caption
                          width
                          height
                          formats
                          hash
                          ext
                          mime
                          size
                          url
                          previewUrl
                          provider
                          provider_metadata
                          createdAt
                          updatedAt
                        }
                      }
                    }
                    isDecorative
                    altText
                  }
                  ... on Error {
                    code
                    message
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetMwcFlowByFlowIdQuery__
 *
 * To run a query within a React component, call `useGetMwcFlowByFlowIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMwcFlowByFlowIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMwcFlowByFlowIdQuery({
 *   variables: {
 *      flowId: // value for 'flowId'
 *   },
 * });
 */
export function useGetMwcFlowByFlowIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetMwcFlowByFlowIdQuery,
    GetMwcFlowByFlowIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetMwcFlowByFlowIdQuery,
    GetMwcFlowByFlowIdQueryVariables
  >(GetMwcFlowByFlowIdDocument, options);
}
export function useGetMwcFlowByFlowIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetMwcFlowByFlowIdQuery,
    GetMwcFlowByFlowIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetMwcFlowByFlowIdQuery,
    GetMwcFlowByFlowIdQueryVariables
  >(GetMwcFlowByFlowIdDocument, options);
}
export type GetMwcFlowByFlowIdQueryHookResult = ReturnType<
  typeof useGetMwcFlowByFlowIdQuery
>;
export type GetMwcFlowByFlowIdLazyQueryHookResult = ReturnType<
  typeof useGetMwcFlowByFlowIdLazyQuery
>;
export type GetMwcFlowByFlowIdQueryResult = Apollo.QueryResult<
  GetMwcFlowByFlowIdQuery,
  GetMwcFlowByFlowIdQueryVariables
>;
export const GetMwcFlowsByContractIdDocument = gql`
  query getMwcFlowsByContractId($contractId: ID!) {
    mwcFlows(
      filters: { mwCounterService: { contract: { id: { eq: $contractId } } } }
    ) {
      data {
        id
        attributes {
          weightSystem
          averageProductionPerson
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  id
                  attributes {
                    name
                    alternativeText
                    caption
                    width
                    height
                    formats
                    hash
                    ext
                    mime
                    size
                    url
                    previewUrl
                    provider
                    provider_metadata
                    createdAt
                    updatedAt
                  }
                }
              }
              isDecorative
              altText
            }
            ... on Error {
              code
              message
            }
          }
          flow {
            data {
              id
              attributes {
                isActivated
                code
                name
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetMwcFlowsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetMwcFlowsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMwcFlowsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMwcFlowsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetMwcFlowsByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetMwcFlowsByContractIdQuery,
    GetMwcFlowsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetMwcFlowsByContractIdQuery,
    GetMwcFlowsByContractIdQueryVariables
  >(GetMwcFlowsByContractIdDocument, options);
}
export function useGetMwcFlowsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetMwcFlowsByContractIdQuery,
    GetMwcFlowsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetMwcFlowsByContractIdQuery,
    GetMwcFlowsByContractIdQueryVariables
  >(GetMwcFlowsByContractIdDocument, options);
}
export type GetMwcFlowsByContractIdQueryHookResult = ReturnType<
  typeof useGetMwcFlowsByContractIdQuery
>;
export type GetMwcFlowsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetMwcFlowsByContractIdLazyQuery
>;
export type GetMwcFlowsByContractIdQueryResult = Apollo.QueryResult<
  GetMwcFlowsByContractIdQuery,
  GetMwcFlowsByContractIdQueryVariables
>;
export const GetMwcHasTipsDocument = gql`
  query getMwcHasTips($filters: MwCounterServiceFiltersInput) {
    mwCounterServices(filters: $filters) {
      data {
        attributes {
          hasTips
        }
      }
    }
  }
`;

/**
 * __useGetMwcHasTipsQuery__
 *
 * To run a query within a React component, call `useGetMwcHasTipsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMwcHasTipsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMwcHasTipsQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *   },
 * });
 */
export function useGetMwcHasTipsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetMwcHasTipsQuery,
    GetMwcHasTipsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetMwcHasTipsQuery, GetMwcHasTipsQueryVariables>(
    GetMwcHasTipsDocument,
    options,
  );
}
export function useGetMwcHasTipsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetMwcHasTipsQuery,
    GetMwcHasTipsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetMwcHasTipsQuery, GetMwcHasTipsQueryVariables>(
    GetMwcHasTipsDocument,
    options,
  );
}
export type GetMwcHasTipsQueryHookResult = ReturnType<
  typeof useGetMwcHasTipsQuery
>;
export type GetMwcHasTipsLazyQueryHookResult = ReturnType<
  typeof useGetMwcHasTipsLazyQuery
>;
export type GetMwcHasTipsQueryResult = Apollo.QueryResult<
  GetMwcHasTipsQuery,
  GetMwcHasTipsQueryVariables
>;
export const GetMwcounterServicesDocument = gql`
  query getMwcounterServices($contractId: ID!) {
    mwCounterServices(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        id
        attributes {
          serviceName
          contactEmail
          phoneNumber
          postalAddress
          postalCode
          city
        }
      }
    }
  }
`;

/**
 * __useGetMwcounterServicesQuery__
 *
 * To run a query within a React component, call `useGetMwcounterServicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMwcounterServicesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMwcounterServicesQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetMwcounterServicesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetMwcounterServicesQuery,
    GetMwcounterServicesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetMwcounterServicesQuery,
    GetMwcounterServicesQueryVariables
  >(GetMwcounterServicesDocument, options);
}
export function useGetMwcounterServicesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetMwcounterServicesQuery,
    GetMwcounterServicesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetMwcounterServicesQuery,
    GetMwcounterServicesQueryVariables
  >(GetMwcounterServicesDocument, options);
}
export type GetMwcounterServicesQueryHookResult = ReturnType<
  typeof useGetMwcounterServicesQuery
>;
export type GetMwcounterServicesLazyQueryHookResult = ReturnType<
  typeof useGetMwcounterServicesLazyQuery
>;
export type GetMwcounterServicesQueryResult = Apollo.QueryResult<
  GetMwcounterServicesQuery,
  GetMwcounterServicesQueryVariables
>;
export const GetUserFromAddressOrUuidDocument = gql`
  query getUserFromAddressOrUuid(
    $uuid: String
    $contractId: ID
    $address: String
  ) {
    getUserFromAddressOrUuid(
      uuid: $uuid
      contractId: $contractId
      address: $address
    ) {
      uuid
      activeCounter
      address {
        city
        housenumber
        label
        city
        postcode
        street
      }
      email
      firstName
    }
  }
`;

/**
 * __useGetUserFromAddressOrUuidQuery__
 *
 * To run a query within a React component, call `useGetUserFromAddressOrUuidQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserFromAddressOrUuidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserFromAddressOrUuidQuery({
 *   variables: {
 *      uuid: // value for 'uuid'
 *      contractId: // value for 'contractId'
 *      address: // value for 'address'
 *   },
 * });
 */
export function useGetUserFromAddressOrUuidQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetUserFromAddressOrUuidQuery,
    GetUserFromAddressOrUuidQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetUserFromAddressOrUuidQuery,
    GetUserFromAddressOrUuidQueryVariables
  >(GetUserFromAddressOrUuidDocument, options);
}
export function useGetUserFromAddressOrUuidLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetUserFromAddressOrUuidQuery,
    GetUserFromAddressOrUuidQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetUserFromAddressOrUuidQuery,
    GetUserFromAddressOrUuidQueryVariables
  >(GetUserFromAddressOrUuidDocument, options);
}
export type GetUserFromAddressOrUuidQueryHookResult = ReturnType<
  typeof useGetUserFromAddressOrUuidQuery
>;
export type GetUserFromAddressOrUuidLazyQueryHookResult = ReturnType<
  typeof useGetUserFromAddressOrUuidLazyQuery
>;
export type GetUserFromAddressOrUuidQueryResult = Apollo.QueryResult<
  GetUserFromAddressOrUuidQuery,
  GetUserFromAddressOrUuidQueryVariables
>;
export const UpdateCounterStatusDocument = gql`
  mutation updateCounterStatus($uuid: String!, $activeCounter: Boolean!) {
    updateCounterStatus(uuid: $uuid, activeCounter: $activeCounter) {
      activeCounter
    }
  }
`;
export type UpdateCounterStatusMutationFn = Apollo.MutationFunction<
  UpdateCounterStatusMutation,
  UpdateCounterStatusMutationVariables
>;

/**
 * __useUpdateCounterStatusMutation__
 *
 * To run a mutation, you first call `useUpdateCounterStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCounterStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCounterStatusMutation, { data, loading, error }] = useUpdateCounterStatusMutation({
 *   variables: {
 *      uuid: // value for 'uuid'
 *      activeCounter: // value for 'activeCounter'
 *   },
 * });
 */
export function useUpdateCounterStatusMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateCounterStatusMutation,
    UpdateCounterStatusMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateCounterStatusMutation,
    UpdateCounterStatusMutationVariables
  >(UpdateCounterStatusDocument, options);
}
export type UpdateCounterStatusMutationHookResult = ReturnType<
  typeof useUpdateCounterStatusMutation
>;
export type UpdateCounterStatusMutationResult =
  Apollo.MutationResult<UpdateCounterStatusMutation>;
export type UpdateCounterStatusMutationOptions = Apollo.BaseMutationOptions<
  UpdateCounterStatusMutation,
  UpdateCounterStatusMutationVariables
>;
export const UpdateMwcBarometerParamsDocument = gql`
  mutation updateMwcBarometerParams(
    $updateMwCounterServiceId: ID!
    $data: MwCounterServiceInput!
  ) {
    updateMwCounterService(id: $updateMwCounterServiceId, data: $data) {
      data {
        attributes {
          barometerParams
        }
      }
    }
  }
`;
export type UpdateMwcBarometerParamsMutationFn = Apollo.MutationFunction<
  UpdateMwcBarometerParamsMutation,
  UpdateMwcBarometerParamsMutationVariables
>;

/**
 * __useUpdateMwcBarometerParamsMutation__
 *
 * To run a mutation, you first call `useUpdateMwcBarometerParamsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMwcBarometerParamsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMwcBarometerParamsMutation, { data, loading, error }] = useUpdateMwcBarometerParamsMutation({
 *   variables: {
 *      updateMwCounterServiceId: // value for 'updateMwCounterServiceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateMwcBarometerParamsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateMwcBarometerParamsMutation,
    UpdateMwcBarometerParamsMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateMwcBarometerParamsMutation,
    UpdateMwcBarometerParamsMutationVariables
  >(UpdateMwcBarometerParamsDocument, options);
}
export type UpdateMwcBarometerParamsMutationHookResult = ReturnType<
  typeof useUpdateMwcBarometerParamsMutation
>;
export type UpdateMwcBarometerParamsMutationResult =
  Apollo.MutationResult<UpdateMwcBarometerParamsMutation>;
export type UpdateMwcBarometerParamsMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateMwcBarometerParamsMutation,
    UpdateMwcBarometerParamsMutationVariables
  >;
export const UpdateMwcContactDocument = gql`
  mutation updateMwcContact(
    $contractId: ID!
    $serviceName: String
    $postalAddress: String
    $postalCode: String
    $city: String
    $contactEmail: String
    $phoneNumber: String
  ) {
    updateContactMwc(
      contractId: $contractId
      serviceName: $serviceName
      postalAddress: $postalAddress
      postalCode: $postalCode
      city: $city
      contactEmail: $contactEmail
      phoneNumber: $phoneNumber
    ) {
      serviceName
      postalAddress
      postalCode
      city
      contactEmail
      phoneNumber
    }
  }
`;
export type UpdateMwcContactMutationFn = Apollo.MutationFunction<
  UpdateMwcContactMutation,
  UpdateMwcContactMutationVariables
>;

/**
 * __useUpdateMwcContactMutation__
 *
 * To run a mutation, you first call `useUpdateMwcContactMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMwcContactMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMwcContactMutation, { data, loading, error }] = useUpdateMwcContactMutation({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      serviceName: // value for 'serviceName'
 *      postalAddress: // value for 'postalAddress'
 *      postalCode: // value for 'postalCode'
 *      city: // value for 'city'
 *      contactEmail: // value for 'contactEmail'
 *      phoneNumber: // value for 'phoneNumber'
 *   },
 * });
 */
export function useUpdateMwcContactMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateMwcContactMutation,
    UpdateMwcContactMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateMwcContactMutation,
    UpdateMwcContactMutationVariables
  >(UpdateMwcContactDocument, options);
}
export type UpdateMwcContactMutationHookResult = ReturnType<
  typeof useUpdateMwcContactMutation
>;
export type UpdateMwcContactMutationResult =
  Apollo.MutationResult<UpdateMwcContactMutation>;
export type UpdateMwcContactMutationOptions = Apollo.BaseMutationOptions<
  UpdateMwcContactMutation,
  UpdateMwcContactMutationVariables
>;
export const UpdateMwcFlowDocument = gql`
  mutation updateMwcFlow($data: MwcFlowInput!, $updateMwcFlowId: ID!) {
    updateMwcFlow(data: $data, id: $updateMwcFlowId) {
      data {
        attributes {
          mwCounterService {
            data {
              id
            }
          }
          blocks {
            ... on ComponentBlocksSubHeading {
              id
              subHeadingText
              subHeadingTag
            }
            ... on ComponentBlocksVideo {
              id
              videoLink
              transcriptText
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  attributes {
                    name
                  }
                }
              }
              isDecorative
              altText
            }
          }
          flow {
            data {
              id
            }
          }
          weightSystem
          averageProductionPerson
          createdAt
          updatedAt
        }
      }
    }
  }
`;
export type UpdateMwcFlowMutationFn = Apollo.MutationFunction<
  UpdateMwcFlowMutation,
  UpdateMwcFlowMutationVariables
>;

/**
 * __useUpdateMwcFlowMutation__
 *
 * To run a mutation, you first call `useUpdateMwcFlowMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMwcFlowMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMwcFlowMutation, { data, loading, error }] = useUpdateMwcFlowMutation({
 *   variables: {
 *      data: // value for 'data'
 *      updateMwcFlowId: // value for 'updateMwcFlowId'
 *   },
 * });
 */
export function useUpdateMwcFlowMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateMwcFlowMutation,
    UpdateMwcFlowMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateMwcFlowMutation,
    UpdateMwcFlowMutationVariables
  >(UpdateMwcFlowDocument, options);
}
export type UpdateMwcFlowMutationHookResult = ReturnType<
  typeof useUpdateMwcFlowMutation
>;
export type UpdateMwcFlowMutationResult =
  Apollo.MutationResult<UpdateMwcFlowMutation>;
export type UpdateMwcFlowMutationOptions = Apollo.BaseMutationOptions<
  UpdateMwcFlowMutation,
  UpdateMwcFlowMutationVariables
>;
export const UpdateMwcHasTipsDocument = gql`
  mutation updateMwcHasTips($contractId: ID!, $data: MwCounterServiceInput!) {
    updateMwCounterService(id: $contractId, data: $data) {
      data {
        attributes {
          hasTips
        }
      }
    }
  }
`;
export type UpdateMwcHasTipsMutationFn = Apollo.MutationFunction<
  UpdateMwcHasTipsMutation,
  UpdateMwcHasTipsMutationVariables
>;

/**
 * __useUpdateMwcHasTipsMutation__
 *
 * To run a mutation, you first call `useUpdateMwcHasTipsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMwcHasTipsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMwcHasTipsMutation, { data, loading, error }] = useUpdateMwcHasTipsMutation({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateMwcHasTipsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateMwcHasTipsMutation,
    UpdateMwcHasTipsMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateMwcHasTipsMutation,
    UpdateMwcHasTipsMutationVariables
  >(UpdateMwcHasTipsDocument, options);
}
export type UpdateMwcHasTipsMutationHookResult = ReturnType<
  typeof useUpdateMwcHasTipsMutation
>;
export type UpdateMwcHasTipsMutationResult =
  Apollo.MutationResult<UpdateMwcHasTipsMutation>;
export type UpdateMwcHasTipsMutationOptions = Apollo.BaseMutationOptions<
  UpdateMwcHasTipsMutation,
  UpdateMwcHasTipsMutationVariables
>;
export const CreateSearchEngineBlockDocument = gql`
  mutation createSearchEngineBlock($data: SearchEngineBlockInput!) {
    createSearchEngineBlock(data: $data) {
      data {
        id
      }
    }
  }
`;
export type CreateSearchEngineBlockMutationFn = Apollo.MutationFunction<
  CreateSearchEngineBlockMutation,
  CreateSearchEngineBlockMutationVariables
>;

/**
 * __useCreateSearchEngineBlockMutation__
 *
 * To run a mutation, you first call `useCreateSearchEngineBlockMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSearchEngineBlockMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSearchEngineBlockMutation, { data, loading, error }] = useCreateSearchEngineBlockMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateSearchEngineBlockMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateSearchEngineBlockMutation,
    CreateSearchEngineBlockMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateSearchEngineBlockMutation,
    CreateSearchEngineBlockMutationVariables
  >(CreateSearchEngineBlockDocument, options);
}
export type CreateSearchEngineBlockMutationHookResult = ReturnType<
  typeof useCreateSearchEngineBlockMutation
>;
export type CreateSearchEngineBlockMutationResult =
  Apollo.MutationResult<CreateSearchEngineBlockMutation>;
export type CreateSearchEngineBlockMutationOptions = Apollo.BaseMutationOptions<
  CreateSearchEngineBlockMutation,
  CreateSearchEngineBlockMutationVariables
>;
export const CreateWelcomeMessageBlockDocument = gql`
  mutation createWelcomeMessageBlock($data: WelcomeMessageBlockInput!) {
    createWelcomeMessageBlock(data: $data) {
      data {
        id
      }
    }
  }
`;
export type CreateWelcomeMessageBlockMutationFn = Apollo.MutationFunction<
  CreateWelcomeMessageBlockMutation,
  CreateWelcomeMessageBlockMutationVariables
>;

/**
 * __useCreateWelcomeMessageBlockMutation__
 *
 * To run a mutation, you first call `useCreateWelcomeMessageBlockMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateWelcomeMessageBlockMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createWelcomeMessageBlockMutation, { data, loading, error }] = useCreateWelcomeMessageBlockMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateWelcomeMessageBlockMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateWelcomeMessageBlockMutation,
    CreateWelcomeMessageBlockMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateWelcomeMessageBlockMutation,
    CreateWelcomeMessageBlockMutationVariables
  >(CreateWelcomeMessageBlockDocument, options);
}
export type CreateWelcomeMessageBlockMutationHookResult = ReturnType<
  typeof useCreateWelcomeMessageBlockMutation
>;
export type CreateWelcomeMessageBlockMutationResult =
  Apollo.MutationResult<CreateWelcomeMessageBlockMutation>;
export type CreateWelcomeMessageBlockMutationOptions =
  Apollo.BaseMutationOptions<
    CreateWelcomeMessageBlockMutation,
    CreateWelcomeMessageBlockMutationVariables
  >;
export const GetEditoBlockTabByContractIdAndAudienceIdDocument = gql`
  query getEditoBlockTabByContractIdAndAudienceId(
    $contractId: ID!
    $status: ENUM_EDITOCONTENTDTO_STATUS
    $audienceId: ID!
  ) {
    getEditoBlockDTO(contractId: $contractId, audienceId: $audienceId) {
      id
      displayBlock
      titleContent
      editoContents {
        componentId
        uniqueId
        id
        contentType
        typeName
        attributes {
          title
          status
          publishedDate
        }
      }
    }
    getEditoContentDTOs(
      contractId: $contractId
      status: $status
      audienceId: $audienceId
    ) {
      id
      contentType
      typeName
      uniqueId
      attributes {
        title
        status
        publishedDate
      }
    }
  }
`;

/**
 * __useGetEditoBlockTabByContractIdAndAudienceIdQuery__
 *
 * To run a query within a React component, call `useGetEditoBlockTabByContractIdAndAudienceIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEditoBlockTabByContractIdAndAudienceIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEditoBlockTabByContractIdAndAudienceIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      status: // value for 'status'
 *      audienceId: // value for 'audienceId'
 *   },
 * });
 */
export function useGetEditoBlockTabByContractIdAndAudienceIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEditoBlockTabByContractIdAndAudienceIdQuery,
    GetEditoBlockTabByContractIdAndAudienceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEditoBlockTabByContractIdAndAudienceIdQuery,
    GetEditoBlockTabByContractIdAndAudienceIdQueryVariables
  >(GetEditoBlockTabByContractIdAndAudienceIdDocument, options);
}
export function useGetEditoBlockTabByContractIdAndAudienceIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEditoBlockTabByContractIdAndAudienceIdQuery,
    GetEditoBlockTabByContractIdAndAudienceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEditoBlockTabByContractIdAndAudienceIdQuery,
    GetEditoBlockTabByContractIdAndAudienceIdQueryVariables
  >(GetEditoBlockTabByContractIdAndAudienceIdDocument, options);
}
export type GetEditoBlockTabByContractIdAndAudienceIdQueryHookResult =
  ReturnType<typeof useGetEditoBlockTabByContractIdAndAudienceIdQuery>;
export type GetEditoBlockTabByContractIdAndAudienceIdLazyQueryHookResult =
  ReturnType<typeof useGetEditoBlockTabByContractIdAndAudienceIdLazyQuery>;
export type GetEditoBlockTabByContractIdAndAudienceIdQueryResult =
  Apollo.QueryResult<
    GetEditoBlockTabByContractIdAndAudienceIdQuery,
    GetEditoBlockTabByContractIdAndAudienceIdQueryVariables
  >;
export const GetQuizAndTipsBlockTabByContractIdAndAudienceIdDocument = gql`
  query getQuizAndTipsBlockTabByContractIdAndAudienceId(
    $contractId: ID!
    $status: String!
    $audienceId: ID!
  ) {
    contractCustomizations(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        attributes {
          homepage {
            data {
              attributes {
                quizAndTipsBlocks(
                  filters: { audience: { id: { eq: $audienceId } } }
                ) {
                  data {
                    id
                    attributes {
                      titleContent
                      displayBlock
                      displayQuiz
                      quiz {
                        data {
                          id
                          attributes {
                            title
                            status
                            publishedDate
                          }
                        }
                      }
                      displayTips
                      tips {
                        data {
                          id
                          attributes {
                            title
                            status
                            publishedDate
                            image {
                              data {
                                attributes {
                                  hash
                                  mime
                                  name
                                  provider
                                  size
                                  url
                                  alternativeText
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    quizSubServices(
      filters: { editorialService: { contract: { id: { eq: $contractId } } } }
    ) {
      data {
        attributes {
          quizzes(
            filters: {
              status: { eq: $status }
              audiences: { id: { eq: $audienceId } }
            }
          ) {
            data {
              id
              attributes {
                title
                status
                publishedDate
              }
            }
          }
        }
      }
    }
    tipSubServices(
      filters: { editorialService: { contract: { id: { eq: $contractId } } } }
    ) {
      data {
        attributes {
          tips(
            filters: {
              status: { eq: $status }
              audiences: { id: { eq: $audienceId } }
            }
          ) {
            data {
              id
              attributes {
                title
                status
                publishedDate
                image {
                  data {
                    attributes {
                      hash
                      mime
                      name
                      provider
                      size
                      url
                      alternativeText
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery__
 *
 * To run a query within a React component, call `useGetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      status: // value for 'status'
 *      audienceId: // value for 'audienceId'
 *   },
 * });
 */
export function useGetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery,
    GetQuizAndTipsBlockTabByContractIdAndAudienceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery,
    GetQuizAndTipsBlockTabByContractIdAndAudienceIdQueryVariables
  >(GetQuizAndTipsBlockTabByContractIdAndAudienceIdDocument, options);
}
export function useGetQuizAndTipsBlockTabByContractIdAndAudienceIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery,
    GetQuizAndTipsBlockTabByContractIdAndAudienceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery,
    GetQuizAndTipsBlockTabByContractIdAndAudienceIdQueryVariables
  >(GetQuizAndTipsBlockTabByContractIdAndAudienceIdDocument, options);
}
export type GetQuizAndTipsBlockTabByContractIdAndAudienceIdQueryHookResult =
  ReturnType<typeof useGetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery>;
export type GetQuizAndTipsBlockTabByContractIdAndAudienceIdLazyQueryHookResult =
  ReturnType<
    typeof useGetQuizAndTipsBlockTabByContractIdAndAudienceIdLazyQuery
  >;
export type GetQuizAndTipsBlockTabByContractIdAndAudienceIdQueryResult =
  Apollo.QueryResult<
    GetQuizAndTipsBlockTabByContractIdAndAudienceIdQuery,
    GetQuizAndTipsBlockTabByContractIdAndAudienceIdQueryVariables
  >;
export const GetRecyclingGuideBlockByContractIdDocument = gql`
  query getRecyclingGuideBlockByContractId($contractId: ID!) {
    contractCustomizations(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        attributes {
          homepage {
            data {
              attributes {
                recyclingGuideBlock {
                  data {
                    id
                    attributes {
                      titleContent
                      subtitleContent
                      recyclingGuideDisplayContent
                      tags {
                        data {
                          attributes {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetRecyclingGuideBlockByContractIdQuery__
 *
 * To run a query within a React component, call `useGetRecyclingGuideBlockByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecyclingGuideBlockByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecyclingGuideBlockByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetRecyclingGuideBlockByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRecyclingGuideBlockByContractIdQuery,
    GetRecyclingGuideBlockByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRecyclingGuideBlockByContractIdQuery,
    GetRecyclingGuideBlockByContractIdQueryVariables
  >(GetRecyclingGuideBlockByContractIdDocument, options);
}
export function useGetRecyclingGuideBlockByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecyclingGuideBlockByContractIdQuery,
    GetRecyclingGuideBlockByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRecyclingGuideBlockByContractIdQuery,
    GetRecyclingGuideBlockByContractIdQueryVariables
  >(GetRecyclingGuideBlockByContractIdDocument, options);
}
export type GetRecyclingGuideBlockByContractIdQueryHookResult = ReturnType<
  typeof useGetRecyclingGuideBlockByContractIdQuery
>;
export type GetRecyclingGuideBlockByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetRecyclingGuideBlockByContractIdLazyQuery
>;
export type GetRecyclingGuideBlockByContractIdQueryResult = Apollo.QueryResult<
  GetRecyclingGuideBlockByContractIdQuery,
  GetRecyclingGuideBlockByContractIdQueryVariables
>;
export const GetServicesBlocksByContractIdAndAudienceIdDocument = gql`
  query getServicesBlocksByContractIdAndAudienceId(
    $contractId: ID!
    $audienceId: ID!
  ) {
    contractCustomizations(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        id
        attributes {
          homepage {
            data {
              attributes {
                servicesBlocks(
                  filters: { audience: { id: { eq: $audienceId } } }
                ) {
                  data {
                    id
                    attributes {
                      titleContent
                      serviceLinks {
                        ... on ComponentLinksDropOffMap {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksPickUpDay {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksRecyclingGuide {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksRequest {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksContactUs {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksNews {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksEvents {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksQuizzes {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksTips {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksFrees {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                          freeContents {
                            data {
                              id
                              attributes {
                                name
                              }
                            }
                          }
                        }
                        ... on ComponentLinksExternal {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                          externalLink
                        }
                        ... on ComponentLinksAlertNotification {
                          id
                          isDisplayed
                          name
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksMyWasteCounter {
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                          name
                          id
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetServicesBlocksByContractIdAndAudienceIdQuery__
 *
 * To run a query within a React component, call `useGetServicesBlocksByContractIdAndAudienceIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetServicesBlocksByContractIdAndAudienceIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetServicesBlocksByContractIdAndAudienceIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      audienceId: // value for 'audienceId'
 *   },
 * });
 */
export function useGetServicesBlocksByContractIdAndAudienceIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetServicesBlocksByContractIdAndAudienceIdQuery,
    GetServicesBlocksByContractIdAndAudienceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetServicesBlocksByContractIdAndAudienceIdQuery,
    GetServicesBlocksByContractIdAndAudienceIdQueryVariables
  >(GetServicesBlocksByContractIdAndAudienceIdDocument, options);
}
export function useGetServicesBlocksByContractIdAndAudienceIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetServicesBlocksByContractIdAndAudienceIdQuery,
    GetServicesBlocksByContractIdAndAudienceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetServicesBlocksByContractIdAndAudienceIdQuery,
    GetServicesBlocksByContractIdAndAudienceIdQueryVariables
  >(GetServicesBlocksByContractIdAndAudienceIdDocument, options);
}
export type GetServicesBlocksByContractIdAndAudienceIdQueryHookResult =
  ReturnType<typeof useGetServicesBlocksByContractIdAndAudienceIdQuery>;
export type GetServicesBlocksByContractIdAndAudienceIdLazyQueryHookResult =
  ReturnType<typeof useGetServicesBlocksByContractIdAndAudienceIdLazyQuery>;
export type GetServicesBlocksByContractIdAndAudienceIdQueryResult =
  Apollo.QueryResult<
    GetServicesBlocksByContractIdAndAudienceIdQuery,
    GetServicesBlocksByContractIdAndAudienceIdQueryVariables
  >;
export const GetTopContentBlockTabByContractIdAndAudienceIdDocument = gql`
  query getTopContentBlockTabByContractIdAndAudienceId(
    $contractId: ID!
    $status: ENUM_TOPCONTENTDTO_STATUS
    $audienceId: ID!
  ) {
    getTopContentBlockDTO(contractId: $contractId, audienceId: $audienceId) {
      id
      displayBlock
      displayLastThreeContents
      hasTopContent
      titleContent
      topContent {
        componentId
        uniqueId
        id
        contentType
        typeName
        attributes {
          title
          status
          publishedDate
        }
      }
    }
    getTopContentDTOs(
      contractId: $contractId
      status: $status
      audienceId: $audienceId
    ) {
      id
      contentType
      typeName
      uniqueId
      attributes {
        title
        status
        publishedDate
      }
    }
  }
`;

/**
 * __useGetTopContentBlockTabByContractIdAndAudienceIdQuery__
 *
 * To run a query within a React component, call `useGetTopContentBlockTabByContractIdAndAudienceIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTopContentBlockTabByContractIdAndAudienceIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTopContentBlockTabByContractIdAndAudienceIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      status: // value for 'status'
 *      audienceId: // value for 'audienceId'
 *   },
 * });
 */
export function useGetTopContentBlockTabByContractIdAndAudienceIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetTopContentBlockTabByContractIdAndAudienceIdQuery,
    GetTopContentBlockTabByContractIdAndAudienceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetTopContentBlockTabByContractIdAndAudienceIdQuery,
    GetTopContentBlockTabByContractIdAndAudienceIdQueryVariables
  >(GetTopContentBlockTabByContractIdAndAudienceIdDocument, options);
}
export function useGetTopContentBlockTabByContractIdAndAudienceIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTopContentBlockTabByContractIdAndAudienceIdQuery,
    GetTopContentBlockTabByContractIdAndAudienceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetTopContentBlockTabByContractIdAndAudienceIdQuery,
    GetTopContentBlockTabByContractIdAndAudienceIdQueryVariables
  >(GetTopContentBlockTabByContractIdAndAudienceIdDocument, options);
}
export type GetTopContentBlockTabByContractIdAndAudienceIdQueryHookResult =
  ReturnType<typeof useGetTopContentBlockTabByContractIdAndAudienceIdQuery>;
export type GetTopContentBlockTabByContractIdAndAudienceIdLazyQueryHookResult =
  ReturnType<typeof useGetTopContentBlockTabByContractIdAndAudienceIdLazyQuery>;
export type GetTopContentBlockTabByContractIdAndAudienceIdQueryResult =
  Apollo.QueryResult<
    GetTopContentBlockTabByContractIdAndAudienceIdQuery,
    GetTopContentBlockTabByContractIdAndAudienceIdQueryVariables
  >;
export const GetWelcomeMessageAndSearchEngineBlocksByContractIdDocument = gql`
  query getWelcomeMessageAndSearchEngineBlocksByContractId($contractId: ID!) {
    contractCustomizations(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        attributes {
          homepage {
            data {
              id
              attributes {
                welcomeMessageBlock {
                  data {
                    id
                    attributes {
                      showBlock
                      subtitle
                      title
                    }
                  }
                }
                searchEngineBlock {
                  data {
                    id
                    attributes {
                      titleContent
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetWelcomeMessageAndSearchEngineBlocksByContractIdQuery__
 *
 * To run a query within a React component, call `useGetWelcomeMessageAndSearchEngineBlocksByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWelcomeMessageAndSearchEngineBlocksByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWelcomeMessageAndSearchEngineBlocksByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetWelcomeMessageAndSearchEngineBlocksByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetWelcomeMessageAndSearchEngineBlocksByContractIdQuery,
    GetWelcomeMessageAndSearchEngineBlocksByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetWelcomeMessageAndSearchEngineBlocksByContractIdQuery,
    GetWelcomeMessageAndSearchEngineBlocksByContractIdQueryVariables
  >(GetWelcomeMessageAndSearchEngineBlocksByContractIdDocument, options);
}
export function useGetWelcomeMessageAndSearchEngineBlocksByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetWelcomeMessageAndSearchEngineBlocksByContractIdQuery,
    GetWelcomeMessageAndSearchEngineBlocksByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetWelcomeMessageAndSearchEngineBlocksByContractIdQuery,
    GetWelcomeMessageAndSearchEngineBlocksByContractIdQueryVariables
  >(GetWelcomeMessageAndSearchEngineBlocksByContractIdDocument, options);
}
export type GetWelcomeMessageAndSearchEngineBlocksByContractIdQueryHookResult =
  ReturnType<typeof useGetWelcomeMessageAndSearchEngineBlocksByContractIdQuery>;
export type GetWelcomeMessageAndSearchEngineBlocksByContractIdLazyQueryHookResult =
  ReturnType<
    typeof useGetWelcomeMessageAndSearchEngineBlocksByContractIdLazyQuery
  >;
export type GetWelcomeMessageAndSearchEngineBlocksByContractIdQueryResult =
  Apollo.QueryResult<
    GetWelcomeMessageAndSearchEngineBlocksByContractIdQuery,
    GetWelcomeMessageAndSearchEngineBlocksByContractIdQueryVariables
  >;
export const UpdateEditoBlockByIdDocument = gql`
  mutation updateEditoBlockById(
    $updateEditoBlockId: ID!
    $data: EditoBlockInput!
  ) {
    updateEditoBlock(id: $updateEditoBlockId, data: $data) {
      data {
        id
        attributes {
          displayBlock
          titleContent
        }
      }
    }
  }
`;
export type UpdateEditoBlockByIdMutationFn = Apollo.MutationFunction<
  UpdateEditoBlockByIdMutation,
  UpdateEditoBlockByIdMutationVariables
>;

/**
 * __useUpdateEditoBlockByIdMutation__
 *
 * To run a mutation, you first call `useUpdateEditoBlockByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateEditoBlockByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateEditoBlockByIdMutation, { data, loading, error }] = useUpdateEditoBlockByIdMutation({
 *   variables: {
 *      updateEditoBlockId: // value for 'updateEditoBlockId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateEditoBlockByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateEditoBlockByIdMutation,
    UpdateEditoBlockByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateEditoBlockByIdMutation,
    UpdateEditoBlockByIdMutationVariables
  >(UpdateEditoBlockByIdDocument, options);
}
export type UpdateEditoBlockByIdMutationHookResult = ReturnType<
  typeof useUpdateEditoBlockByIdMutation
>;
export type UpdateEditoBlockByIdMutationResult =
  Apollo.MutationResult<UpdateEditoBlockByIdMutation>;
export type UpdateEditoBlockByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateEditoBlockByIdMutation,
  UpdateEditoBlockByIdMutationVariables
>;
export const UpdateQuizAndTipsBlockByIdDocument = gql`
  mutation updateQuizAndTipsBlockById(
    $quizAndTipsBlockId: ID!
    $data: QuizAndTipsBlockInput!
  ) {
    updateQuizAndTipsBlock(id: $quizAndTipsBlockId, data: $data) {
      data {
        attributes {
          titleContent
          displayBlock
          displayQuiz
          quiz {
            data {
              id
            }
          }
          displayTips
          tips {
            data {
              id
            }
          }
        }
      }
    }
  }
`;
export type UpdateQuizAndTipsBlockByIdMutationFn = Apollo.MutationFunction<
  UpdateQuizAndTipsBlockByIdMutation,
  UpdateQuizAndTipsBlockByIdMutationVariables
>;

/**
 * __useUpdateQuizAndTipsBlockByIdMutation__
 *
 * To run a mutation, you first call `useUpdateQuizAndTipsBlockByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateQuizAndTipsBlockByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateQuizAndTipsBlockByIdMutation, { data, loading, error }] = useUpdateQuizAndTipsBlockByIdMutation({
 *   variables: {
 *      quizAndTipsBlockId: // value for 'quizAndTipsBlockId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateQuizAndTipsBlockByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateQuizAndTipsBlockByIdMutation,
    UpdateQuizAndTipsBlockByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateQuizAndTipsBlockByIdMutation,
    UpdateQuizAndTipsBlockByIdMutationVariables
  >(UpdateQuizAndTipsBlockByIdDocument, options);
}
export type UpdateQuizAndTipsBlockByIdMutationHookResult = ReturnType<
  typeof useUpdateQuizAndTipsBlockByIdMutation
>;
export type UpdateQuizAndTipsBlockByIdMutationResult =
  Apollo.MutationResult<UpdateQuizAndTipsBlockByIdMutation>;
export type UpdateQuizAndTipsBlockByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateQuizAndTipsBlockByIdMutation,
    UpdateQuizAndTipsBlockByIdMutationVariables
  >;
export const UpdateRecyclingGuideBlockByIdDocument = gql`
  mutation updateRecyclingGuideBlockById(
    $updateRecyclingGuideBlockId: ID!
    $data: RecyclingGuideBlockInput!
  ) {
    updateRecyclingGuideBlock(id: $updateRecyclingGuideBlockId, data: $data) {
      data {
        attributes {
          titleContent
          subtitleContent
          recyclingGuideDisplayContent
          tags {
            data {
              attributes {
                name
              }
            }
          }
        }
      }
    }
  }
`;
export type UpdateRecyclingGuideBlockByIdMutationFn = Apollo.MutationFunction<
  UpdateRecyclingGuideBlockByIdMutation,
  UpdateRecyclingGuideBlockByIdMutationVariables
>;

/**
 * __useUpdateRecyclingGuideBlockByIdMutation__
 *
 * To run a mutation, you first call `useUpdateRecyclingGuideBlockByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateRecyclingGuideBlockByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateRecyclingGuideBlockByIdMutation, { data, loading, error }] = useUpdateRecyclingGuideBlockByIdMutation({
 *   variables: {
 *      updateRecyclingGuideBlockId: // value for 'updateRecyclingGuideBlockId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateRecyclingGuideBlockByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateRecyclingGuideBlockByIdMutation,
    UpdateRecyclingGuideBlockByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateRecyclingGuideBlockByIdMutation,
    UpdateRecyclingGuideBlockByIdMutationVariables
  >(UpdateRecyclingGuideBlockByIdDocument, options);
}
export type UpdateRecyclingGuideBlockByIdMutationHookResult = ReturnType<
  typeof useUpdateRecyclingGuideBlockByIdMutation
>;
export type UpdateRecyclingGuideBlockByIdMutationResult =
  Apollo.MutationResult<UpdateRecyclingGuideBlockByIdMutation>;
export type UpdateRecyclingGuideBlockByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateRecyclingGuideBlockByIdMutation,
    UpdateRecyclingGuideBlockByIdMutationVariables
  >;
export const UpdateSearchEngineBlockByIdDocument = gql`
  mutation updateSearchEngineBlockById(
    $updateSearchEngineBlockId: ID!
    $data: SearchEngineBlockInput!
  ) {
    updateSearchEngineBlock(id: $updateSearchEngineBlockId, data: $data) {
      data {
        attributes {
          titleContent
        }
      }
    }
  }
`;
export type UpdateSearchEngineBlockByIdMutationFn = Apollo.MutationFunction<
  UpdateSearchEngineBlockByIdMutation,
  UpdateSearchEngineBlockByIdMutationVariables
>;

/**
 * __useUpdateSearchEngineBlockByIdMutation__
 *
 * To run a mutation, you first call `useUpdateSearchEngineBlockByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSearchEngineBlockByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSearchEngineBlockByIdMutation, { data, loading, error }] = useUpdateSearchEngineBlockByIdMutation({
 *   variables: {
 *      updateSearchEngineBlockId: // value for 'updateSearchEngineBlockId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateSearchEngineBlockByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateSearchEngineBlockByIdMutation,
    UpdateSearchEngineBlockByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateSearchEngineBlockByIdMutation,
    UpdateSearchEngineBlockByIdMutationVariables
  >(UpdateSearchEngineBlockByIdDocument, options);
}
export type UpdateSearchEngineBlockByIdMutationHookResult = ReturnType<
  typeof useUpdateSearchEngineBlockByIdMutation
>;
export type UpdateSearchEngineBlockByIdMutationResult =
  Apollo.MutationResult<UpdateSearchEngineBlockByIdMutation>;
export type UpdateSearchEngineBlockByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateSearchEngineBlockByIdMutation,
    UpdateSearchEngineBlockByIdMutationVariables
  >;
export const UpdateServicesBlockByIdDocument = gql`
  mutation updateServicesBlockById(
    $updateServicesBlockId: ID!
    $data: ServicesBlockInput!
  ) {
    updateServicesBlock(id: $updateServicesBlockId, data: $data) {
      data {
        id
        attributes {
          homepage {
            data {
              attributes {
                servicesBlocks {
                  data {
                    id
                    attributes {
                      titleContent
                      serviceLinks {
                        ... on ComponentLinksDropOffMap {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksPickUpDay {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksRecyclingGuide {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksRequest {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksContactUs {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksNews {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksEvents {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksQuizzes {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksTips {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                        }
                        ... on ComponentLinksFrees {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                          freeContents {
                            data {
                              id
                              attributes {
                                name
                              }
                            }
                          }
                        }
                        ... on ComponentLinksExternal {
                          id
                          name
                          isDisplayed
                          picto {
                            data {
                              id
                              attributes {
                                url
                                alternativeText
                                name
                                ext
                                size
                                width
                                height
                                createdAt
                              }
                            }
                          }
                          externalLink
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;
export type UpdateServicesBlockByIdMutationFn = Apollo.MutationFunction<
  UpdateServicesBlockByIdMutation,
  UpdateServicesBlockByIdMutationVariables
>;

/**
 * __useUpdateServicesBlockByIdMutation__
 *
 * To run a mutation, you first call `useUpdateServicesBlockByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateServicesBlockByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateServicesBlockByIdMutation, { data, loading, error }] = useUpdateServicesBlockByIdMutation({
 *   variables: {
 *      updateServicesBlockId: // value for 'updateServicesBlockId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateServicesBlockByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateServicesBlockByIdMutation,
    UpdateServicesBlockByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateServicesBlockByIdMutation,
    UpdateServicesBlockByIdMutationVariables
  >(UpdateServicesBlockByIdDocument, options);
}
export type UpdateServicesBlockByIdMutationHookResult = ReturnType<
  typeof useUpdateServicesBlockByIdMutation
>;
export type UpdateServicesBlockByIdMutationResult =
  Apollo.MutationResult<UpdateServicesBlockByIdMutation>;
export type UpdateServicesBlockByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateServicesBlockByIdMutation,
  UpdateServicesBlockByIdMutationVariables
>;
export const UpdateTopContentBlockByIdDocument = gql`
  mutation updateTopContentBlockById(
    $updateTopContentBlockId: ID!
    $data: TopContentBlockInput!
  ) {
    updateTopContentBlock(id: $updateTopContentBlockId, data: $data) {
      data {
        attributes {
          homepage {
            data {
              attributes {
                topContentBlocks {
                  data {
                    attributes {
                      displayBlock
                      titleContent
                      hasTopContent
                      displayLastThreeContents
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;
export type UpdateTopContentBlockByIdMutationFn = Apollo.MutationFunction<
  UpdateTopContentBlockByIdMutation,
  UpdateTopContentBlockByIdMutationVariables
>;

/**
 * __useUpdateTopContentBlockByIdMutation__
 *
 * To run a mutation, you first call `useUpdateTopContentBlockByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTopContentBlockByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTopContentBlockByIdMutation, { data, loading, error }] = useUpdateTopContentBlockByIdMutation({
 *   variables: {
 *      updateTopContentBlockId: // value for 'updateTopContentBlockId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTopContentBlockByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateTopContentBlockByIdMutation,
    UpdateTopContentBlockByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateTopContentBlockByIdMutation,
    UpdateTopContentBlockByIdMutationVariables
  >(UpdateTopContentBlockByIdDocument, options);
}
export type UpdateTopContentBlockByIdMutationHookResult = ReturnType<
  typeof useUpdateTopContentBlockByIdMutation
>;
export type UpdateTopContentBlockByIdMutationResult =
  Apollo.MutationResult<UpdateTopContentBlockByIdMutation>;
export type UpdateTopContentBlockByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateTopContentBlockByIdMutation,
    UpdateTopContentBlockByIdMutationVariables
  >;
export const UpdateWelcomeMessageBlockByIdDocument = gql`
  mutation updateWelcomeMessageBlockById(
    $updateWelcomeMessageBlockId: ID!
    $data: WelcomeMessageBlockInput!
  ) {
    updateWelcomeMessageBlock(id: $updateWelcomeMessageBlockId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateWelcomeMessageBlockByIdMutationFn = Apollo.MutationFunction<
  UpdateWelcomeMessageBlockByIdMutation,
  UpdateWelcomeMessageBlockByIdMutationVariables
>;

/**
 * __useUpdateWelcomeMessageBlockByIdMutation__
 *
 * To run a mutation, you first call `useUpdateWelcomeMessageBlockByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWelcomeMessageBlockByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWelcomeMessageBlockByIdMutation, { data, loading, error }] = useUpdateWelcomeMessageBlockByIdMutation({
 *   variables: {
 *      updateWelcomeMessageBlockId: // value for 'updateWelcomeMessageBlockId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateWelcomeMessageBlockByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateWelcomeMessageBlockByIdMutation,
    UpdateWelcomeMessageBlockByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateWelcomeMessageBlockByIdMutation,
    UpdateWelcomeMessageBlockByIdMutationVariables
  >(UpdateWelcomeMessageBlockByIdDocument, options);
}
export type UpdateWelcomeMessageBlockByIdMutationHookResult = ReturnType<
  typeof useUpdateWelcomeMessageBlockByIdMutation
>;
export type UpdateWelcomeMessageBlockByIdMutationResult =
  Apollo.MutationResult<UpdateWelcomeMessageBlockByIdMutation>;
export type UpdateWelcomeMessageBlockByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateWelcomeMessageBlockByIdMutation,
    UpdateWelcomeMessageBlockByIdMutationVariables
  >;
export const GetContractCustomizationByIdDocument = gql`
  query getContractCustomizationById($contractId: ID!) {
    contract(id: $contractId) {
      data {
        id
        attributes {
          communityUrl
          logo {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
              }
            }
          }
          contractCustomization {
            data {
              id
              attributes {
                primaryColor
                secondaryColor
                textContrast
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetContractCustomizationByIdQuery__
 *
 * To run a query within a React component, call `useGetContractCustomizationByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContractCustomizationByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContractCustomizationByIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetContractCustomizationByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetContractCustomizationByIdQuery,
    GetContractCustomizationByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetContractCustomizationByIdQuery,
    GetContractCustomizationByIdQueryVariables
  >(GetContractCustomizationByIdDocument, options);
}
export function useGetContractCustomizationByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetContractCustomizationByIdQuery,
    GetContractCustomizationByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetContractCustomizationByIdQuery,
    GetContractCustomizationByIdQueryVariables
  >(GetContractCustomizationByIdDocument, options);
}
export type GetContractCustomizationByIdQueryHookResult = ReturnType<
  typeof useGetContractCustomizationByIdQuery
>;
export type GetContractCustomizationByIdLazyQueryHookResult = ReturnType<
  typeof useGetContractCustomizationByIdLazyQuery
>;
export type GetContractCustomizationByIdQueryResult = Apollo.QueryResult<
  GetContractCustomizationByIdQuery,
  GetContractCustomizationByIdQueryVariables
>;
export const UpdateContractCustomizationByContractIdDocument = gql`
  mutation updateContractCustomizationByContractId(
    $updateContractId: ID!
    $data: ContractInput!
  ) {
    updateContract(id: $updateContractId, data: $data) {
      data {
        id
        attributes {
          logo {
            data {
              id
              attributes {
                name
                alternativeText
                hash
                mime
                size
                url
                provider
              }
            }
          }
          contractCustomization {
            data {
              id
              attributes {
                primaryColor
                secondaryColor
                textContrast
              }
            }
          }
        }
      }
    }
  }
`;
export type UpdateContractCustomizationByContractIdMutationFn =
  Apollo.MutationFunction<
    UpdateContractCustomizationByContractIdMutation,
    UpdateContractCustomizationByContractIdMutationVariables
  >;

/**
 * __useUpdateContractCustomizationByContractIdMutation__
 *
 * To run a mutation, you first call `useUpdateContractCustomizationByContractIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateContractCustomizationByContractIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateContractCustomizationByContractIdMutation, { data, loading, error }] = useUpdateContractCustomizationByContractIdMutation({
 *   variables: {
 *      updateContractId: // value for 'updateContractId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateContractCustomizationByContractIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateContractCustomizationByContractIdMutation,
    UpdateContractCustomizationByContractIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateContractCustomizationByContractIdMutation,
    UpdateContractCustomizationByContractIdMutationVariables
  >(UpdateContractCustomizationByContractIdDocument, options);
}
export type UpdateContractCustomizationByContractIdMutationHookResult =
  ReturnType<typeof useUpdateContractCustomizationByContractIdMutation>;
export type UpdateContractCustomizationByContractIdMutationResult =
  Apollo.MutationResult<UpdateContractCustomizationByContractIdMutation>;
export type UpdateContractCustomizationByContractIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateContractCustomizationByContractIdMutation,
    UpdateContractCustomizationByContractIdMutationVariables
  >;
export const UpdateContractCustomizationByIdDocument = gql`
  mutation updateContractCustomizationById(
    $updateContractCustomizationId: ID!
    $data: ContractCustomizationInput!
  ) {
    updateContractCustomization(
      id: $updateContractCustomizationId
      data: $data
    ) {
      data {
        attributes {
          primaryColor
          secondaryColor
          textContrast
        }
      }
    }
  }
`;
export type UpdateContractCustomizationByIdMutationFn = Apollo.MutationFunction<
  UpdateContractCustomizationByIdMutation,
  UpdateContractCustomizationByIdMutationVariables
>;

/**
 * __useUpdateContractCustomizationByIdMutation__
 *
 * To run a mutation, you first call `useUpdateContractCustomizationByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateContractCustomizationByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateContractCustomizationByIdMutation, { data, loading, error }] = useUpdateContractCustomizationByIdMutation({
 *   variables: {
 *      updateContractCustomizationId: // value for 'updateContractCustomizationId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateContractCustomizationByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateContractCustomizationByIdMutation,
    UpdateContractCustomizationByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateContractCustomizationByIdMutation,
    UpdateContractCustomizationByIdMutationVariables
  >(UpdateContractCustomizationByIdDocument, options);
}
export type UpdateContractCustomizationByIdMutationHookResult = ReturnType<
  typeof useUpdateContractCustomizationByIdMutation
>;
export type UpdateContractCustomizationByIdMutationResult =
  Apollo.MutationResult<UpdateContractCustomizationByIdMutation>;
export type UpdateContractCustomizationByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateContractCustomizationByIdMutation,
    UpdateContractCustomizationByIdMutationVariables
  >;
export const GetFooterByContractIdDocument = gql`
  query getFooterByContractId($contractId: ID!) {
    contractCustomizations(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        attributes {
          footer {
            data {
              id
              attributes {
                accessibilityLevel
                linkUrl
                linkName
                displayLink
                contactUsSubService {
                  data {
                    id
                    attributes {
                      label
                      link
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetFooterByContractIdQuery__
 *
 * To run a query within a React component, call `useGetFooterByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFooterByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFooterByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetFooterByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFooterByContractIdQuery,
    GetFooterByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetFooterByContractIdQuery,
    GetFooterByContractIdQueryVariables
  >(GetFooterByContractIdDocument, options);
}
export function useGetFooterByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFooterByContractIdQuery,
    GetFooterByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetFooterByContractIdQuery,
    GetFooterByContractIdQueryVariables
  >(GetFooterByContractIdDocument, options);
}
export type GetFooterByContractIdQueryHookResult = ReturnType<
  typeof useGetFooterByContractIdQuery
>;
export type GetFooterByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetFooterByContractIdLazyQuery
>;
export type GetFooterByContractIdQueryResult = Apollo.QueryResult<
  GetFooterByContractIdQuery,
  GetFooterByContractIdQueryVariables
>;
export const UpdateFooterPageByIdAndContactUsSubServiceIdDocument = gql`
  mutation updateFooterPageByIdAndContactUsSubServiceId(
    $updateFooterId: ID!
    $updateFooterData: FooterInput!
    $updateContactUsSubServiceId: ID!
    $updateContactUsSubServiceData: ContactUsSubServiceInput!
  ) {
    updateFooter(id: $updateFooterId, data: $updateFooterData) {
      data {
        id
        attributes {
          accessibilityLevel
        }
      }
    }
    updateContactUsSubService(
      id: $updateContactUsSubServiceId
      data: $updateContactUsSubServiceData
    ) {
      data {
        attributes {
          label
          link
        }
      }
    }
  }
`;
export type UpdateFooterPageByIdAndContactUsSubServiceIdMutationFn =
  Apollo.MutationFunction<
    UpdateFooterPageByIdAndContactUsSubServiceIdMutation,
    UpdateFooterPageByIdAndContactUsSubServiceIdMutationVariables
  >;

/**
 * __useUpdateFooterPageByIdAndContactUsSubServiceIdMutation__
 *
 * To run a mutation, you first call `useUpdateFooterPageByIdAndContactUsSubServiceIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFooterPageByIdAndContactUsSubServiceIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFooterPageByIdAndContactUsSubServiceIdMutation, { data, loading, error }] = useUpdateFooterPageByIdAndContactUsSubServiceIdMutation({
 *   variables: {
 *      updateFooterId: // value for 'updateFooterId'
 *      updateFooterData: // value for 'updateFooterData'
 *      updateContactUsSubServiceId: // value for 'updateContactUsSubServiceId'
 *      updateContactUsSubServiceData: // value for 'updateContactUsSubServiceData'
 *   },
 * });
 */
export function useUpdateFooterPageByIdAndContactUsSubServiceIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateFooterPageByIdAndContactUsSubServiceIdMutation,
    UpdateFooterPageByIdAndContactUsSubServiceIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateFooterPageByIdAndContactUsSubServiceIdMutation,
    UpdateFooterPageByIdAndContactUsSubServiceIdMutationVariables
  >(UpdateFooterPageByIdAndContactUsSubServiceIdDocument, options);
}
export type UpdateFooterPageByIdAndContactUsSubServiceIdMutationHookResult =
  ReturnType<typeof useUpdateFooterPageByIdAndContactUsSubServiceIdMutation>;
export type UpdateFooterPageByIdAndContactUsSubServiceIdMutationResult =
  Apollo.MutationResult<UpdateFooterPageByIdAndContactUsSubServiceIdMutation>;
export type UpdateFooterPageByIdAndContactUsSubServiceIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateFooterPageByIdAndContactUsSubServiceIdMutation,
    UpdateFooterPageByIdAndContactUsSubServiceIdMutationVariables
  >;
export const GetContractMenuByContractIdDocument = gql`
  query getContractMenuByContractId($contractId: ID!) {
    contract(id: $contractId) {
      data {
        id
        attributes {
          contractMenu {
            data {
              id
              attributes {
                serviceLinks {
                  ... on ComponentLinksDropOffMap {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                  ... on ComponentLinksMyWasteCounter {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                  ... on ComponentLinksPickUpDay {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                  ... on ComponentLinksRecyclingGuide {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                  ... on ComponentLinksRequest {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                  ... on ComponentLinksContactUs {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                  ... on ComponentLinksNews {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                  ... on ComponentLinksEvents {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                  ... on ComponentLinksQuizzes {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                  ... on ComponentLinksTips {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                  ... on ComponentLinksFrees {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                  ... on ComponentLinksExternal {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                    externalLink
                  }
                  ... on ComponentLinksAlertNotification {
                    id
                    name
                    isDisplayed
                    picto {
                      data {
                        id
                        attributes {
                          url
                          alternativeText
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetContractMenuByContractIdQuery__
 *
 * To run a query within a React component, call `useGetContractMenuByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContractMenuByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContractMenuByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetContractMenuByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetContractMenuByContractIdQuery,
    GetContractMenuByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetContractMenuByContractIdQuery,
    GetContractMenuByContractIdQueryVariables
  >(GetContractMenuByContractIdDocument, options);
}
export function useGetContractMenuByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetContractMenuByContractIdQuery,
    GetContractMenuByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetContractMenuByContractIdQuery,
    GetContractMenuByContractIdQueryVariables
  >(GetContractMenuByContractIdDocument, options);
}
export type GetContractMenuByContractIdQueryHookResult = ReturnType<
  typeof useGetContractMenuByContractIdQuery
>;
export type GetContractMenuByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetContractMenuByContractIdLazyQuery
>;
export type GetContractMenuByContractIdQueryResult = Apollo.QueryResult<
  GetContractMenuByContractIdQuery,
  GetContractMenuByContractIdQueryVariables
>;
export const UpdateContractMenuByIdDocument = gql`
  mutation updateContractMenuById(
    $updateMenuPageId: ID!
    $data: ContractMenuInput!
  ) {
    updateContractMenu(id: $updateMenuPageId, data: $data) {
      data {
        attributes {
          serviceLinks {
            ... on ComponentLinksDropOffMap {
              id
              name
              isDisplayed
              picto {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
            ... on ComponentLinksPickUpDay {
              id
              name
              isDisplayed
              picto {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
            ... on ComponentLinksRecyclingGuide {
              id
              name
              isDisplayed
              picto {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
            ... on ComponentLinksRequest {
              id
              name
              isDisplayed
              picto {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
            ... on ComponentLinksContactUs {
              id
              name
              isDisplayed
              picto {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
            ... on ComponentLinksNews {
              id
              name
              isDisplayed
              picto {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
            ... on ComponentLinksEvents {
              id
              name
              isDisplayed
              picto {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
            ... on ComponentLinksQuizzes {
              id
              name
              isDisplayed
              picto {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
            ... on ComponentLinksTips {
              id
              name
              isDisplayed
              picto {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
            ... on ComponentLinksFrees {
              id
              name
              isDisplayed
              picto {
                data {
                  attributes {
                    url
                  }
                }
              }
            }
            ... on ComponentLinksExternal {
              id
              name
              isDisplayed
              picto {
                data {
                  attributes {
                    url
                  }
                }
              }
              externalLink
            }
          }
        }
      }
    }
  }
`;
export type UpdateContractMenuByIdMutationFn = Apollo.MutationFunction<
  UpdateContractMenuByIdMutation,
  UpdateContractMenuByIdMutationVariables
>;

/**
 * __useUpdateContractMenuByIdMutation__
 *
 * To run a mutation, you first call `useUpdateContractMenuByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateContractMenuByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateContractMenuByIdMutation, { data, loading, error }] = useUpdateContractMenuByIdMutation({
 *   variables: {
 *      updateMenuPageId: // value for 'updateMenuPageId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateContractMenuByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateContractMenuByIdMutation,
    UpdateContractMenuByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateContractMenuByIdMutation,
    UpdateContractMenuByIdMutationVariables
  >(UpdateContractMenuByIdDocument, options);
}
export type UpdateContractMenuByIdMutationHookResult = ReturnType<
  typeof useUpdateContractMenuByIdMutation
>;
export type UpdateContractMenuByIdMutationResult =
  Apollo.MutationResult<UpdateContractMenuByIdMutation>;
export type UpdateContractMenuByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateContractMenuByIdMutation,
  UpdateContractMenuByIdMutationVariables
>;
export const CreateSectorizationDocument = gql`
  mutation createSectorization($data: SectorizationInput!) {
    createSectorization(data: $data) {
      data {
        id
        attributes {
          createdAt
          description
          name
          polygonCoordinates
          updatedAt
        }
      }
    }
  }
`;
export type CreateSectorizationMutationFn = Apollo.MutationFunction<
  CreateSectorizationMutation,
  CreateSectorizationMutationVariables
>;

/**
 * __useCreateSectorizationMutation__
 *
 * To run a mutation, you first call `useCreateSectorizationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSectorizationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSectorizationMutation, { data, loading, error }] = useCreateSectorizationMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateSectorizationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateSectorizationMutation,
    CreateSectorizationMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateSectorizationMutation,
    CreateSectorizationMutationVariables
  >(CreateSectorizationDocument, options);
}
export type CreateSectorizationMutationHookResult = ReturnType<
  typeof useCreateSectorizationMutation
>;
export type CreateSectorizationMutationResult =
  Apollo.MutationResult<CreateSectorizationMutation>;
export type CreateSectorizationMutationOptions = Apollo.BaseMutationOptions<
  CreateSectorizationMutation,
  CreateSectorizationMutationVariables
>;
export const DeleteSectorizationByIdDocument = gql`
  mutation deleteSectorizationById($deleteSectorizationId: ID!) {
    deleteSectorization(id: $deleteSectorizationId) {
      data {
        id
        attributes {
          createdAt
          description
          name
          polygonCoordinates
          updatedAt
        }
      }
    }
  }
`;
export type DeleteSectorizationByIdMutationFn = Apollo.MutationFunction<
  DeleteSectorizationByIdMutation,
  DeleteSectorizationByIdMutationVariables
>;

/**
 * __useDeleteSectorizationByIdMutation__
 *
 * To run a mutation, you first call `useDeleteSectorizationByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSectorizationByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSectorizationByIdMutation, { data, loading, error }] = useDeleteSectorizationByIdMutation({
 *   variables: {
 *      deleteSectorizationId: // value for 'deleteSectorizationId'
 *   },
 * });
 */
export function useDeleteSectorizationByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteSectorizationByIdMutation,
    DeleteSectorizationByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteSectorizationByIdMutation,
    DeleteSectorizationByIdMutationVariables
  >(DeleteSectorizationByIdDocument, options);
}
export type DeleteSectorizationByIdMutationHookResult = ReturnType<
  typeof useDeleteSectorizationByIdMutation
>;
export type DeleteSectorizationByIdMutationResult =
  Apollo.MutationResult<DeleteSectorizationByIdMutation>;
export type DeleteSectorizationByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteSectorizationByIdMutation,
  DeleteSectorizationByIdMutationVariables
>;
export const GetCitiesByContractIdDocument = gql`
  query getCitiesByContractId($contractId: ID!) {
    territories(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        id
        attributes {
          cities(sort: "name:asc") {
            data {
              attributes {
                name
                GeoJSON
                insee
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetCitiesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetCitiesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCitiesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCitiesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetCitiesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetCitiesByContractIdQuery,
    GetCitiesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetCitiesByContractIdQuery,
    GetCitiesByContractIdQueryVariables
  >(GetCitiesByContractIdDocument, options);
}
export function useGetCitiesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCitiesByContractIdQuery,
    GetCitiesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetCitiesByContractIdQuery,
    GetCitiesByContractIdQueryVariables
  >(GetCitiesByContractIdDocument, options);
}
export type GetCitiesByContractIdQueryHookResult = ReturnType<
  typeof useGetCitiesByContractIdQuery
>;
export type GetCitiesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetCitiesByContractIdLazyQuery
>;
export type GetCitiesByContractIdQueryResult = Apollo.QueryResult<
  GetCitiesByContractIdQuery,
  GetCitiesByContractIdQueryVariables
>;
export const GetSectorizationByCityDocument = gql`
  query getSectorizationByCity($inseeCode: String!) {
    sectorizationByCity(inseeCode: $inseeCode) {
      GeoJson
    }
  }
`;

/**
 * __useGetSectorizationByCityQuery__
 *
 * To run a query within a React component, call `useGetSectorizationByCityQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSectorizationByCityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSectorizationByCityQuery({
 *   variables: {
 *      inseeCode: // value for 'inseeCode'
 *   },
 * });
 */
export function useGetSectorizationByCityQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetSectorizationByCityQuery,
    GetSectorizationByCityQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetSectorizationByCityQuery,
    GetSectorizationByCityQueryVariables
  >(GetSectorizationByCityDocument, options);
}
export function useGetSectorizationByCityLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetSectorizationByCityQuery,
    GetSectorizationByCityQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetSectorizationByCityQuery,
    GetSectorizationByCityQueryVariables
  >(GetSectorizationByCityDocument, options);
}
export type GetSectorizationByCityQueryHookResult = ReturnType<
  typeof useGetSectorizationByCityQuery
>;
export type GetSectorizationByCityLazyQueryHookResult = ReturnType<
  typeof useGetSectorizationByCityLazyQuery
>;
export type GetSectorizationByCityQueryResult = Apollo.QueryResult<
  GetSectorizationByCityQuery,
  GetSectorizationByCityQueryVariables
>;
export const GetSectorizationByIdDocument = gql`
  query getSectorizationById($sectorizationId: ID) {
    sectorization(id: $sectorizationId) {
      data {
        attributes {
          name
          description
          polygonCoordinates
        }
      }
    }
  }
`;

/**
 * __useGetSectorizationByIdQuery__
 *
 * To run a query within a React component, call `useGetSectorizationByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSectorizationByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSectorizationByIdQuery({
 *   variables: {
 *      sectorizationId: // value for 'sectorizationId'
 *   },
 * });
 */
export function useGetSectorizationByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetSectorizationByIdQuery,
    GetSectorizationByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetSectorizationByIdQuery,
    GetSectorizationByIdQueryVariables
  >(GetSectorizationByIdDocument, options);
}
export function useGetSectorizationByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetSectorizationByIdQuery,
    GetSectorizationByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetSectorizationByIdQuery,
    GetSectorizationByIdQueryVariables
  >(GetSectorizationByIdDocument, options);
}
export type GetSectorizationByIdQueryHookResult = ReturnType<
  typeof useGetSectorizationByIdQuery
>;
export type GetSectorizationByIdLazyQueryHookResult = ReturnType<
  typeof useGetSectorizationByIdLazyQuery
>;
export type GetSectorizationByIdQueryResult = Apollo.QueryResult<
  GetSectorizationByIdQuery,
  GetSectorizationByIdQueryVariables
>;
export const GetSectorizationsByContractIdDocument = gql`
  query getSectorizationsByContractId(
    $contractId: ID!
    $pagination: PaginationArg
    $sort: [String]
  ) {
    sectorizations(
      filters: { contract: { id: { eq: $contractId } } }
      pagination: $pagination
      sort: $sort
    ) {
      data {
        id
        attributes {
          createdAt
          description
          name
          updatedAt
          polygonCoordinates
        }
      }
      meta {
        pagination {
          total
          pageSize
          page
          pageCount
        }
      }
    }
  }
`;

/**
 * __useGetSectorizationsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetSectorizationsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSectorizationsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSectorizationsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetSectorizationsByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetSectorizationsByContractIdQuery,
    GetSectorizationsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetSectorizationsByContractIdQuery,
    GetSectorizationsByContractIdQueryVariables
  >(GetSectorizationsByContractIdDocument, options);
}
export function useGetSectorizationsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetSectorizationsByContractIdQuery,
    GetSectorizationsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetSectorizationsByContractIdQuery,
    GetSectorizationsByContractIdQueryVariables
  >(GetSectorizationsByContractIdDocument, options);
}
export type GetSectorizationsByContractIdQueryHookResult = ReturnType<
  typeof useGetSectorizationsByContractIdQuery
>;
export type GetSectorizationsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetSectorizationsByContractIdLazyQuery
>;
export type GetSectorizationsByContractIdQueryResult = Apollo.QueryResult<
  GetSectorizationsByContractIdQuery,
  GetSectorizationsByContractIdQueryVariables
>;
export const UpdateSectorizationByIdDocument = gql`
  mutation updateSectorizationById(
    $updateSectorizationId: ID!
    $data: SectorizationInput!
  ) {
    updateSectorization(id: $updateSectorizationId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateSectorizationByIdMutationFn = Apollo.MutationFunction<
  UpdateSectorizationByIdMutation,
  UpdateSectorizationByIdMutationVariables
>;

/**
 * __useUpdateSectorizationByIdMutation__
 *
 * To run a mutation, you first call `useUpdateSectorizationByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSectorizationByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSectorizationByIdMutation, { data, loading, error }] = useUpdateSectorizationByIdMutation({
 *   variables: {
 *      updateSectorizationId: // value for 'updateSectorizationId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateSectorizationByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateSectorizationByIdMutation,
    UpdateSectorizationByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateSectorizationByIdMutation,
    UpdateSectorizationByIdMutationVariables
  >(UpdateSectorizationByIdDocument, options);
}
export type UpdateSectorizationByIdMutationHookResult = ReturnType<
  typeof useUpdateSectorizationByIdMutation
>;
export type UpdateSectorizationByIdMutationResult =
  Apollo.MutationResult<UpdateSectorizationByIdMutation>;
export type UpdateSectorizationByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateSectorizationByIdMutation,
  UpdateSectorizationByIdMutationVariables
>;
export const GetAudiencesDocument = gql`
  query getAudiences($filters: AudienceFiltersInput) {
    audiences(filters: $filters) {
      data {
        id
        attributes {
          isActive
          type
        }
      }
    }
  }
`;

/**
 * __useGetAudiencesQuery__
 *
 * To run a query within a React component, call `useGetAudiencesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAudiencesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAudiencesQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *   },
 * });
 */
export function useGetAudiencesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAudiencesQuery,
    GetAudiencesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetAudiencesQuery, GetAudiencesQueryVariables>(
    GetAudiencesDocument,
    options,
  );
}
export function useGetAudiencesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAudiencesQuery,
    GetAudiencesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetAudiencesQuery, GetAudiencesQueryVariables>(
    GetAudiencesDocument,
    options,
  );
}
export type GetAudiencesQueryHookResult = ReturnType<
  typeof useGetAudiencesQuery
>;
export type GetAudiencesLazyQueryHookResult = ReturnType<
  typeof useGetAudiencesLazyQuery
>;
export type GetAudiencesQueryResult = Apollo.QueryResult<
  GetAudiencesQuery,
  GetAudiencesQueryVariables
>;
export const UpdateAudienceByIdDocument = gql`
  mutation updateAudienceById($updateAudienceId: ID!, $data: AudienceInput!) {
    updateAudience(id: $updateAudienceId, data: $data) {
      data {
        id
        attributes {
          isActive
        }
      }
    }
  }
`;
export type UpdateAudienceByIdMutationFn = Apollo.MutationFunction<
  UpdateAudienceByIdMutation,
  UpdateAudienceByIdMutationVariables
>;

/**
 * __useUpdateAudienceByIdMutation__
 *
 * To run a mutation, you first call `useUpdateAudienceByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAudienceByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAudienceByIdMutation, { data, loading, error }] = useUpdateAudienceByIdMutation({
 *   variables: {
 *      updateAudienceId: // value for 'updateAudienceId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateAudienceByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAudienceByIdMutation,
    UpdateAudienceByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateAudienceByIdMutation,
    UpdateAudienceByIdMutationVariables
  >(UpdateAudienceByIdDocument, options);
}
export type UpdateAudienceByIdMutationHookResult = ReturnType<
  typeof useUpdateAudienceByIdMutation
>;
export type UpdateAudienceByIdMutationResult =
  Apollo.MutationResult<UpdateAudienceByIdMutation>;
export type UpdateAudienceByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateAudienceByIdMutation,
  UpdateAudienceByIdMutationVariables
>;
export const CreateAlertNotificationDocument = gql`
  mutation createAlertNotification($data: AlertNotificationInput!) {
    createAlertNotification(data: $data) {
      data {
        id
        attributes {
          alertUserStorages {
            data {
              attributes {
                alertNotificationServiceId
                email
                phoneNumber
                isSMS
                isEmail
              }
            }
          }
        }
      }
    }
  }
`;
export type CreateAlertNotificationMutationFn = Apollo.MutationFunction<
  CreateAlertNotificationMutation,
  CreateAlertNotificationMutationVariables
>;

/**
 * __useCreateAlertNotificationMutation__
 *
 * To run a mutation, you first call `useCreateAlertNotificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAlertNotificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAlertNotificationMutation, { data, loading, error }] = useCreateAlertNotificationMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateAlertNotificationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateAlertNotificationMutation,
    CreateAlertNotificationMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateAlertNotificationMutation,
    CreateAlertNotificationMutationVariables
  >(CreateAlertNotificationDocument, options);
}
export type CreateAlertNotificationMutationHookResult = ReturnType<
  typeof useCreateAlertNotificationMutation
>;
export type CreateAlertNotificationMutationResult =
  Apollo.MutationResult<CreateAlertNotificationMutation>;
export type CreateAlertNotificationMutationOptions = Apollo.BaseMutationOptions<
  CreateAlertNotificationMutation,
  CreateAlertNotificationMutationVariables
>;
export const DeleteAlertNotificationByIdDocument = gql`
  mutation deleteAlertNotificationById($deleteAlertNotificationId: ID!) {
    deleteAlertNotification(id: $deleteAlertNotificationId) {
      data {
        id
      }
    }
  }
`;
export type DeleteAlertNotificationByIdMutationFn = Apollo.MutationFunction<
  DeleteAlertNotificationByIdMutation,
  DeleteAlertNotificationByIdMutationVariables
>;

/**
 * __useDeleteAlertNotificationByIdMutation__
 *
 * To run a mutation, you first call `useDeleteAlertNotificationByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteAlertNotificationByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteAlertNotificationByIdMutation, { data, loading, error }] = useDeleteAlertNotificationByIdMutation({
 *   variables: {
 *      deleteAlertNotificationId: // value for 'deleteAlertNotificationId'
 *   },
 * });
 */
export function useDeleteAlertNotificationByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteAlertNotificationByIdMutation,
    DeleteAlertNotificationByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteAlertNotificationByIdMutation,
    DeleteAlertNotificationByIdMutationVariables
  >(DeleteAlertNotificationByIdDocument, options);
}
export type DeleteAlertNotificationByIdMutationHookResult = ReturnType<
  typeof useDeleteAlertNotificationByIdMutation
>;
export type DeleteAlertNotificationByIdMutationResult =
  Apollo.MutationResult<DeleteAlertNotificationByIdMutation>;
export type DeleteAlertNotificationByIdMutationOptions =
  Apollo.BaseMutationOptions<
    DeleteAlertNotificationByIdMutation,
    DeleteAlertNotificationByIdMutationVariables
  >;
export const GetAlertNotificationByIdDocument = gql`
  query getAlertNotificationById($alertNotificationId: ID) {
    alertNotification(id: $alertNotificationId) {
      data {
        id
        attributes {
          alertDescription
          alertSmsMessage
          alertMailMessage
          alertTitle
          scheduledAt
          scheduledAtTime
          subject
          sendSMS
          sendMail
          sectorizations {
            data {
              id
              attributes {
                name
              }
            }
          }
          cities {
            data {
              id
              attributes {
                name
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetAlertNotificationByIdQuery__
 *
 * To run a query within a React component, call `useGetAlertNotificationByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAlertNotificationByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAlertNotificationByIdQuery({
 *   variables: {
 *      alertNotificationId: // value for 'alertNotificationId'
 *   },
 * });
 */
export function useGetAlertNotificationByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAlertNotificationByIdQuery,
    GetAlertNotificationByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAlertNotificationByIdQuery,
    GetAlertNotificationByIdQueryVariables
  >(GetAlertNotificationByIdDocument, options);
}
export function useGetAlertNotificationByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAlertNotificationByIdQuery,
    GetAlertNotificationByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAlertNotificationByIdQuery,
    GetAlertNotificationByIdQueryVariables
  >(GetAlertNotificationByIdDocument, options);
}
export type GetAlertNotificationByIdQueryHookResult = ReturnType<
  typeof useGetAlertNotificationByIdQuery
>;
export type GetAlertNotificationByIdLazyQueryHookResult = ReturnType<
  typeof useGetAlertNotificationByIdLazyQuery
>;
export type GetAlertNotificationByIdQueryResult = Apollo.QueryResult<
  GetAlertNotificationByIdQuery,
  GetAlertNotificationByIdQueryVariables
>;
export const GetAlertNotificationsByContractIdDocument = gql`
  query getAlertNotificationsByContractId(
    $contractId: ID!
    $nowDate: Date!
    $nowTime: String!
    $filters: AlertNotificationFiltersInput!
    $sort: [String]
    $pagination: PaginationArg
  ) {
    sentCount: alertNotifications(
      filters: {
        alertNotifService: { contract: { id: { eq: $contractId } } }
        or: [
          {
            and: [
              { scheduledAt: { eq: $nowDate } }
              { scheduledAtTime: { lte: $nowTime } }
            ]
          }
          { scheduledAt: { lt: $nowDate } }
        ]
      }
    ) {
      meta {
        pagination {
          total
        }
      }
      data {
        attributes {
          sendMail
          sendSMS
          scheduledAt
          alertSmsMessage
          alertMailMessage
          alertDescription
          scheduledAtTime
        }
        id
      }
    }
    notSentCount: alertNotifications(
      filters: {
        alertNotifService: { contract: { id: { eq: $contractId } } }
        or: [
          { and: [{ scheduledAt: { gt: $nowDate } }] }
          {
            and: [
              { scheduledAt: { eq: $nowDate } }
              { scheduledAtTime: { gt: $nowTime } }
            ]
          }
        ]
      }
    ) {
      meta {
        pagination {
          total
        }
      }
      data {
        attributes {
          sendMail
          sendSMS
          scheduledAt
          alertSmsMessage
          alertMailMessage
          alertDescription
          scheduledAtTime
        }
        id
      }
    }
    alertNotifications(
      filters: $filters
      sort: $sort
      pagination: $pagination
    ) {
      meta {
        pagination {
          page
          pageSize
          pageCount
          total
        }
      }
      data {
        attributes {
          sendMail
          sendSMS
          scheduledAt
          alertSmsMessage
          alertMailMessage
          alertDescription
          scheduledAtTime
        }
        id
      }
    }
  }
`;

/**
 * __useGetAlertNotificationsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetAlertNotificationsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAlertNotificationsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAlertNotificationsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      nowDate: // value for 'nowDate'
 *      nowTime: // value for 'nowTime'
 *      filters: // value for 'filters'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useGetAlertNotificationsByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAlertNotificationsByContractIdQuery,
    GetAlertNotificationsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAlertNotificationsByContractIdQuery,
    GetAlertNotificationsByContractIdQueryVariables
  >(GetAlertNotificationsByContractIdDocument, options);
}
export function useGetAlertNotificationsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAlertNotificationsByContractIdQuery,
    GetAlertNotificationsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAlertNotificationsByContractIdQuery,
    GetAlertNotificationsByContractIdQueryVariables
  >(GetAlertNotificationsByContractIdDocument, options);
}
export type GetAlertNotificationsByContractIdQueryHookResult = ReturnType<
  typeof useGetAlertNotificationsByContractIdQuery
>;
export type GetAlertNotificationsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetAlertNotificationsByContractIdLazyQuery
>;
export type GetAlertNotificationsByContractIdQueryResult = Apollo.QueryResult<
  GetAlertNotificationsByContractIdQuery,
  GetAlertNotificationsByContractIdQueryVariables
>;
export const ProgrammedSendDocument = gql`
  mutation programmedSend(
    $isEmail: Boolean
    $isSms: Boolean
    $mailSubject: String
    $smsTitle: String
    $alertSmsMessage: String
    $alertMailMessage: String
    $scheduledAt: Date
    $time: String
    $recipientEmails: [String]
    $recipientnumbers: [String]
  ) {
    programmedSend(
      isEmail: $isEmail
      isSMS: $isSms
      mailSubject: $mailSubject
      smsTitle: $smsTitle
      alertSmsMessage: $alertSmsMessage
      alertMailMessage: $alertMailMessage
      scheduledAt: $scheduledAt
      time: $time
      recipientEmails: $recipientEmails
      recipientnumbers: $recipientnumbers
    )
  }
`;
export type ProgrammedSendMutationFn = Apollo.MutationFunction<
  ProgrammedSendMutation,
  ProgrammedSendMutationVariables
>;

/**
 * __useProgrammedSendMutation__
 *
 * To run a mutation, you first call `useProgrammedSendMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useProgrammedSendMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [programmedSendMutation, { data, loading, error }] = useProgrammedSendMutation({
 *   variables: {
 *      isEmail: // value for 'isEmail'
 *      isSms: // value for 'isSms'
 *      mailSubject: // value for 'mailSubject'
 *      smsTitle: // value for 'smsTitle'
 *      alertSmsMessage: // value for 'alertSmsMessage'
 *      alertMailMessage: // value for 'alertMailMessage'
 *      scheduledAt: // value for 'scheduledAt'
 *      time: // value for 'time'
 *      recipientEmails: // value for 'recipientEmails'
 *      recipientnumbers: // value for 'recipientnumbers'
 *   },
 * });
 */
export function useProgrammedSendMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ProgrammedSendMutation,
    ProgrammedSendMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    ProgrammedSendMutation,
    ProgrammedSendMutationVariables
  >(ProgrammedSendDocument, options);
}
export type ProgrammedSendMutationHookResult = ReturnType<
  typeof useProgrammedSendMutation
>;
export type ProgrammedSendMutationResult =
  Apollo.MutationResult<ProgrammedSendMutation>;
export type ProgrammedSendMutationOptions = Apollo.BaseMutationOptions<
  ProgrammedSendMutation,
  ProgrammedSendMutationVariables
>;
export const SendEmailDocument = gql`
  mutation sendEmail(
    $subject: String
    $content: String
    $recipientEmails: [String]!
  ) {
    sendEmail(
      subject: $subject
      content: $content
      recipientEmails: $recipientEmails
    )
  }
`;
export type SendEmailMutationFn = Apollo.MutationFunction<
  SendEmailMutation,
  SendEmailMutationVariables
>;

/**
 * __useSendEmailMutation__
 *
 * To run a mutation, you first call `useSendEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendEmailMutation, { data, loading, error }] = useSendEmailMutation({
 *   variables: {
 *      subject: // value for 'subject'
 *      content: // value for 'content'
 *      recipientEmails: // value for 'recipientEmails'
 *   },
 * });
 */
export function useSendEmailMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SendEmailMutation,
    SendEmailMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<SendEmailMutation, SendEmailMutationVariables>(
    SendEmailDocument,
    options,
  );
}
export type SendEmailMutationHookResult = ReturnType<
  typeof useSendEmailMutation
>;
export type SendEmailMutationResult = Apollo.MutationResult<SendEmailMutation>;
export type SendEmailMutationOptions = Apollo.BaseMutationOptions<
  SendEmailMutation,
  SendEmailMutationVariables
>;
export const SendSmsDocument = gql`
  mutation sendSMS(
    $content: String!
    $scheduledAt: String
    $sendMultiple: Boolean
    $phoneNumber: [String]!
  ) {
    sendSMS(
      content: $content
      scheduledAt: $scheduledAt
      sendMultiple: $sendMultiple
      phoneNumber: $phoneNumber
    )
  }
`;
export type SendSmsMutationFn = Apollo.MutationFunction<
  SendSmsMutation,
  SendSmsMutationVariables
>;

/**
 * __useSendSmsMutation__
 *
 * To run a mutation, you first call `useSendSmsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendSmsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendSmsMutation, { data, loading, error }] = useSendSmsMutation({
 *   variables: {
 *      content: // value for 'content'
 *      scheduledAt: // value for 'scheduledAt'
 *      sendMultiple: // value for 'sendMultiple'
 *      phoneNumber: // value for 'phoneNumber'
 *   },
 * });
 */
export function useSendSmsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SendSmsMutation,
    SendSmsMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<SendSmsMutation, SendSmsMutationVariables>(
    SendSmsDocument,
    options,
  );
}
export type SendSmsMutationHookResult = ReturnType<typeof useSendSmsMutation>;
export type SendSmsMutationResult = Apollo.MutationResult<SendSmsMutation>;
export type SendSmsMutationOptions = Apollo.BaseMutationOptions<
  SendSmsMutation,
  SendSmsMutationVariables
>;
export const UpdateAlertNotificationByIdDocument = gql`
  mutation updateAlertNotificationById(
    $updateAlertNotificationId: ID!
    $data: AlertNotificationInput!
  ) {
    updateAlertNotification(id: $updateAlertNotificationId, data: $data) {
      data {
        id
        attributes {
          alertUserStorages {
            data {
              attributes {
                alertNotificationServiceId
                email
                phoneNumber
                isSMS
                isEmail
              }
            }
          }
        }
      }
    }
  }
`;
export type UpdateAlertNotificationByIdMutationFn = Apollo.MutationFunction<
  UpdateAlertNotificationByIdMutation,
  UpdateAlertNotificationByIdMutationVariables
>;

/**
 * __useUpdateAlertNotificationByIdMutation__
 *
 * To run a mutation, you first call `useUpdateAlertNotificationByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAlertNotificationByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAlertNotificationByIdMutation, { data, loading, error }] = useUpdateAlertNotificationByIdMutation({
 *   variables: {
 *      updateAlertNotificationId: // value for 'updateAlertNotificationId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateAlertNotificationByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAlertNotificationByIdMutation,
    UpdateAlertNotificationByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateAlertNotificationByIdMutation,
    UpdateAlertNotificationByIdMutationVariables
  >(UpdateAlertNotificationByIdDocument, options);
}
export type UpdateAlertNotificationByIdMutationHookResult = ReturnType<
  typeof useUpdateAlertNotificationByIdMutation
>;
export type UpdateAlertNotificationByIdMutationResult =
  Apollo.MutationResult<UpdateAlertNotificationByIdMutation>;
export type UpdateAlertNotificationByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateAlertNotificationByIdMutation,
    UpdateAlertNotificationByIdMutationVariables
  >;
export const CreateDropOffMapDocument = gql`
  mutation createDropOffMap($data: DropOffMapInput!) {
    createDropOffMap(data: $data) {
      data {
        id
        attributes {
          name
          address
          latitude
          longitude
          phoneNumber
          mustKnow
          audiences {
            data {
              id
            }
          }
          dropOffMapService {
            data {
              id
            }
          }
          collectDropOff {
            data {
              id
              attributes {
                name
              }
            }
          }
          collectVoluntary {
            data {
              id
              attributes {
                name
              }
            }
          }
          downloadableFiles {
            id
            linkText
            file {
              data {
                id
                attributes {
                  name
                  alternativeText
                  hash
                  mime
                  size
                  url
                  provider
                }
              }
            }
          }
          openingHoursBlocks {
            ... on ComponentBlocksOpeningDay {
              id
              weekDay
              morningStart
              morningEnd
              afterNoonStart
              afterNoonEnd
            }
          }
        }
      }
    }
  }
`;
export type CreateDropOffMapMutationFn = Apollo.MutationFunction<
  CreateDropOffMapMutation,
  CreateDropOffMapMutationVariables
>;

/**
 * __useCreateDropOffMapMutation__
 *
 * To run a mutation, you first call `useCreateDropOffMapMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDropOffMapMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDropOffMapMutation, { data, loading, error }] = useCreateDropOffMapMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateDropOffMapMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateDropOffMapMutation,
    CreateDropOffMapMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateDropOffMapMutation,
    CreateDropOffMapMutationVariables
  >(CreateDropOffMapDocument, options);
}
export type CreateDropOffMapMutationHookResult = ReturnType<
  typeof useCreateDropOffMapMutation
>;
export type CreateDropOffMapMutationResult =
  Apollo.MutationResult<CreateDropOffMapMutation>;
export type CreateDropOffMapMutationOptions = Apollo.BaseMutationOptions<
  CreateDropOffMapMutation,
  CreateDropOffMapMutationVariables
>;
export const DeleteDropOffMapByIdDocument = gql`
  mutation deleteDropOffMapById($deleteDropOffMapId: ID!) {
    deleteDropOffMap(id: $deleteDropOffMapId) {
      data {
        id
      }
    }
  }
`;
export type DeleteDropOffMapByIdMutationFn = Apollo.MutationFunction<
  DeleteDropOffMapByIdMutation,
  DeleteDropOffMapByIdMutationVariables
>;

/**
 * __useDeleteDropOffMapByIdMutation__
 *
 * To run a mutation, you first call `useDeleteDropOffMapByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteDropOffMapByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteDropOffMapByIdMutation, { data, loading, error }] = useDeleteDropOffMapByIdMutation({
 *   variables: {
 *      deleteDropOffMapId: // value for 'deleteDropOffMapId'
 *   },
 * });
 */
export function useDeleteDropOffMapByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteDropOffMapByIdMutation,
    DeleteDropOffMapByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteDropOffMapByIdMutation,
    DeleteDropOffMapByIdMutationVariables
  >(DeleteDropOffMapByIdDocument, options);
}
export type DeleteDropOffMapByIdMutationHookResult = ReturnType<
  typeof useDeleteDropOffMapByIdMutation
>;
export type DeleteDropOffMapByIdMutationResult =
  Apollo.MutationResult<DeleteDropOffMapByIdMutation>;
export type DeleteDropOffMapByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteDropOffMapByIdMutation,
  DeleteDropOffMapByIdMutationVariables
>;
export const GetDropOffMapByIdDocument = gql`
  query getDropOffMapById($dropOffMapId: ID!) {
    dropOffMap(id: $dropOffMapId) {
      data {
        id
        attributes {
          name
          address
          latitude
          longitude
          phoneNumber
          mustKnow
          hasCustomAddress
          customAddress
          audiences {
            data {
              id
              attributes {
                type
                isActive
              }
            }
          }
          dropOffMapService {
            data {
              id
            }
          }
          collectDropOff {
            data {
              id
              attributes {
                name
              }
            }
          }
          collectVoluntary {
            data {
              id
              attributes {
                name
              }
            }
          }
          downloadableFiles {
            id
            linkText
            file {
              data {
                id
                attributes {
                  name
                  alternativeText
                  hash
                  mime
                  size
                  url
                  provider
                }
              }
            }
          }
          openingHoursBlocks {
            ... on ComponentBlocksOpeningDay {
              id
              weekDay
              morningStart
              morningEnd
              afterNoonStart
              afterNoonEnd
            }
          }
          wasteFormsStatus
          wasteFormsList {
            data {
              id
              attributes {
                name
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetDropOffMapByIdQuery__
 *
 * To run a query within a React component, call `useGetDropOffMapByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDropOffMapByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDropOffMapByIdQuery({
 *   variables: {
 *      dropOffMapId: // value for 'dropOffMapId'
 *   },
 * });
 */
export function useGetDropOffMapByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetDropOffMapByIdQuery,
    GetDropOffMapByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetDropOffMapByIdQuery,
    GetDropOffMapByIdQueryVariables
  >(GetDropOffMapByIdDocument, options);
}
export function useGetDropOffMapByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetDropOffMapByIdQuery,
    GetDropOffMapByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetDropOffMapByIdQuery,
    GetDropOffMapByIdQueryVariables
  >(GetDropOffMapByIdDocument, options);
}
export type GetDropOffMapByIdQueryHookResult = ReturnType<
  typeof useGetDropOffMapByIdQuery
>;
export type GetDropOffMapByIdLazyQueryHookResult = ReturnType<
  typeof useGetDropOffMapByIdLazyQuery
>;
export type GetDropOffMapByIdQueryResult = Apollo.QueryResult<
  GetDropOffMapByIdQuery,
  GetDropOffMapByIdQueryVariables
>;
export const GetDropOffMapsByContractIdDocument = gql`
  query getDropOffMapsByContractId(
    $contractId: ID!
    $address: String
    $collectDropOffId: ID
    $collectVoluntaryId: ID
    $pagination: PaginationArg
    $sort: [String]
  ) {
    dropOffMaps(
      filters: {
        dropOffMapService: { contract: { id: { eq: $contractId } } }
        address: { contains: $address }
        collectVoluntary: { id: { eq: $collectVoluntaryId } }
        collectDropOff: { id: { eq: $collectDropOffId } }
      }
      pagination: $pagination
      sort: $sort
    ) {
      data {
        id
        attributes {
          createdAt
          description
          name
          updatedAt
          address
          latitude
          longitude
          city
          collectDropOff {
            data {
              attributes {
                name
                picto {
                  data {
                    attributes {
                      url
                      name
                      hash
                      mime
                      provider
                      size
                    }
                    id
                  }
                }
              }
            }
          }
          collectVoluntary {
            data {
              attributes {
                name
                picto {
                  data {
                    id
                    attributes {
                      name
                      url
                      hash
                      mime
                      provider
                      size
                    }
                  }
                }
              }
              id
            }
          }
          BANFeatureProperties
        }
      }
      meta {
        pagination {
          total
          pageSize
          page
          pageCount
        }
      }
    }
  }
`;

/**
 * __useGetDropOffMapsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetDropOffMapsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDropOffMapsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDropOffMapsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      address: // value for 'address'
 *      collectDropOffId: // value for 'collectDropOffId'
 *      collectVoluntaryId: // value for 'collectVoluntaryId'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetDropOffMapsByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetDropOffMapsByContractIdQuery,
    GetDropOffMapsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetDropOffMapsByContractIdQuery,
    GetDropOffMapsByContractIdQueryVariables
  >(GetDropOffMapsByContractIdDocument, options);
}
export function useGetDropOffMapsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetDropOffMapsByContractIdQuery,
    GetDropOffMapsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetDropOffMapsByContractIdQuery,
    GetDropOffMapsByContractIdQueryVariables
  >(GetDropOffMapsByContractIdDocument, options);
}
export type GetDropOffMapsByContractIdQueryHookResult = ReturnType<
  typeof useGetDropOffMapsByContractIdQuery
>;
export type GetDropOffMapsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetDropOffMapsByContractIdLazyQuery
>;
export type GetDropOffMapsByContractIdQueryResult = Apollo.QueryResult<
  GetDropOffMapsByContractIdQuery,
  GetDropOffMapsByContractIdQueryVariables
>;
export const UpdateDropOffMapByIdDocument = gql`
  mutation updateDropOffMapById(
    $updateDropOffMapId: ID!
    $data: DropOffMapInput!
  ) {
    updateDropOffMap(id: $updateDropOffMapId, data: $data) {
      data {
        id
        attributes {
          name
          address
          latitude
          longitude
          phoneNumber
          mustKnow
          audiences {
            data {
              id
            }
          }
          dropOffMapService {
            data {
              id
            }
          }
          collectDropOff {
            data {
              id
              attributes {
                name
              }
            }
          }
          collectVoluntary {
            data {
              id
              attributes {
                name
              }
            }
          }
          downloadableFiles {
            id
            linkText
            file {
              data {
                id
                attributes {
                  name
                  alternativeText
                  hash
                  mime
                  size
                  url
                  provider
                }
              }
            }
          }
          openingHoursBlocks {
            ... on ComponentBlocksOpeningDay {
              id
              weekDay
              morningStart
              morningEnd
              afterNoonStart
              afterNoonEnd
            }
          }
        }
      }
    }
  }
`;
export type UpdateDropOffMapByIdMutationFn = Apollo.MutationFunction<
  UpdateDropOffMapByIdMutation,
  UpdateDropOffMapByIdMutationVariables
>;

/**
 * __useUpdateDropOffMapByIdMutation__
 *
 * To run a mutation, you first call `useUpdateDropOffMapByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateDropOffMapByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateDropOffMapByIdMutation, { data, loading, error }] = useUpdateDropOffMapByIdMutation({
 *   variables: {
 *      updateDropOffMapId: // value for 'updateDropOffMapId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateDropOffMapByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateDropOffMapByIdMutation,
    UpdateDropOffMapByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateDropOffMapByIdMutation,
    UpdateDropOffMapByIdMutationVariables
  >(UpdateDropOffMapByIdDocument, options);
}
export type UpdateDropOffMapByIdMutationHookResult = ReturnType<
  typeof useUpdateDropOffMapByIdMutation
>;
export type UpdateDropOffMapByIdMutationResult =
  Apollo.MutationResult<UpdateDropOffMapByIdMutation>;
export type UpdateDropOffMapByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateDropOffMapByIdMutation,
  UpdateDropOffMapByIdMutationVariables
>;
export const CreateRequestDocument = gql`
  mutation createRequest($data: RequestInput!) {
    createRequest(data: $data) {
      data {
        id
      }
    }
  }
`;
export type CreateRequestMutationFn = Apollo.MutationFunction<
  CreateRequestMutation,
  CreateRequestMutationVariables
>;

/**
 * __useCreateRequestMutation__
 *
 * To run a mutation, you first call `useCreateRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createRequestMutation, { data, loading, error }] = useCreateRequestMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateRequestMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateRequestMutation,
    CreateRequestMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateRequestMutation,
    CreateRequestMutationVariables
  >(CreateRequestDocument, options);
}
export type CreateRequestMutationHookResult = ReturnType<
  typeof useCreateRequestMutation
>;
export type CreateRequestMutationResult =
  Apollo.MutationResult<CreateRequestMutation>;
export type CreateRequestMutationOptions = Apollo.BaseMutationOptions<
  CreateRequestMutation,
  CreateRequestMutationVariables
>;
export const CreateRequestAggregateDocument = gql`
  mutation createRequestAggregate($data: RequestAggregateInput!) {
    createRequestAggregate(data: $data) {
      data {
        id
        attributes {
          name
          requestService {
            data {
              id
            }
          }
          createdAt
          updatedAt
        }
      }
    }
  }
`;
export type CreateRequestAggregateMutationFn = Apollo.MutationFunction<
  CreateRequestAggregateMutation,
  CreateRequestAggregateMutationVariables
>;

/**
 * __useCreateRequestAggregateMutation__
 *
 * To run a mutation, you first call `useCreateRequestAggregateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateRequestAggregateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createRequestAggregateMutation, { data, loading, error }] = useCreateRequestAggregateMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateRequestAggregateMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateRequestAggregateMutation,
    CreateRequestAggregateMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateRequestAggregateMutation,
    CreateRequestAggregateMutationVariables
  >(CreateRequestAggregateDocument, options);
}
export type CreateRequestAggregateMutationHookResult = ReturnType<
  typeof useCreateRequestAggregateMutation
>;
export type CreateRequestAggregateMutationResult =
  Apollo.MutationResult<CreateRequestAggregateMutation>;
export type CreateRequestAggregateMutationOptions = Apollo.BaseMutationOptions<
  CreateRequestAggregateMutation,
  CreateRequestAggregateMutationVariables
>;
export const DeleteRequestAggregateByIdDocument = gql`
  mutation deleteRequestAggregateById($deleteRequestAggregateId: ID!) {
    deleteRequestAggregate(id: $deleteRequestAggregateId) {
      data {
        id
      }
    }
  }
`;
export type DeleteRequestAggregateByIdMutationFn = Apollo.MutationFunction<
  DeleteRequestAggregateByIdMutation,
  DeleteRequestAggregateByIdMutationVariables
>;

/**
 * __useDeleteRequestAggregateByIdMutation__
 *
 * To run a mutation, you first call `useDeleteRequestAggregateByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteRequestAggregateByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteRequestAggregateByIdMutation, { data, loading, error }] = useDeleteRequestAggregateByIdMutation({
 *   variables: {
 *      deleteRequestAggregateId: // value for 'deleteRequestAggregateId'
 *   },
 * });
 */
export function useDeleteRequestAggregateByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteRequestAggregateByIdMutation,
    DeleteRequestAggregateByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteRequestAggregateByIdMutation,
    DeleteRequestAggregateByIdMutationVariables
  >(DeleteRequestAggregateByIdDocument, options);
}
export type DeleteRequestAggregateByIdMutationHookResult = ReturnType<
  typeof useDeleteRequestAggregateByIdMutation
>;
export type DeleteRequestAggregateByIdMutationResult =
  Apollo.MutationResult<DeleteRequestAggregateByIdMutation>;
export type DeleteRequestAggregateByIdMutationOptions =
  Apollo.BaseMutationOptions<
    DeleteRequestAggregateByIdMutation,
    DeleteRequestAggregateByIdMutationVariables
  >;
export const DeleteRequestByIdDocument = gql`
  mutation deleteRequestById($deleteRequestId: ID!) {
    deleteRequest(id: $deleteRequestId) {
      data {
        id
      }
    }
  }
`;
export type DeleteRequestByIdMutationFn = Apollo.MutationFunction<
  DeleteRequestByIdMutation,
  DeleteRequestByIdMutationVariables
>;

/**
 * __useDeleteRequestByIdMutation__
 *
 * To run a mutation, you first call `useDeleteRequestByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteRequestByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteRequestByIdMutation, { data, loading, error }] = useDeleteRequestByIdMutation({
 *   variables: {
 *      deleteRequestId: // value for 'deleteRequestId'
 *   },
 * });
 */
export function useDeleteRequestByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteRequestByIdMutation,
    DeleteRequestByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteRequestByIdMutation,
    DeleteRequestByIdMutationVariables
  >(DeleteRequestByIdDocument, options);
}
export type DeleteRequestByIdMutationHookResult = ReturnType<
  typeof useDeleteRequestByIdMutation
>;
export type DeleteRequestByIdMutationResult =
  Apollo.MutationResult<DeleteRequestByIdMutation>;
export type DeleteRequestByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteRequestByIdMutation,
  DeleteRequestByIdMutationVariables
>;
export const DeleteRequestTakedByIdDocument = gql`
  mutation deleteRequestTakedById($deleteRequestTakedId: ID!) {
    deleteRequestTaked(id: $deleteRequestTakedId) {
      data {
        id
      }
    }
  }
`;
export type DeleteRequestTakedByIdMutationFn = Apollo.MutationFunction<
  DeleteRequestTakedByIdMutation,
  DeleteRequestTakedByIdMutationVariables
>;

/**
 * __useDeleteRequestTakedByIdMutation__
 *
 * To run a mutation, you first call `useDeleteRequestTakedByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteRequestTakedByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteRequestTakedByIdMutation, { data, loading, error }] = useDeleteRequestTakedByIdMutation({
 *   variables: {
 *      deleteRequestTakedId: // value for 'deleteRequestTakedId'
 *   },
 * });
 */
export function useDeleteRequestTakedByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteRequestTakedByIdMutation,
    DeleteRequestTakedByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteRequestTakedByIdMutation,
    DeleteRequestTakedByIdMutationVariables
  >(DeleteRequestTakedByIdDocument, options);
}
export type DeleteRequestTakedByIdMutationHookResult = ReturnType<
  typeof useDeleteRequestTakedByIdMutation
>;
export type DeleteRequestTakedByIdMutationResult =
  Apollo.MutationResult<DeleteRequestTakedByIdMutation>;
export type DeleteRequestTakedByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteRequestTakedByIdMutation,
  DeleteRequestTakedByIdMutationVariables
>;
export const GetAppointmentsDetailsByRequestIdDocument = gql`
  query getAppointmentsDetailsByRequestId($requestId: ID!) {
    getAppointmentsDetails(requestId: $requestId) {
      title
      appointments {
        sectorNames
        timeSlotsWithUsers {
          date
          dynamic
          fixed
          slot
          requestTakeds {
            id
            user {
              name
              surname
              phone
              email
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetAppointmentsDetailsByRequestIdQuery__
 *
 * To run a query within a React component, call `useGetAppointmentsDetailsByRequestIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAppointmentsDetailsByRequestIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAppointmentsDetailsByRequestIdQuery({
 *   variables: {
 *      requestId: // value for 'requestId'
 *   },
 * });
 */
export function useGetAppointmentsDetailsByRequestIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAppointmentsDetailsByRequestIdQuery,
    GetAppointmentsDetailsByRequestIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAppointmentsDetailsByRequestIdQuery,
    GetAppointmentsDetailsByRequestIdQueryVariables
  >(GetAppointmentsDetailsByRequestIdDocument, options);
}
export function useGetAppointmentsDetailsByRequestIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAppointmentsDetailsByRequestIdQuery,
    GetAppointmentsDetailsByRequestIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAppointmentsDetailsByRequestIdQuery,
    GetAppointmentsDetailsByRequestIdQueryVariables
  >(GetAppointmentsDetailsByRequestIdDocument, options);
}
export type GetAppointmentsDetailsByRequestIdQueryHookResult = ReturnType<
  typeof useGetAppointmentsDetailsByRequestIdQuery
>;
export type GetAppointmentsDetailsByRequestIdLazyQueryHookResult = ReturnType<
  typeof useGetAppointmentsDetailsByRequestIdLazyQuery
>;
export type GetAppointmentsDetailsByRequestIdQueryResult = Apollo.QueryResult<
  GetAppointmentsDetailsByRequestIdQuery,
  GetAppointmentsDetailsByRequestIdQueryVariables
>;
export const GetEnrichRequestsByRequestServiceIdDocument = gql`
  query getEnrichRequestsByRequestServiceId($requestServiceId: ID!) {
    getEnrichRequests(requestServiceId: $requestServiceId) {
      requestName
      requestId
      dynamicAppointments
    }
  }
`;

/**
 * __useGetEnrichRequestsByRequestServiceIdQuery__
 *
 * To run a query within a React component, call `useGetEnrichRequestsByRequestServiceIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnrichRequestsByRequestServiceIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnrichRequestsByRequestServiceIdQuery({
 *   variables: {
 *      requestServiceId: // value for 'requestServiceId'
 *   },
 * });
 */
export function useGetEnrichRequestsByRequestServiceIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetEnrichRequestsByRequestServiceIdQuery,
    GetEnrichRequestsByRequestServiceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetEnrichRequestsByRequestServiceIdQuery,
    GetEnrichRequestsByRequestServiceIdQueryVariables
  >(GetEnrichRequestsByRequestServiceIdDocument, options);
}
export function useGetEnrichRequestsByRequestServiceIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEnrichRequestsByRequestServiceIdQuery,
    GetEnrichRequestsByRequestServiceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetEnrichRequestsByRequestServiceIdQuery,
    GetEnrichRequestsByRequestServiceIdQueryVariables
  >(GetEnrichRequestsByRequestServiceIdDocument, options);
}
export type GetEnrichRequestsByRequestServiceIdQueryHookResult = ReturnType<
  typeof useGetEnrichRequestsByRequestServiceIdQuery
>;
export type GetEnrichRequestsByRequestServiceIdLazyQueryHookResult = ReturnType<
  typeof useGetEnrichRequestsByRequestServiceIdLazyQuery
>;
export type GetEnrichRequestsByRequestServiceIdQueryResult = Apollo.QueryResult<
  GetEnrichRequestsByRequestServiceIdQuery,
  GetEnrichRequestsByRequestServiceIdQueryVariables
>;
export const GetRequestAggregatesByContractIdDocument = gql`
  query getRequestAggregatesByContractId(
    $contractId: ID!
    $pagination: PaginationArg
    $sort: [String]
  ) {
    requestAggregates(
      filters: { requestService: { contract: { id: { eq: $contractId } } } }
      pagination: $pagination
      sort: $sort
    ) {
      data {
        id
        attributes {
          name
          order
          requests {
            data {
              id
            }
          }
        }
      }
      meta {
        pagination {
          total
          page
          pageSize
          pageCount
        }
      }
    }
  }
`;

/**
 * __useGetRequestAggregatesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetRequestAggregatesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRequestAggregatesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRequestAggregatesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetRequestAggregatesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRequestAggregatesByContractIdQuery,
    GetRequestAggregatesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRequestAggregatesByContractIdQuery,
    GetRequestAggregatesByContractIdQueryVariables
  >(GetRequestAggregatesByContractIdDocument, options);
}
export function useGetRequestAggregatesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRequestAggregatesByContractIdQuery,
    GetRequestAggregatesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRequestAggregatesByContractIdQuery,
    GetRequestAggregatesByContractIdQueryVariables
  >(GetRequestAggregatesByContractIdDocument, options);
}
export type GetRequestAggregatesByContractIdQueryHookResult = ReturnType<
  typeof useGetRequestAggregatesByContractIdQuery
>;
export type GetRequestAggregatesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetRequestAggregatesByContractIdLazyQuery
>;
export type GetRequestAggregatesByContractIdQueryResult = Apollo.QueryResult<
  GetRequestAggregatesByContractIdQuery,
  GetRequestAggregatesByContractIdQueryVariables
>;
export const GetRequestByIdDocument = gql`
  query getRequestById($requestId: ID) {
    request(id: $requestId) {
      data {
        id
        attributes {
          name
          description
          blockText
          isActivated
          requestService {
            data {
              id
            }
          }
          hasSeveralRequestTypes
          requestAggregate {
            data {
              id
              attributes {
                name
              }
            }
          }
          requestType {
            id
            title
            isEmail
            email
            isTSMS
          }
          hasAddress
          fieldAddressLabel
          addableBlocks {
            ... on ComponentBlocksAttachments {
              id
              attachmentLabel
              isMandatory
              multipleAttachments
            }
            ... on ComponentBlocksCommentary {
              id
              commentaryStatus
              commentaryLabel
              commentaryPlaceholder
            }
            ... on ComponentBlocksQuestions {
              id
              height
              questionTextLabel
              questionTextPlaceholder
              textStatus
            }
            ... on ComponentBlocksDateChoice {
              id
              fieldStatus
              fieldLabelDateChoice
            }
            ... on ComponentBlocksQcm {
              id
              fieldStatusQCM
              fieldLabelQCM
              responses
              multipleChoice
            }
            ... on ComponentBlocksCheckbox {
              id
              fieldStatusCheckbox
              labelCheckbox
            }
            ... on ComponentBlocksCumbersome {
              id
              cumbersomeLabel
              maxVolumeOfCumbersome
              maxNumberOfCumbersome
              isNumberAndVolume
              cumbersomeLimitMessage
            }
          }
          hasUser
          displayUserCivility
          isUserNameMandatory
          isUserEmailMandatory
          isUserPhoneMandatory
          userAllowSMSNotification
          confirmationMessage
          sendProofOfReceipt
          proofOfReceiptSubject
          proofOfReceiptHeader
          hasAppointmentSlots
          numberOfRequiredSlots
          hoursBeforeReservationIsActivated
          slotsReservationRules
          requestSlots {
            data {
              id
              attributes {
                slotType
                sectorizations {
                  data {
                    id
                    attributes {
                      name
                      description
                      polygonCoordinates
                    }
                  }
                }
                timeSlots
                slotsExceptions {
                  exceptionType
                  id
                  slotException
                }
                slotMessage
                noSlotMessage
                requestTakeds {
                  data {
                    id
                    attributes {
                      name
                      isActivated
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetRequestByIdQuery__
 *
 * To run a query within a React component, call `useGetRequestByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRequestByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRequestByIdQuery({
 *   variables: {
 *      requestId: // value for 'requestId'
 *   },
 * });
 */
export function useGetRequestByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetRequestByIdQuery,
    GetRequestByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetRequestByIdQuery, GetRequestByIdQueryVariables>(
    GetRequestByIdDocument,
    options,
  );
}
export function useGetRequestByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRequestByIdQuery,
    GetRequestByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetRequestByIdQuery, GetRequestByIdQueryVariables>(
    GetRequestByIdDocument,
    options,
  );
}
export type GetRequestByIdQueryHookResult = ReturnType<
  typeof useGetRequestByIdQuery
>;
export type GetRequestByIdLazyQueryHookResult = ReturnType<
  typeof useGetRequestByIdLazyQuery
>;
export type GetRequestByIdQueryResult = Apollo.QueryResult<
  GetRequestByIdQuery,
  GetRequestByIdQueryVariables
>;
export const GetRequestsByContractIdDocument = gql`
  query getRequestsByContractId(
    $contractId: ID!
    $pagination: PaginationArg
    $sort: [String]
  ) {
    requests(
      filters: { requestService: { contract: { id: { eq: $contractId } } } }
      pagination: $pagination
      sort: $sort
    ) {
      data {
        id
        attributes {
          requestType {
            email
            id
            title
            isEmail
            isTSMS
          }
          name
          isActivated
          hasSeveralRequestTypes
          updatedAt
          createdAt
        }
      }
      meta {
        pagination {
          page
          pageCount
          pageSize
          total
        }
      }
    }
  }
`;

/**
 * __useGetRequestsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetRequestsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRequestsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRequestsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetRequestsByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRequestsByContractIdQuery,
    GetRequestsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRequestsByContractIdQuery,
    GetRequestsByContractIdQueryVariables
  >(GetRequestsByContractIdDocument, options);
}
export function useGetRequestsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRequestsByContractIdQuery,
    GetRequestsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRequestsByContractIdQuery,
    GetRequestsByContractIdQueryVariables
  >(GetRequestsByContractIdDocument, options);
}
export type GetRequestsByContractIdQueryHookResult = ReturnType<
  typeof useGetRequestsByContractIdQuery
>;
export type GetRequestsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetRequestsByContractIdLazyQuery
>;
export type GetRequestsByContractIdQueryResult = Apollo.QueryResult<
  GetRequestsByContractIdQuery,
  GetRequestsByContractIdQueryVariables
>;
export const CreateRequestSlotDocument = gql`
  mutation createRequestSlot($data: RequestSlotInput!) {
    createRequestSlot(data: $data) {
      data {
        id
        attributes {
          slotType
          sectorizations {
            data {
              id
            }
          }
          timeSlots
          slotsExceptions {
            id
            slotException
            exceptionType
          }
          slotMessage
          noSlotMessage
          createdAt
          updatedAt
        }
      }
    }
  }
`;
export type CreateRequestSlotMutationFn = Apollo.MutationFunction<
  CreateRequestSlotMutation,
  CreateRequestSlotMutationVariables
>;

/**
 * __useCreateRequestSlotMutation__
 *
 * To run a mutation, you first call `useCreateRequestSlotMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateRequestSlotMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createRequestSlotMutation, { data, loading, error }] = useCreateRequestSlotMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateRequestSlotMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateRequestSlotMutation,
    CreateRequestSlotMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateRequestSlotMutation,
    CreateRequestSlotMutationVariables
  >(CreateRequestSlotDocument, options);
}
export type CreateRequestSlotMutationHookResult = ReturnType<
  typeof useCreateRequestSlotMutation
>;
export type CreateRequestSlotMutationResult =
  Apollo.MutationResult<CreateRequestSlotMutation>;
export type CreateRequestSlotMutationOptions = Apollo.BaseMutationOptions<
  CreateRequestSlotMutation,
  CreateRequestSlotMutationVariables
>;
export const DeleteRequestSlotByIdDocument = gql`
  mutation deleteRequestSlotById($id: ID!) {
    deleteRequestSlot(id: $id) {
      data {
        id
      }
    }
  }
`;
export type DeleteRequestSlotByIdMutationFn = Apollo.MutationFunction<
  DeleteRequestSlotByIdMutation,
  DeleteRequestSlotByIdMutationVariables
>;

/**
 * __useDeleteRequestSlotByIdMutation__
 *
 * To run a mutation, you first call `useDeleteRequestSlotByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteRequestSlotByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteRequestSlotByIdMutation, { data, loading, error }] = useDeleteRequestSlotByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteRequestSlotByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteRequestSlotByIdMutation,
    DeleteRequestSlotByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeleteRequestSlotByIdMutation,
    DeleteRequestSlotByIdMutationVariables
  >(DeleteRequestSlotByIdDocument, options);
}
export type DeleteRequestSlotByIdMutationHookResult = ReturnType<
  typeof useDeleteRequestSlotByIdMutation
>;
export type DeleteRequestSlotByIdMutationResult =
  Apollo.MutationResult<DeleteRequestSlotByIdMutation>;
export type DeleteRequestSlotByIdMutationOptions = Apollo.BaseMutationOptions<
  DeleteRequestSlotByIdMutation,
  DeleteRequestSlotByIdMutationVariables
>;
export const UpdateRequestSlotByIdDocument = gql`
  mutation updateRequestSlotById($id: ID!, $data: RequestSlotInput!) {
    updateRequestSlot(id: $id, data: $data) {
      data {
        id
        attributes {
          slotType
          sectorizations {
            data {
              id
            }
          }
          timeSlots
          slotsExceptions {
            id
            slotException
            exceptionType
          }
          slotMessage
          noSlotMessage
          createdAt
          updatedAt
        }
      }
    }
  }
`;
export type UpdateRequestSlotByIdMutationFn = Apollo.MutationFunction<
  UpdateRequestSlotByIdMutation,
  UpdateRequestSlotByIdMutationVariables
>;

/**
 * __useUpdateRequestSlotByIdMutation__
 *
 * To run a mutation, you first call `useUpdateRequestSlotByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateRequestSlotByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateRequestSlotByIdMutation, { data, loading, error }] = useUpdateRequestSlotByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateRequestSlotByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateRequestSlotByIdMutation,
    UpdateRequestSlotByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateRequestSlotByIdMutation,
    UpdateRequestSlotByIdMutationVariables
  >(UpdateRequestSlotByIdDocument, options);
}
export type UpdateRequestSlotByIdMutationHookResult = ReturnType<
  typeof useUpdateRequestSlotByIdMutation
>;
export type UpdateRequestSlotByIdMutationResult =
  Apollo.MutationResult<UpdateRequestSlotByIdMutation>;
export type UpdateRequestSlotByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateRequestSlotByIdMutation,
  UpdateRequestSlotByIdMutationVariables
>;
export const UpdateRequestAggregateByIdDocument = gql`
  mutation updateRequestAggregateById(
    $updateRequestAggregateId: ID!
    $data: RequestAggregateInput!
  ) {
    updateRequestAggregate(id: $updateRequestAggregateId, data: $data) {
      data {
        id
        attributes {
          name
        }
      }
    }
  }
`;
export type UpdateRequestAggregateByIdMutationFn = Apollo.MutationFunction<
  UpdateRequestAggregateByIdMutation,
  UpdateRequestAggregateByIdMutationVariables
>;

/**
 * __useUpdateRequestAggregateByIdMutation__
 *
 * To run a mutation, you first call `useUpdateRequestAggregateByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateRequestAggregateByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateRequestAggregateByIdMutation, { data, loading, error }] = useUpdateRequestAggregateByIdMutation({
 *   variables: {
 *      updateRequestAggregateId: // value for 'updateRequestAggregateId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateRequestAggregateByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateRequestAggregateByIdMutation,
    UpdateRequestAggregateByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateRequestAggregateByIdMutation,
    UpdateRequestAggregateByIdMutationVariables
  >(UpdateRequestAggregateByIdDocument, options);
}
export type UpdateRequestAggregateByIdMutationHookResult = ReturnType<
  typeof useUpdateRequestAggregateByIdMutation
>;
export type UpdateRequestAggregateByIdMutationResult =
  Apollo.MutationResult<UpdateRequestAggregateByIdMutation>;
export type UpdateRequestAggregateByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateRequestAggregateByIdMutation,
    UpdateRequestAggregateByIdMutationVariables
  >;
export const UpdateRequestAggregateOrderDocument = gql`
  mutation updateRequestAggregateOrder($requestAggregateOrder: [ID]!) {
    updateRequestAggregateOrder(requestAggregateOrder: $requestAggregateOrder) {
      oid
    }
  }
`;
export type UpdateRequestAggregateOrderMutationFn = Apollo.MutationFunction<
  UpdateRequestAggregateOrderMutation,
  UpdateRequestAggregateOrderMutationVariables
>;

/**
 * __useUpdateRequestAggregateOrderMutation__
 *
 * To run a mutation, you first call `useUpdateRequestAggregateOrderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateRequestAggregateOrderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateRequestAggregateOrderMutation, { data, loading, error }] = useUpdateRequestAggregateOrderMutation({
 *   variables: {
 *      requestAggregateOrder: // value for 'requestAggregateOrder'
 *   },
 * });
 */
export function useUpdateRequestAggregateOrderMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateRequestAggregateOrderMutation,
    UpdateRequestAggregateOrderMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateRequestAggregateOrderMutation,
    UpdateRequestAggregateOrderMutationVariables
  >(UpdateRequestAggregateOrderDocument, options);
}
export type UpdateRequestAggregateOrderMutationHookResult = ReturnType<
  typeof useUpdateRequestAggregateOrderMutation
>;
export type UpdateRequestAggregateOrderMutationResult =
  Apollo.MutationResult<UpdateRequestAggregateOrderMutation>;
export type UpdateRequestAggregateOrderMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateRequestAggregateOrderMutation,
    UpdateRequestAggregateOrderMutationVariables
  >;
export const UpdateRequestByIdDocument = gql`
  mutation updateRequestById($updateRequestId: ID!, $data: RequestInput!) {
    updateRequest(id: $updateRequestId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateRequestByIdMutationFn = Apollo.MutationFunction<
  UpdateRequestByIdMutation,
  UpdateRequestByIdMutationVariables
>;

/**
 * __useUpdateRequestByIdMutation__
 *
 * To run a mutation, you first call `useUpdateRequestByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateRequestByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateRequestByIdMutation, { data, loading, error }] = useUpdateRequestByIdMutation({
 *   variables: {
 *      updateRequestId: // value for 'updateRequestId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateRequestByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateRequestByIdMutation,
    UpdateRequestByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateRequestByIdMutation,
    UpdateRequestByIdMutationVariables
  >(UpdateRequestByIdDocument, options);
}
export type UpdateRequestByIdMutationHookResult = ReturnType<
  typeof useUpdateRequestByIdMutation
>;
export type UpdateRequestByIdMutationResult =
  Apollo.MutationResult<UpdateRequestByIdMutation>;
export type UpdateRequestByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateRequestByIdMutation,
  UpdateRequestByIdMutationVariables
>;
export const GetWasteFamiliesByContractIdDocument = gql`
  query getWasteFamiliesByContractId($contractId: ID, $sort: [String]) {
    recyclingGuideService(id: $contractId) {
      data {
        id
        attributes {
          wasteFamilies(sort: $sort) {
            data {
              id
              attributes {
                familyName
                isSystem
                wasteForms {
                  data {
                    id
                    attributes {
                      name
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetWasteFamiliesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetWasteFamiliesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWasteFamiliesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWasteFamiliesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetWasteFamiliesByContractIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetWasteFamiliesByContractIdQuery,
    GetWasteFamiliesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetWasteFamiliesByContractIdQuery,
    GetWasteFamiliesByContractIdQueryVariables
  >(GetWasteFamiliesByContractIdDocument, options);
}
export function useGetWasteFamiliesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetWasteFamiliesByContractIdQuery,
    GetWasteFamiliesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetWasteFamiliesByContractIdQuery,
    GetWasteFamiliesByContractIdQueryVariables
  >(GetWasteFamiliesByContractIdDocument, options);
}
export type GetWasteFamiliesByContractIdQueryHookResult = ReturnType<
  typeof useGetWasteFamiliesByContractIdQuery
>;
export type GetWasteFamiliesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetWasteFamiliesByContractIdLazyQuery
>;
export type GetWasteFamiliesByContractIdQueryResult = Apollo.QueryResult<
  GetWasteFamiliesByContractIdQuery,
  GetWasteFamiliesByContractIdQueryVariables
>;
export const UpdateWasteFamilyByIdDocument = gql`
  mutation updateWasteFamilyById(
    $updateWasteFamilyId: ID!
    $data: WasteFamilyInput!
  ) {
    updateWasteFamily(id: $updateWasteFamilyId, data: $data) {
      data {
        id
        attributes {
          familyName
          createdAt
          updatedAt
          isSystem
        }
      }
    }
  }
`;
export type UpdateWasteFamilyByIdMutationFn = Apollo.MutationFunction<
  UpdateWasteFamilyByIdMutation,
  UpdateWasteFamilyByIdMutationVariables
>;

/**
 * __useUpdateWasteFamilyByIdMutation__
 *
 * To run a mutation, you first call `useUpdateWasteFamilyByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWasteFamilyByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWasteFamilyByIdMutation, { data, loading, error }] = useUpdateWasteFamilyByIdMutation({
 *   variables: {
 *      updateWasteFamilyId: // value for 'updateWasteFamilyId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateWasteFamilyByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateWasteFamilyByIdMutation,
    UpdateWasteFamilyByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateWasteFamilyByIdMutation,
    UpdateWasteFamilyByIdMutationVariables
  >(UpdateWasteFamilyByIdDocument, options);
}
export type UpdateWasteFamilyByIdMutationHookResult = ReturnType<
  typeof useUpdateWasteFamilyByIdMutation
>;
export type UpdateWasteFamilyByIdMutationResult =
  Apollo.MutationResult<UpdateWasteFamilyByIdMutation>;
export type UpdateWasteFamilyByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateWasteFamilyByIdMutation,
  UpdateWasteFamilyByIdMutationVariables
>;
export const GetActiveFlowsByContractIdDocument = gql`
  query getActiveFlowsByContractId($contractId: ID!) {
    flows(
      filters: {
        isActivated: { eq: true }
        contract: { id: { eq: $contractId } }
      }
      sort: "name:asc"
    ) {
      data {
        id
        attributes {
          name
          recyclingGesture
        }
      }
    }
  }
`;

/**
 * __useGetActiveFlowsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetActiveFlowsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetActiveFlowsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetActiveFlowsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetActiveFlowsByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetActiveFlowsByContractIdQuery,
    GetActiveFlowsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetActiveFlowsByContractIdQuery,
    GetActiveFlowsByContractIdQueryVariables
  >(GetActiveFlowsByContractIdDocument, options);
}
export function useGetActiveFlowsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetActiveFlowsByContractIdQuery,
    GetActiveFlowsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetActiveFlowsByContractIdQuery,
    GetActiveFlowsByContractIdQueryVariables
  >(GetActiveFlowsByContractIdDocument, options);
}
export type GetActiveFlowsByContractIdQueryHookResult = ReturnType<
  typeof useGetActiveFlowsByContractIdQuery
>;
export type GetActiveFlowsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetActiveFlowsByContractIdLazyQuery
>;
export type GetActiveFlowsByContractIdQueryResult = Apollo.QueryResult<
  GetActiveFlowsByContractIdQuery,
  GetActiveFlowsByContractIdQueryVariables
>;
export const GetAllVersionsOfWasteFormByCustomIdDocument = gql`
  query getAllVersionsOfWasteFormByCustomId(
    $contractId: ID!
    $customId: String
    $statusFilter: StringFilterInput
    $sort: [String]
    $pagination: PaginationArg
  ) {
    wasteFormsCount: wasteForms(
      filters: {
        recyclingGuideService: { contract: { id: { eq: $contractId } } }
        customId: { eq: $customId }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    wasteFormsCountDraft: wasteForms(
      filters: {
        recyclingGuideService: { contract: { id: { eq: $contractId } } }
        customId: { eq: $customId }
        status: { eq: "draft" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    wasteFormsCountPublished: wasteForms(
      filters: {
        recyclingGuideService: { contract: { id: { eq: $contractId } } }
        customId: { eq: $customId }
        status: { eq: "published" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    wasteFormsCountArchived: wasteForms(
      filters: {
        recyclingGuideService: { contract: { id: { eq: $contractId } } }
        customId: { eq: $customId }
        status: { eq: "archived" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    wasteForms(
      filters: {
        recyclingGuideService: { contract: { id: { eq: $contractId } } }
        customId: { eq: $customId }
        status: $statusFilter
      }
      sort: $sort
      pagination: $pagination
    ) {
      meta {
        pagination {
          page
          pageSize
          pageCount
          total
        }
      }
      data {
        id
        attributes {
          versionNumber
          status
          publishedDate
          updatedAt
        }
      }
    }
  }
`;

/**
 * __useGetAllVersionsOfWasteFormByCustomIdQuery__
 *
 * To run a query within a React component, call `useGetAllVersionsOfWasteFormByCustomIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllVersionsOfWasteFormByCustomIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllVersionsOfWasteFormByCustomIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      customId: // value for 'customId'
 *      statusFilter: // value for 'statusFilter'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useGetAllVersionsOfWasteFormByCustomIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAllVersionsOfWasteFormByCustomIdQuery,
    GetAllVersionsOfWasteFormByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAllVersionsOfWasteFormByCustomIdQuery,
    GetAllVersionsOfWasteFormByCustomIdQueryVariables
  >(GetAllVersionsOfWasteFormByCustomIdDocument, options);
}
export function useGetAllVersionsOfWasteFormByCustomIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAllVersionsOfWasteFormByCustomIdQuery,
    GetAllVersionsOfWasteFormByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAllVersionsOfWasteFormByCustomIdQuery,
    GetAllVersionsOfWasteFormByCustomIdQueryVariables
  >(GetAllVersionsOfWasteFormByCustomIdDocument, options);
}
export type GetAllVersionsOfWasteFormByCustomIdQueryHookResult = ReturnType<
  typeof useGetAllVersionsOfWasteFormByCustomIdQuery
>;
export type GetAllVersionsOfWasteFormByCustomIdLazyQueryHookResult = ReturnType<
  typeof useGetAllVersionsOfWasteFormByCustomIdLazyQuery
>;
export type GetAllVersionsOfWasteFormByCustomIdQueryResult = Apollo.QueryResult<
  GetAllVersionsOfWasteFormByCustomIdQuery,
  GetAllVersionsOfWasteFormByCustomIdQueryVariables
>;
export const GetWasteFormByIdDocument = gql`
  query getWasteFormById($wasteFormId: ID) {
    wasteForm(id: $wasteFormId) {
      data {
        id
        attributes {
          customId
          name
          updatedAt
          status
          createdAt
          publishedDate
          unpublishedDate
          versionNumber
          tags {
            data {
              id
              attributes {
                name
              }
            }
          }
          draftCreationId
          flow {
            data {
              id
              attributes {
                name
                recyclingGesture
              }
            }
          }
          isHidden
          picto {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                createdAt
                ext
                width
                height
              }
            }
          }
          recyclingGestureText
          wasteFamily {
            data {
              id
              attributes {
                familyName
                isSystem
                createdAt
                updatedAt
              }
            }
          }
          audiences {
            data {
              id
              attributes {
                type
                isActive
              }
            }
          }
          contentBlock {
            ... on ComponentBlocksImage {
              id
              picture {
                data {
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                  id
                }
              }
              altText
              isDecorative
            }
            ... on ComponentBlocksFile {
              id
              document {
                data {
                  id
                  attributes {
                    hash
                    mime
                    name
                    provider
                    size
                    url
                    alternativeText
                    createdAt
                    ext
                    width
                    height
                  }
                }
              }
            }
            ... on ComponentBlocksWysiwyg {
              id
              textEditor
            }
            ... on ComponentBlocksVideo {
              id
              transcriptText
              videoLink
            }
            ... on ComponentBlocksSubHeading {
              id
              subHeadingTag
              subHeadingText
            }
            ... on ComponentBlocksHorizontalRule {
              hr
              id
            }
            ... on ComponentBlocksServices {
              id
              serviceLinksData
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetWasteFormByIdQuery__
 *
 * To run a query within a React component, call `useGetWasteFormByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWasteFormByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWasteFormByIdQuery({
 *   variables: {
 *      wasteFormId: // value for 'wasteFormId'
 *   },
 * });
 */
export function useGetWasteFormByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetWasteFormByIdQuery,
    GetWasteFormByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetWasteFormByIdQuery, GetWasteFormByIdQueryVariables>(
    GetWasteFormByIdDocument,
    options,
  );
}
export function useGetWasteFormByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetWasteFormByIdQuery,
    GetWasteFormByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetWasteFormByIdQuery,
    GetWasteFormByIdQueryVariables
  >(GetWasteFormByIdDocument, options);
}
export type GetWasteFormByIdQueryHookResult = ReturnType<
  typeof useGetWasteFormByIdQuery
>;
export type GetWasteFormByIdLazyQueryHookResult = ReturnType<
  typeof useGetWasteFormByIdLazyQuery
>;
export type GetWasteFormByIdQueryResult = Apollo.QueryResult<
  GetWasteFormByIdQuery,
  GetWasteFormByIdQueryVariables
>;
export const GetWasteFormsByContractIdDocument = gql`
  query getWasteFormsByContractId(
    $contractId: ID
    $statusFilter: String
    $flowId: ID
    $name: String
    $sort: [String]
    $pagination: PaginationArg
  ) {
    wasteFormsCount: wasteForms(
      filters: {
        recyclingGuideService: { contract: { id: { eq: $contractId } } }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    wasteFormsDraftCount: wasteForms(
      filters: {
        recyclingGuideService: { contract: { id: { eq: $contractId } } }
        status: { eq: "draft" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    wasteFormsPublishedCount: wasteForms(
      filters: {
        recyclingGuideService: { contract: { id: { eq: $contractId } } }
        status: { eq: "published" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    wasteFormsArchivedCount: wasteForms(
      filters: {
        recyclingGuideService: { contract: { id: { eq: $contractId } } }
        status: { eq: "archived" }
      }
    ) {
      meta {
        pagination {
          total
        }
      }
    }
    wasteForms(
      filters: {
        recyclingGuideService: { contract: { id: { eq: $contractId } } }
        status: { eq: $statusFilter }
        flow: { id: { eq: $flowId } }
        name: { contains: $name }
      }
      sort: $sort
      pagination: $pagination
    ) {
      meta {
        pagination {
          page
          pageSize
          pageCount
          total
        }
      }
      data {
        id
        attributes {
          name
          status
          updatedAt
          isHidden
        }
      }
    }
  }
`;

/**
 * __useGetWasteFormsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetWasteFormsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWasteFormsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWasteFormsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      statusFilter: // value for 'statusFilter'
 *      flowId: // value for 'flowId'
 *      name: // value for 'name'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useGetWasteFormsByContractIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetWasteFormsByContractIdQuery,
    GetWasteFormsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetWasteFormsByContractIdQuery,
    GetWasteFormsByContractIdQueryVariables
  >(GetWasteFormsByContractIdDocument, options);
}
export function useGetWasteFormsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetWasteFormsByContractIdQuery,
    GetWasteFormsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetWasteFormsByContractIdQuery,
    GetWasteFormsByContractIdQueryVariables
  >(GetWasteFormsByContractIdDocument, options);
}
export type GetWasteFormsByContractIdQueryHookResult = ReturnType<
  typeof useGetWasteFormsByContractIdQuery
>;
export type GetWasteFormsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetWasteFormsByContractIdLazyQuery
>;
export type GetWasteFormsByContractIdQueryResult = Apollo.QueryResult<
  GetWasteFormsByContractIdQuery,
  GetWasteFormsByContractIdQueryVariables
>;
export const GetWasteFormsDraftByCustomIdDocument = gql`
  query getWasteFormsDraftByCustomId($customId: String!) {
    wasteForms(
      filters: { customId: { eq: $customId }, status: { eq: "draft" } }
    ) {
      data {
        id
      }
    }
  }
`;

/**
 * __useGetWasteFormsDraftByCustomIdQuery__
 *
 * To run a query within a React component, call `useGetWasteFormsDraftByCustomIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWasteFormsDraftByCustomIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWasteFormsDraftByCustomIdQuery({
 *   variables: {
 *      customId: // value for 'customId'
 *   },
 * });
 */
export function useGetWasteFormsDraftByCustomIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetWasteFormsDraftByCustomIdQuery,
    GetWasteFormsDraftByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetWasteFormsDraftByCustomIdQuery,
    GetWasteFormsDraftByCustomIdQueryVariables
  >(GetWasteFormsDraftByCustomIdDocument, options);
}
export function useGetWasteFormsDraftByCustomIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetWasteFormsDraftByCustomIdQuery,
    GetWasteFormsDraftByCustomIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetWasteFormsDraftByCustomIdQuery,
    GetWasteFormsDraftByCustomIdQueryVariables
  >(GetWasteFormsDraftByCustomIdDocument, options);
}
export type GetWasteFormsDraftByCustomIdQueryHookResult = ReturnType<
  typeof useGetWasteFormsDraftByCustomIdQuery
>;
export type GetWasteFormsDraftByCustomIdLazyQueryHookResult = ReturnType<
  typeof useGetWasteFormsDraftByCustomIdLazyQuery
>;
export type GetWasteFormsDraftByCustomIdQueryResult = Apollo.QueryResult<
  GetWasteFormsDraftByCustomIdQuery,
  GetWasteFormsDraftByCustomIdQueryVariables
>;
export const UpdateWasteFormByIdDocument = gql`
  mutation updateWasteFormById(
    $updateWasteFormId: ID!
    $data: WasteFormInput!
  ) {
    versioningHandler(
      data: { id: $updateWasteFormId, data: $data }
      entity: "wasteForm"
    ) {
      data {
        ... on WasteFormEntity {
          id
          attributes {
            customId
            isHidden
            audiences {
              data {
                id
              }
            }
          }
        }
      }
    }
  }
`;
export type UpdateWasteFormByIdMutationFn = Apollo.MutationFunction<
  UpdateWasteFormByIdMutation,
  UpdateWasteFormByIdMutationVariables
>;

/**
 * __useUpdateWasteFormByIdMutation__
 *
 * To run a mutation, you first call `useUpdateWasteFormByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWasteFormByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWasteFormByIdMutation, { data, loading, error }] = useUpdateWasteFormByIdMutation({
 *   variables: {
 *      updateWasteFormId: // value for 'updateWasteFormId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateWasteFormByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateWasteFormByIdMutation,
    UpdateWasteFormByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateWasteFormByIdMutation,
    UpdateWasteFormByIdMutationVariables
  >(UpdateWasteFormByIdDocument, options);
}
export type UpdateWasteFormByIdMutationHookResult = ReturnType<
  typeof useUpdateWasteFormByIdMutation
>;
export type UpdateWasteFormByIdMutationResult =
  Apollo.MutationResult<UpdateWasteFormByIdMutation>;
export type UpdateWasteFormByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateWasteFormByIdMutation,
  UpdateWasteFormByIdMutationVariables
>;
export const GetRecyclingGuideServiceByIdDocument = gql`
  query getRecyclingGuideServiceById($recyclingGuideServiceId: ID) {
    recyclingGuideService(id: $recyclingGuideServiceId) {
      data {
        id
        attributes {
          orderExtension
          memoName
          memoDesc
          memoFile {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                ext
                height
                width
                createdAt
              }
            }
          }
          memoPreview {
            data {
              id
              attributes {
                hash
                mime
                name
                provider
                size
                url
                alternativeText
                ext
                height
                width
                createdAt
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetRecyclingGuideServiceByIdQuery__
 *
 * To run a query within a React component, call `useGetRecyclingGuideServiceByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecyclingGuideServiceByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecyclingGuideServiceByIdQuery({
 *   variables: {
 *      recyclingGuideServiceId: // value for 'recyclingGuideServiceId'
 *   },
 * });
 */
export function useGetRecyclingGuideServiceByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetRecyclingGuideServiceByIdQuery,
    GetRecyclingGuideServiceByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRecyclingGuideServiceByIdQuery,
    GetRecyclingGuideServiceByIdQueryVariables
  >(GetRecyclingGuideServiceByIdDocument, options);
}
export function useGetRecyclingGuideServiceByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecyclingGuideServiceByIdQuery,
    GetRecyclingGuideServiceByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRecyclingGuideServiceByIdQuery,
    GetRecyclingGuideServiceByIdQueryVariables
  >(GetRecyclingGuideServiceByIdDocument, options);
}
export type GetRecyclingGuideServiceByIdQueryHookResult = ReturnType<
  typeof useGetRecyclingGuideServiceByIdQuery
>;
export type GetRecyclingGuideServiceByIdLazyQueryHookResult = ReturnType<
  typeof useGetRecyclingGuideServiceByIdLazyQuery
>;
export type GetRecyclingGuideServiceByIdQueryResult = Apollo.QueryResult<
  GetRecyclingGuideServiceByIdQuery,
  GetRecyclingGuideServiceByIdQueryVariables
>;
export const GetRecyclingGuideServicesByContractIdDocument = gql`
  query getRecyclingGuideServicesByContractId($contractId: ID!) {
    recyclingGuideServices(filters: { contract: { id: { eq: $contractId } } }) {
      data {
        id
        attributes {
          name
          endDate
          memoName
          memoDesc
          isActivated
          orderExtension
          wasteFamilies {
            data {
              id
              attributes {
                createdAt
                familyName
                isSystem
                updatedAt
                wasteForms {
                  data {
                    id
                    attributes {
                      name
                    }
                  }
                }
              }
            }
          }
          memoFile {
            data {
              id
              attributes {
                name
                hash
                mime
                size
                url
                provider
              }
            }
          }
          memoPreview {
            data {
              id
              attributes {
                name
                hash
                mime
                size
                url
                provider
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetRecyclingGuideServicesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetRecyclingGuideServicesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecyclingGuideServicesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecyclingGuideServicesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetRecyclingGuideServicesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetRecyclingGuideServicesByContractIdQuery,
    GetRecyclingGuideServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetRecyclingGuideServicesByContractIdQuery,
    GetRecyclingGuideServicesByContractIdQueryVariables
  >(GetRecyclingGuideServicesByContractIdDocument, options);
}
export function useGetRecyclingGuideServicesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetRecyclingGuideServicesByContractIdQuery,
    GetRecyclingGuideServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetRecyclingGuideServicesByContractIdQuery,
    GetRecyclingGuideServicesByContractIdQueryVariables
  >(GetRecyclingGuideServicesByContractIdDocument, options);
}
export type GetRecyclingGuideServicesByContractIdQueryHookResult = ReturnType<
  typeof useGetRecyclingGuideServicesByContractIdQuery
>;
export type GetRecyclingGuideServicesByContractIdLazyQueryHookResult =
  ReturnType<typeof useGetRecyclingGuideServicesByContractIdLazyQuery>;
export type GetRecyclingGuideServicesByContractIdQueryResult =
  Apollo.QueryResult<
    GetRecyclingGuideServicesByContractIdQuery,
    GetRecyclingGuideServicesByContractIdQueryVariables
  >;
export const CreateInformationMessageDocument = gql`
  mutation createInformationMessage($data: InformationMessageInput!) {
    createInformationMessage(data: $data) {
      data {
        id
        attributes {
          dateStart
          infoMessage
          dateEnd
          pickUpDays {
            data {
              id
            }
          }
        }
      }
    }
  }
`;
export type CreateInformationMessageMutationFn = Apollo.MutationFunction<
  CreateInformationMessageMutation,
  CreateInformationMessageMutationVariables
>;

/**
 * __useCreateInformationMessageMutation__
 *
 * To run a mutation, you first call `useCreateInformationMessageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateInformationMessageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createInformationMessageMutation, { data, loading, error }] = useCreateInformationMessageMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateInformationMessageMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateInformationMessageMutation,
    CreateInformationMessageMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateInformationMessageMutation,
    CreateInformationMessageMutationVariables
  >(CreateInformationMessageDocument, options);
}
export type CreateInformationMessageMutationHookResult = ReturnType<
  typeof useCreateInformationMessageMutation
>;
export type CreateInformationMessageMutationResult =
  Apollo.MutationResult<CreateInformationMessageMutation>;
export type CreateInformationMessageMutationOptions =
  Apollo.BaseMutationOptions<
    CreateInformationMessageMutation,
    CreateInformationMessageMutationVariables
  >;
export const CreatePickUpDayDocument = gql`
  mutation createPickUpDay($data: PickUpDayInput!) {
    createPickUpDay(data: $data) {
      data {
        id
        attributes {
          name
          description
          periodicity
          advancedSelection
          pickUpHours
          includeHoliday
          complementaryMention
          createdAt
          updatedAt
          buttonLabel
          externalLink
          request {
            data {
              id
            }
          }
          flow {
            data {
              id
              attributes {
                name
              }
            }
          }
          pickUpDayService {
            data {
              id
              attributes {
                name
              }
            }
          }
          sectorizations {
            data {
              id
              attributes {
                name
                description
                polygonCoordinates
              }
            }
          }
          audiences {
            data {
              id
            }
          }
        }
      }
    }
  }
`;
export type CreatePickUpDayMutationFn = Apollo.MutationFunction<
  CreatePickUpDayMutation,
  CreatePickUpDayMutationVariables
>;

/**
 * __useCreatePickUpDayMutation__
 *
 * To run a mutation, you first call `useCreatePickUpDayMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePickUpDayMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPickUpDayMutation, { data, loading, error }] = useCreatePickUpDayMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreatePickUpDayMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreatePickUpDayMutation,
    CreatePickUpDayMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreatePickUpDayMutation,
    CreatePickUpDayMutationVariables
  >(CreatePickUpDayDocument, options);
}
export type CreatePickUpDayMutationHookResult = ReturnType<
  typeof useCreatePickUpDayMutation
>;
export type CreatePickUpDayMutationResult =
  Apollo.MutationResult<CreatePickUpDayMutation>;
export type CreatePickUpDayMutationOptions = Apollo.BaseMutationOptions<
  CreatePickUpDayMutation,
  CreatePickUpDayMutationVariables
>;
export const DeletePickUpDayByIdDocument = gql`
  mutation deletePickUpDayById($deletePickUpDayId: ID!) {
    deletePickUpDay(id: $deletePickUpDayId) {
      data {
        id
      }
    }
  }
`;
export type DeletePickUpDayByIdMutationFn = Apollo.MutationFunction<
  DeletePickUpDayByIdMutation,
  DeletePickUpDayByIdMutationVariables
>;

/**
 * __useDeletePickUpDayByIdMutation__
 *
 * To run a mutation, you first call `useDeletePickUpDayByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePickUpDayByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePickUpDayByIdMutation, { data, loading, error }] = useDeletePickUpDayByIdMutation({
 *   variables: {
 *      deletePickUpDayId: // value for 'deletePickUpDayId'
 *   },
 * });
 */
export function useDeletePickUpDayByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeletePickUpDayByIdMutation,
    DeletePickUpDayByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    DeletePickUpDayByIdMutation,
    DeletePickUpDayByIdMutationVariables
  >(DeletePickUpDayByIdDocument, options);
}
export type DeletePickUpDayByIdMutationHookResult = ReturnType<
  typeof useDeletePickUpDayByIdMutation
>;
export type DeletePickUpDayByIdMutationResult =
  Apollo.MutationResult<DeletePickUpDayByIdMutation>;
export type DeletePickUpDayByIdMutationOptions = Apollo.BaseMutationOptions<
  DeletePickUpDayByIdMutation,
  DeletePickUpDayByIdMutationVariables
>;
export const GetActiveRequestsByContractIdDocument = gql`
  query getActiveRequestsByContractId($contractId: ID!) {
    requests(
      filters: {
        requestService: { contract: { id: { eq: $contractId } } }
        isActivated: { eq: true }
      }
    ) {
      data {
        id
        attributes {
          name
          isActivated
          hasSeveralRequestTypes
          hasAddress
          hasUser
        }
      }
    }
  }
`;

/**
 * __useGetActiveRequestsByContractIdQuery__
 *
 * To run a query within a React component, call `useGetActiveRequestsByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetActiveRequestsByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetActiveRequestsByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetActiveRequestsByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetActiveRequestsByContractIdQuery,
    GetActiveRequestsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetActiveRequestsByContractIdQuery,
    GetActiveRequestsByContractIdQueryVariables
  >(GetActiveRequestsByContractIdDocument, options);
}
export function useGetActiveRequestsByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetActiveRequestsByContractIdQuery,
    GetActiveRequestsByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetActiveRequestsByContractIdQuery,
    GetActiveRequestsByContractIdQueryVariables
  >(GetActiveRequestsByContractIdDocument, options);
}
export type GetActiveRequestsByContractIdQueryHookResult = ReturnType<
  typeof useGetActiveRequestsByContractIdQuery
>;
export type GetActiveRequestsByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetActiveRequestsByContractIdLazyQuery
>;
export type GetActiveRequestsByContractIdQueryResult = Apollo.QueryResult<
  GetActiveRequestsByContractIdQuery,
  GetActiveRequestsByContractIdQueryVariables
>;
export const GetCollectDoorToDoorsByFlowIdDocument = gql`
  query getCollectDoorToDoorsByFlowId($flowId: ID) {
    collectDoorToDoors(filters: { flows: { id: { eq: $flowId } } }) {
      data {
        id
        attributes {
          name
        }
      }
    }
  }
`;

/**
 * __useGetCollectDoorToDoorsByFlowIdQuery__
 *
 * To run a query within a React component, call `useGetCollectDoorToDoorsByFlowIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCollectDoorToDoorsByFlowIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCollectDoorToDoorsByFlowIdQuery({
 *   variables: {
 *      flowId: // value for 'flowId'
 *   },
 * });
 */
export function useGetCollectDoorToDoorsByFlowIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetCollectDoorToDoorsByFlowIdQuery,
    GetCollectDoorToDoorsByFlowIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetCollectDoorToDoorsByFlowIdQuery,
    GetCollectDoorToDoorsByFlowIdQueryVariables
  >(GetCollectDoorToDoorsByFlowIdDocument, options);
}
export function useGetCollectDoorToDoorsByFlowIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCollectDoorToDoorsByFlowIdQuery,
    GetCollectDoorToDoorsByFlowIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetCollectDoorToDoorsByFlowIdQuery,
    GetCollectDoorToDoorsByFlowIdQueryVariables
  >(GetCollectDoorToDoorsByFlowIdDocument, options);
}
export type GetCollectDoorToDoorsByFlowIdQueryHookResult = ReturnType<
  typeof useGetCollectDoorToDoorsByFlowIdQuery
>;
export type GetCollectDoorToDoorsByFlowIdLazyQueryHookResult = ReturnType<
  typeof useGetCollectDoorToDoorsByFlowIdLazyQuery
>;
export type GetCollectDoorToDoorsByFlowIdQueryResult = Apollo.QueryResult<
  GetCollectDoorToDoorsByFlowIdQuery,
  GetCollectDoorToDoorsByFlowIdQueryVariables
>;
export const GetCollectVoluntariesByFlowIdDocument = gql`
  query getCollectVoluntariesByFlowId($flowId: ID) {
    collectVoluntaries(filters: { flows: { id: { eq: $flowId } } }) {
      data {
        id
        attributes {
          name
        }
      }
    }
  }
`;

/**
 * __useGetCollectVoluntariesByFlowIdQuery__
 *
 * To run a query within a React component, call `useGetCollectVoluntariesByFlowIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCollectVoluntariesByFlowIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCollectVoluntariesByFlowIdQuery({
 *   variables: {
 *      flowId: // value for 'flowId'
 *   },
 * });
 */
export function useGetCollectVoluntariesByFlowIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetCollectVoluntariesByFlowIdQuery,
    GetCollectVoluntariesByFlowIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetCollectVoluntariesByFlowIdQuery,
    GetCollectVoluntariesByFlowIdQueryVariables
  >(GetCollectVoluntariesByFlowIdDocument, options);
}
export function useGetCollectVoluntariesByFlowIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetCollectVoluntariesByFlowIdQuery,
    GetCollectVoluntariesByFlowIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetCollectVoluntariesByFlowIdQuery,
    GetCollectVoluntariesByFlowIdQueryVariables
  >(GetCollectVoluntariesByFlowIdDocument, options);
}
export type GetCollectVoluntariesByFlowIdQueryHookResult = ReturnType<
  typeof useGetCollectVoluntariesByFlowIdQuery
>;
export type GetCollectVoluntariesByFlowIdLazyQueryHookResult = ReturnType<
  typeof useGetCollectVoluntariesByFlowIdLazyQuery
>;
export type GetCollectVoluntariesByFlowIdQueryResult = Apollo.QueryResult<
  GetCollectVoluntariesByFlowIdQuery,
  GetCollectVoluntariesByFlowIdQueryVariables
>;
export const GetDropOffCollectTypeByContractIdDocument = gql`
  query getDropOffCollectTypeByContractId($contractId: ID!) {
    getDropOffCollectType(contractId: $contractId) {
      entityTypeName
      uniqueId
      grammaticalGender
      name
      originalId
    }
  }
`;

/**
 * __useGetDropOffCollectTypeByContractIdQuery__
 *
 * To run a query within a React component, call `useGetDropOffCollectTypeByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDropOffCollectTypeByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDropOffCollectTypeByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetDropOffCollectTypeByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetDropOffCollectTypeByContractIdQuery,
    GetDropOffCollectTypeByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetDropOffCollectTypeByContractIdQuery,
    GetDropOffCollectTypeByContractIdQueryVariables
  >(GetDropOffCollectTypeByContractIdDocument, options);
}
export function useGetDropOffCollectTypeByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetDropOffCollectTypeByContractIdQuery,
    GetDropOffCollectTypeByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetDropOffCollectTypeByContractIdQuery,
    GetDropOffCollectTypeByContractIdQueryVariables
  >(GetDropOffCollectTypeByContractIdDocument, options);
}
export type GetDropOffCollectTypeByContractIdQueryHookResult = ReturnType<
  typeof useGetDropOffCollectTypeByContractIdQuery
>;
export type GetDropOffCollectTypeByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetDropOffCollectTypeByContractIdLazyQuery
>;
export type GetDropOffCollectTypeByContractIdQueryResult = Apollo.QueryResult<
  GetDropOffCollectTypeByContractIdQuery,
  GetDropOffCollectTypeByContractIdQueryVariables
>;
export const GetActiveFlowsByContractAndCityAndSectorizationsDocument = gql`
  query getActiveFlowsByContractAndCityAndSectorizations(
    $contractId: ID
    $sectorizationsId: [ID]
    $citiesId: [ID]
  ) {
    flows(
      filters: {
        contract: { id: { eq: $contractId } }
        isActivated: { eq: true }
      }
      sort: "name:asc"
    ) {
      data {
        id
        attributes {
          name
          pickUpDays(
            filters: {
              sectorizations: { id: { in: $sectorizationsId } }
              cities: { id: { in: $citiesId } }
            }
          ) {
            data {
              id
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetActiveFlowsByContractAndCityAndSectorizationsQuery__
 *
 * To run a query within a React component, call `useGetActiveFlowsByContractAndCityAndSectorizationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetActiveFlowsByContractAndCityAndSectorizationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetActiveFlowsByContractAndCityAndSectorizationsQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      sectorizationsId: // value for 'sectorizationsId'
 *      citiesId: // value for 'citiesId'
 *   },
 * });
 */
export function useGetActiveFlowsByContractAndCityAndSectorizationsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetActiveFlowsByContractAndCityAndSectorizationsQuery,
    GetActiveFlowsByContractAndCityAndSectorizationsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetActiveFlowsByContractAndCityAndSectorizationsQuery,
    GetActiveFlowsByContractAndCityAndSectorizationsQueryVariables
  >(GetActiveFlowsByContractAndCityAndSectorizationsDocument, options);
}
export function useGetActiveFlowsByContractAndCityAndSectorizationsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetActiveFlowsByContractAndCityAndSectorizationsQuery,
    GetActiveFlowsByContractAndCityAndSectorizationsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetActiveFlowsByContractAndCityAndSectorizationsQuery,
    GetActiveFlowsByContractAndCityAndSectorizationsQueryVariables
  >(GetActiveFlowsByContractAndCityAndSectorizationsDocument, options);
}
export type GetActiveFlowsByContractAndCityAndSectorizationsQueryHookResult =
  ReturnType<typeof useGetActiveFlowsByContractAndCityAndSectorizationsQuery>;
export type GetActiveFlowsByContractAndCityAndSectorizationsLazyQueryHookResult =
  ReturnType<
    typeof useGetActiveFlowsByContractAndCityAndSectorizationsLazyQuery
  >;
export type GetActiveFlowsByContractAndCityAndSectorizationsQueryResult =
  Apollo.QueryResult<
    GetActiveFlowsByContractAndCityAndSectorizationsQuery,
    GetActiveFlowsByContractAndCityAndSectorizationsQueryVariables
  >;
export const GetInformationMessageByIdDocument = gql`
  query getInformationMessageById($informationMessageId: ID) {
    informationMessage(id: $informationMessageId) {
      data {
        id
        attributes {
          dateStart
          dateEnd
          infoMessage
          pickUpDays {
            data {
              id
              attributes {
                name
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetInformationMessageByIdQuery__
 *
 * To run a query within a React component, call `useGetInformationMessageByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInformationMessageByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInformationMessageByIdQuery({
 *   variables: {
 *      informationMessageId: // value for 'informationMessageId'
 *   },
 * });
 */
export function useGetInformationMessageByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetInformationMessageByIdQuery,
    GetInformationMessageByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetInformationMessageByIdQuery,
    GetInformationMessageByIdQueryVariables
  >(GetInformationMessageByIdDocument, options);
}
export function useGetInformationMessageByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetInformationMessageByIdQuery,
    GetInformationMessageByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetInformationMessageByIdQuery,
    GetInformationMessageByIdQueryVariables
  >(GetInformationMessageByIdDocument, options);
}
export type GetInformationMessageByIdQueryHookResult = ReturnType<
  typeof useGetInformationMessageByIdQuery
>;
export type GetInformationMessageByIdLazyQueryHookResult = ReturnType<
  typeof useGetInformationMessageByIdLazyQuery
>;
export type GetInformationMessageByIdQueryResult = Apollo.QueryResult<
  GetInformationMessageByIdQuery,
  GetInformationMessageByIdQueryVariables
>;
export const GetInformationMessagesByContractIdDocument = gql`
  query getInformationMessagesByContractId(
    $contractId: ID!
    $pickUpDaysId: ID
    $pagination: PaginationArg
    $sort: [String]
  ) {
    informationMessages(
      filters: {
        pickUpDays: {
          pickUpDayService: { contract: { id: { eq: $contractId } } }
          id: { eq: $pickUpDaysId }
        }
      }
      pagination: $pagination
      sort: $sort
    ) {
      meta {
        pagination {
          page
          pageCount
          pageSize
          total
        }
      }
      data {
        id
        attributes {
          infoMessage
          pickUpDays {
            data {
              id
              attributes {
                name
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetInformationMessagesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetInformationMessagesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInformationMessagesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInformationMessagesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      pickUpDaysId: // value for 'pickUpDaysId'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetInformationMessagesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetInformationMessagesByContractIdQuery,
    GetInformationMessagesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetInformationMessagesByContractIdQuery,
    GetInformationMessagesByContractIdQueryVariables
  >(GetInformationMessagesByContractIdDocument, options);
}
export function useGetInformationMessagesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetInformationMessagesByContractIdQuery,
    GetInformationMessagesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetInformationMessagesByContractIdQuery,
    GetInformationMessagesByContractIdQueryVariables
  >(GetInformationMessagesByContractIdDocument, options);
}
export type GetInformationMessagesByContractIdQueryHookResult = ReturnType<
  typeof useGetInformationMessagesByContractIdQuery
>;
export type GetInformationMessagesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetInformationMessagesByContractIdLazyQuery
>;
export type GetInformationMessagesByContractIdQueryResult = Apollo.QueryResult<
  GetInformationMessagesByContractIdQuery,
  GetInformationMessagesByContractIdQueryVariables
>;
export const GetPickUpDayByIdDocument = gql`
  query getPickUpDayById($pickUpDayId: ID) {
    pickUpDay(id: $pickUpDayId) {
      data {
        id
        attributes {
          name
          periodicity
          advancedSelection
          pickUpHours
          includeHoliday
          complementaryMention
          buttonLabel
          externalLink
          request {
            data {
              id
            }
          }
          flow {
            data {
              id
              attributes {
                name
                recyclingGesture
              }
            }
          }
          sectorizations {
            data {
              id
              attributes {
                name
                description
                polygonCoordinates
              }
            }
          }
          cities {
            data {
              id
              attributes {
                name
              }
            }
          }
          periodicity
          advancedSelection
          collectDoorToDoor {
            data {
              id
              attributes {
                name
                picto {
                  data {
                    id
                  }
                }
              }
            }
          }
          collectVoluntary {
            data {
              id
              attributes {
                name
                picto {
                  data {
                    id
                  }
                }
              }
            }
          }
          audiences {
            data {
              id
              attributes {
                type
                isActive
              }
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetPickUpDayByIdQuery__
 *
 * To run a query within a React component, call `useGetPickUpDayByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPickUpDayByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPickUpDayByIdQuery({
 *   variables: {
 *      pickUpDayId: // value for 'pickUpDayId'
 *   },
 * });
 */
export function useGetPickUpDayByIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetPickUpDayByIdQuery,
    GetPickUpDayByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetPickUpDayByIdQuery, GetPickUpDayByIdQueryVariables>(
    GetPickUpDayByIdDocument,
    options,
  );
}
export function useGetPickUpDayByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPickUpDayByIdQuery,
    GetPickUpDayByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetPickUpDayByIdQuery,
    GetPickUpDayByIdQueryVariables
  >(GetPickUpDayByIdDocument, options);
}
export type GetPickUpDayByIdQueryHookResult = ReturnType<
  typeof useGetPickUpDayByIdQuery
>;
export type GetPickUpDayByIdLazyQueryHookResult = ReturnType<
  typeof useGetPickUpDayByIdLazyQuery
>;
export type GetPickUpDayByIdQueryResult = Apollo.QueryResult<
  GetPickUpDayByIdQuery,
  GetPickUpDayByIdQueryVariables
>;
export const GetPickUpDaysByContractIdDocument = gql`
  query getPickUpDaysByContractId(
    $contractId: ID
    $sort: [String]
    $pagination: PaginationArg
  ) {
    pickUpDays(
      filters: { pickUpDayService: { contract: { id: { eq: $contractId } } } }
      sort: $sort
      pagination: $pagination
    ) {
      data {
        id
        attributes {
          name
          updatedAt
          cities {
            data {
              id
              attributes {
                name
              }
            }
          }
          collectDoorToDoor {
            data {
              id
              attributes {
                name
                picto {
                  data {
                    id
                  }
                }
              }
            }
          }
          collectVoluntary {
            data {
              id
              attributes {
                name
                picto {
                  data {
                    id
                  }
                }
              }
            }
          }
          flow {
            data {
              attributes {
                name
              }
            }
          }
          sectorizations {
            data {
              attributes {
                name
              }
            }
          }
        }
      }
      meta {
        pagination {
          page
          pageCount
          pageSize
          total
        }
      }
    }
  }
`;

/**
 * __useGetPickUpDaysByContractIdQuery__
 *
 * To run a query within a React component, call `useGetPickUpDaysByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPickUpDaysByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPickUpDaysByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useGetPickUpDaysByContractIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetPickUpDaysByContractIdQuery,
    GetPickUpDaysByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetPickUpDaysByContractIdQuery,
    GetPickUpDaysByContractIdQueryVariables
  >(GetPickUpDaysByContractIdDocument, options);
}
export function useGetPickUpDaysByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPickUpDaysByContractIdQuery,
    GetPickUpDaysByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetPickUpDaysByContractIdQuery,
    GetPickUpDaysByContractIdQueryVariables
  >(GetPickUpDaysByContractIdDocument, options);
}
export type GetPickUpDaysByContractIdQueryHookResult = ReturnType<
  typeof useGetPickUpDaysByContractIdQuery
>;
export type GetPickUpDaysByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetPickUpDaysByContractIdLazyQuery
>;
export type GetPickUpDaysByContractIdQueryResult = Apollo.QueryResult<
  GetPickUpDaysByContractIdQuery,
  GetPickUpDaysByContractIdQueryVariables
>;
export const GetSearchCitiesByContractIdDocument = gql`
  query getSearchCitiesByContractId($searchTerm: String!, $contractId: ID!) {
    searchCities(searchTerm: $searchTerm, contractId: $contractId) {
      id
      name
    }
  }
`;

/**
 * __useGetSearchCitiesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetSearchCitiesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSearchCitiesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSearchCitiesByContractIdQuery({
 *   variables: {
 *      searchTerm: // value for 'searchTerm'
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetSearchCitiesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetSearchCitiesByContractIdQuery,
    GetSearchCitiesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetSearchCitiesByContractIdQuery,
    GetSearchCitiesByContractIdQueryVariables
  >(GetSearchCitiesByContractIdDocument, options);
}
export function useGetSearchCitiesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetSearchCitiesByContractIdQuery,
    GetSearchCitiesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetSearchCitiesByContractIdQuery,
    GetSearchCitiesByContractIdQueryVariables
  >(GetSearchCitiesByContractIdDocument, options);
}
export type GetSearchCitiesByContractIdQueryHookResult = ReturnType<
  typeof useGetSearchCitiesByContractIdQuery
>;
export type GetSearchCitiesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetSearchCitiesByContractIdLazyQuery
>;
export type GetSearchCitiesByContractIdQueryResult = Apollo.QueryResult<
  GetSearchCitiesByContractIdQuery,
  GetSearchCitiesByContractIdQueryVariables
>;
export const GetSectorizationsPickUpDayByContractIdDocument = gql`
  query getSectorizationsPickUpDayByContractId($contractId: ID) {
    sectorizations(
      filters: { contract: { id: { eq: $contractId } } }
      sort: "createdAt:desc"
    ) {
      data {
        id
        attributes {
          name
        }
      }
    }
  }
`;

/**
 * __useGetSectorizationsPickUpDayByContractIdQuery__
 *
 * To run a query within a React component, call `useGetSectorizationsPickUpDayByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSectorizationsPickUpDayByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSectorizationsPickUpDayByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *   },
 * });
 */
export function useGetSectorizationsPickUpDayByContractIdQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetSectorizationsPickUpDayByContractIdQuery,
    GetSectorizationsPickUpDayByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetSectorizationsPickUpDayByContractIdQuery,
    GetSectorizationsPickUpDayByContractIdQueryVariables
  >(GetSectorizationsPickUpDayByContractIdDocument, options);
}
export function useGetSectorizationsPickUpDayByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetSectorizationsPickUpDayByContractIdQuery,
    GetSectorizationsPickUpDayByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetSectorizationsPickUpDayByContractIdQuery,
    GetSectorizationsPickUpDayByContractIdQueryVariables
  >(GetSectorizationsPickUpDayByContractIdDocument, options);
}
export type GetSectorizationsPickUpDayByContractIdQueryHookResult = ReturnType<
  typeof useGetSectorizationsPickUpDayByContractIdQuery
>;
export type GetSectorizationsPickUpDayByContractIdLazyQueryHookResult =
  ReturnType<typeof useGetSectorizationsPickUpDayByContractIdLazyQuery>;
export type GetSectorizationsPickUpDayByContractIdQueryResult =
  Apollo.QueryResult<
    GetSectorizationsPickUpDayByContractIdQuery,
    GetSectorizationsPickUpDayByContractIdQueryVariables
  >;
export const UpdateInformationMessageByIdDocument = gql`
  mutation updateInformationMessageById(
    $updateInformationMessageId: ID!
    $data: InformationMessageInput!
  ) {
    updateInformationMessage(id: $updateInformationMessageId, data: $data) {
      data {
        id
        attributes {
          infoMessage
          dateStart
          dateEnd
          pickUpDays {
            data {
              id
              attributes {
                name
              }
            }
          }
        }
      }
    }
  }
`;
export type UpdateInformationMessageByIdMutationFn = Apollo.MutationFunction<
  UpdateInformationMessageByIdMutation,
  UpdateInformationMessageByIdMutationVariables
>;

/**
 * __useUpdateInformationMessageByIdMutation__
 *
 * To run a mutation, you first call `useUpdateInformationMessageByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateInformationMessageByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateInformationMessageByIdMutation, { data, loading, error }] = useUpdateInformationMessageByIdMutation({
 *   variables: {
 *      updateInformationMessageId: // value for 'updateInformationMessageId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateInformationMessageByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateInformationMessageByIdMutation,
    UpdateInformationMessageByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateInformationMessageByIdMutation,
    UpdateInformationMessageByIdMutationVariables
  >(UpdateInformationMessageByIdDocument, options);
}
export type UpdateInformationMessageByIdMutationHookResult = ReturnType<
  typeof useUpdateInformationMessageByIdMutation
>;
export type UpdateInformationMessageByIdMutationResult =
  Apollo.MutationResult<UpdateInformationMessageByIdMutation>;
export type UpdateInformationMessageByIdMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateInformationMessageByIdMutation,
    UpdateInformationMessageByIdMutationVariables
  >;
export const UpdatePickUpDayByIdDocument = gql`
  mutation updatePickUpDayById(
    $updatePickUpDayId: ID!
    $data: PickUpDayInput!
  ) {
    updatePickUpDay(id: $updatePickUpDayId, data: $data) {
      data {
        id
        attributes {
          name
          description
          periodicity
          advancedSelection
          pickUpHours
          includeHoliday
          complementaryMention
          buttonLabel
          externalLink
          request {
            data {
              id
            }
          }
          flow {
            data {
              id
              attributes {
                name
              }
            }
          }
          sectorizations {
            data {
              id
              attributes {
                name
                description
                polygonCoordinates
              }
            }
          }
          audiences {
            data {
              id
            }
          }
        }
      }
    }
  }
`;
export type UpdatePickUpDayByIdMutationFn = Apollo.MutationFunction<
  UpdatePickUpDayByIdMutation,
  UpdatePickUpDayByIdMutationVariables
>;

/**
 * __useUpdatePickUpDayByIdMutation__
 *
 * To run a mutation, you first call `useUpdatePickUpDayByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePickUpDayByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePickUpDayByIdMutation, { data, loading, error }] = useUpdatePickUpDayByIdMutation({
 *   variables: {
 *      updatePickUpDayId: // value for 'updatePickUpDayId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdatePickUpDayByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdatePickUpDayByIdMutation,
    UpdatePickUpDayByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdatePickUpDayByIdMutation,
    UpdatePickUpDayByIdMutationVariables
  >(UpdatePickUpDayByIdDocument, options);
}
export type UpdatePickUpDayByIdMutationHookResult = ReturnType<
  typeof useUpdatePickUpDayByIdMutation
>;
export type UpdatePickUpDayByIdMutationResult =
  Apollo.MutationResult<UpdatePickUpDayByIdMutation>;
export type UpdatePickUpDayByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdatePickUpDayByIdMutation,
  UpdatePickUpDayByIdMutationVariables
>;
export const CreateYwsFormDocument = gql`
  mutation createYwsForm($data: YesWeScanFormInput!) {
    createYesWeScanForm(data: $data) {
      data {
        id
      }
    }
  }
`;
export type CreateYwsFormMutationFn = Apollo.MutationFunction<
  CreateYwsFormMutation,
  CreateYwsFormMutationVariables
>;

/**
 * __useCreateYwsFormMutation__
 *
 * To run a mutation, you first call `useCreateYwsFormMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateYwsFormMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createYwsFormMutation, { data, loading, error }] = useCreateYwsFormMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateYwsFormMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateYwsFormMutation,
    CreateYwsFormMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateYwsFormMutation,
    CreateYwsFormMutationVariables
  >(CreateYwsFormDocument, options);
}
export type CreateYwsFormMutationHookResult = ReturnType<
  typeof useCreateYwsFormMutation
>;
export type CreateYwsFormMutationResult =
  Apollo.MutationResult<CreateYwsFormMutation>;
export type CreateYwsFormMutationOptions = Apollo.BaseMutationOptions<
  CreateYwsFormMutation,
  CreateYwsFormMutationVariables
>;
export const CreateYwsQrCodeDocument = gql`
  mutation createYwsQrCode($data: YesWeScanQrCodeInput!) {
    createYesWeScanQrCode(data: $data) {
      data {
        id
      }
    }
  }
`;
export type CreateYwsQrCodeMutationFn = Apollo.MutationFunction<
  CreateYwsQrCodeMutation,
  CreateYwsQrCodeMutationVariables
>;

/**
 * __useCreateYwsQrCodeMutation__
 *
 * To run a mutation, you first call `useCreateYwsQrCodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateYwsQrCodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createYwsQrCodeMutation, { data, loading, error }] = useCreateYwsQrCodeMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateYwsQrCodeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateYwsQrCodeMutation,
    CreateYwsQrCodeMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateYwsQrCodeMutation,
    CreateYwsQrCodeMutationVariables
  >(CreateYwsQrCodeDocument, options);
}
export type CreateYwsQrCodeMutationHookResult = ReturnType<
  typeof useCreateYwsQrCodeMutation
>;
export type CreateYwsQrCodeMutationResult =
  Apollo.MutationResult<CreateYwsQrCodeMutation>;
export type CreateYwsQrCodeMutationOptions = Apollo.BaseMutationOptions<
  CreateYwsQrCodeMutation,
  CreateYwsQrCodeMutationVariables
>;
export const GetYwsFormByIdDocument = gql`
  query getYwsFormById($ywsFormId: ID!) {
    yesWeScanForm(id: $ywsFormId) {
      data {
        id
        attributes {
          logo {
            data {
              id
              attributes {
                name
                alternativeText
                caption
                width
                height
                formats
                hash
                ext
                mime
                size
                url
                previewUrl
                provider
                provider_metadata
                createdAt
                updatedAt
              }
            }
          }
          reportButtons
          pictureStatus
          thankYouMessage
          displayEndingButton
          endingButtonIntroduction
          endingButtonLabel
          endingButtonLink
          hasEmail
          hasTsms
          mailRecipients
        }
      }
    }
  }
`;

/**
 * __useGetYwsFormByIdQuery__
 *
 * To run a query within a React component, call `useGetYwsFormByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetYwsFormByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetYwsFormByIdQuery({
 *   variables: {
 *      ywsFormId: // value for 'ywsFormId'
 *   },
 * });
 */
export function useGetYwsFormByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetYwsFormByIdQuery,
    GetYwsFormByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetYwsFormByIdQuery, GetYwsFormByIdQueryVariables>(
    GetYwsFormByIdDocument,
    options,
  );
}
export function useGetYwsFormByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetYwsFormByIdQuery,
    GetYwsFormByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetYwsFormByIdQuery, GetYwsFormByIdQueryVariables>(
    GetYwsFormByIdDocument,
    options,
  );
}
export type GetYwsFormByIdQueryHookResult = ReturnType<
  typeof useGetYwsFormByIdQuery
>;
export type GetYwsFormByIdLazyQueryHookResult = ReturnType<
  typeof useGetYwsFormByIdLazyQuery
>;
export type GetYwsFormByIdQueryResult = Apollo.QueryResult<
  GetYwsFormByIdQuery,
  GetYwsFormByIdQueryVariables
>;
export const GetYwsQrCodesDocument = gql`
  query getYwsQrCodes(
    $filters: YesWeScanQrCodeFiltersInput
    $pagination: PaginationArg
    $sort: [String]
  ) {
    yesWeScanQrCodes(filters: $filters, pagination: $pagination, sort: $sort) {
      data {
        id
        attributes {
          name
          address
          city
          lat
          long
          typeAssociation
          dropOffMap {
            data {
              id
              attributes {
                address
                name
                hasCustomAddress
                customAddress
              }
            }
          }
        }
      }
      meta {
        pagination {
          page
          pageCount
          pageSize
          total
        }
      }
    }
  }
`;

/**
 * __useGetYwsQrCodesQuery__
 *
 * To run a query within a React component, call `useGetYwsQrCodesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetYwsQrCodesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetYwsQrCodesQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetYwsQrCodesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetYwsQrCodesQuery,
    GetYwsQrCodesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetYwsQrCodesQuery, GetYwsQrCodesQueryVariables>(
    GetYwsQrCodesDocument,
    options,
  );
}
export function useGetYwsQrCodesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetYwsQrCodesQuery,
    GetYwsQrCodesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetYwsQrCodesQuery, GetYwsQrCodesQueryVariables>(
    GetYwsQrCodesDocument,
    options,
  );
}
export type GetYwsQrCodesQueryHookResult = ReturnType<
  typeof useGetYwsQrCodesQuery
>;
export type GetYwsQrCodesLazyQueryHookResult = ReturnType<
  typeof useGetYwsQrCodesLazyQuery
>;
export type GetYwsQrCodesQueryResult = Apollo.QueryResult<
  GetYwsQrCodesQuery,
  GetYwsQrCodesQueryVariables
>;
export const GetYwsQrCodeByIdDocument = gql`
  query getYwsQrCodeById($ywsQrCodeId: ID!) {
    yesWeScanQrCode(id: $ywsQrCodeId) {
      data {
        id
        attributes {
          qrCodeUrl
        }
      }
    }
  }
`;

/**
 * __useGetYwsQrCodeByIdQuery__
 *
 * To run a query within a React component, call `useGetYwsQrCodeByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetYwsQrCodeByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetYwsQrCodeByIdQuery({
 *   variables: {
 *      ywsQrCodeId: // value for 'ywsQrCodeId'
 *   },
 * });
 */
export function useGetYwsQrCodeByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetYwsQrCodeByIdQuery,
    GetYwsQrCodeByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetYwsQrCodeByIdQuery, GetYwsQrCodeByIdQueryVariables>(
    GetYwsQrCodeByIdDocument,
    options,
  );
}
export function useGetYwsQrCodeByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetYwsQrCodeByIdQuery,
    GetYwsQrCodeByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetYwsQrCodeByIdQuery,
    GetYwsQrCodeByIdQueryVariables
  >(GetYwsQrCodeByIdDocument, options);
}
export type GetYwsQrCodeByIdQueryHookResult = ReturnType<
  typeof useGetYwsQrCodeByIdQuery
>;
export type GetYwsQrCodeByIdLazyQueryHookResult = ReturnType<
  typeof useGetYwsQrCodeByIdLazyQuery
>;
export type GetYwsQrCodeByIdQueryResult = Apollo.QueryResult<
  GetYwsQrCodeByIdQuery,
  GetYwsQrCodeByIdQueryVariables
>;
export const GetYwsQrCodesByServiceIdDocument = gql`
  query getYwsQrCodesByServiceId($ywsServiceId: ID!) {
    yesWeScanQrCodes(
      filters: { yesWeScanService: { id: { eq: $ywsServiceId } } }
      pagination: { limit: 999999 }
    ) {
      data {
        id
        attributes {
          qrCodeUrl
        }
      }
    }
  }
`;

/**
 * __useGetYwsQrCodesByServiceIdQuery__
 *
 * To run a query within a React component, call `useGetYwsQrCodesByServiceIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetYwsQrCodesByServiceIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetYwsQrCodesByServiceIdQuery({
 *   variables: {
 *      ywsServiceId: // value for 'ywsServiceId'
 *   },
 * });
 */
export function useGetYwsQrCodesByServiceIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetYwsQrCodesByServiceIdQuery,
    GetYwsQrCodesByServiceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetYwsQrCodesByServiceIdQuery,
    GetYwsQrCodesByServiceIdQueryVariables
  >(GetYwsQrCodesByServiceIdDocument, options);
}
export function useGetYwsQrCodesByServiceIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetYwsQrCodesByServiceIdQuery,
    GetYwsQrCodesByServiceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetYwsQrCodesByServiceIdQuery,
    GetYwsQrCodesByServiceIdQueryVariables
  >(GetYwsQrCodesByServiceIdDocument, options);
}
export type GetYwsQrCodesByServiceIdQueryHookResult = ReturnType<
  typeof useGetYwsQrCodesByServiceIdQuery
>;
export type GetYwsQrCodesByServiceIdLazyQueryHookResult = ReturnType<
  typeof useGetYwsQrCodesByServiceIdLazyQuery
>;
export type GetYwsQrCodesByServiceIdQueryResult = Apollo.QueryResult<
  GetYwsQrCodesByServiceIdQuery,
  GetYwsQrCodesByServiceIdQueryVariables
>;
export const GetYwsServiceByIdDocument = gql`
  query getYwsServiceById($serviceId: ID!) {
    yesWeScanService(id: $serviceId) {
      data {
        id
        attributes {
          startDate
          endDate
          serviceName
          shortName
          yesWeScanForm {
            data {
              id
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetYwsServiceByIdQuery__
 *
 * To run a query within a React component, call `useGetYwsServiceByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetYwsServiceByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetYwsServiceByIdQuery({
 *   variables: {
 *      serviceId: // value for 'serviceId'
 *   },
 * });
 */
export function useGetYwsServiceByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetYwsServiceByIdQuery,
    GetYwsServiceByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetYwsServiceByIdQuery,
    GetYwsServiceByIdQueryVariables
  >(GetYwsServiceByIdDocument, options);
}
export function useGetYwsServiceByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetYwsServiceByIdQuery,
    GetYwsServiceByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetYwsServiceByIdQuery,
    GetYwsServiceByIdQueryVariables
  >(GetYwsServiceByIdDocument, options);
}
export type GetYwsServiceByIdQueryHookResult = ReturnType<
  typeof useGetYwsServiceByIdQuery
>;
export type GetYwsServiceByIdLazyQueryHookResult = ReturnType<
  typeof useGetYwsServiceByIdLazyQuery
>;
export type GetYwsServiceByIdQueryResult = Apollo.QueryResult<
  GetYwsServiceByIdQuery,
  GetYwsServiceByIdQueryVariables
>;
export const GetYwsServicesByContractIdDocument = gql`
  query getYwsServicesByContractId($contractId: ID!, $today: DateTime) {
    yesWeScanServices(
      filters: {
        contract: { id: { eq: $contractId } }
        startDate: { lte: $today }
        endDate: { gte: $today }
      }
    ) {
      data {
        id
        attributes {
          serviceName
          shortName
        }
      }
    }
  }
`;

/**
 * __useGetYwsServicesByContractIdQuery__
 *
 * To run a query within a React component, call `useGetYwsServicesByContractIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetYwsServicesByContractIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetYwsServicesByContractIdQuery({
 *   variables: {
 *      contractId: // value for 'contractId'
 *      today: // value for 'today'
 *   },
 * });
 */
export function useGetYwsServicesByContractIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetYwsServicesByContractIdQuery,
    GetYwsServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetYwsServicesByContractIdQuery,
    GetYwsServicesByContractIdQueryVariables
  >(GetYwsServicesByContractIdDocument, options);
}
export function useGetYwsServicesByContractIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetYwsServicesByContractIdQuery,
    GetYwsServicesByContractIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetYwsServicesByContractIdQuery,
    GetYwsServicesByContractIdQueryVariables
  >(GetYwsServicesByContractIdDocument, options);
}
export type GetYwsServicesByContractIdQueryHookResult = ReturnType<
  typeof useGetYwsServicesByContractIdQuery
>;
export type GetYwsServicesByContractIdLazyQueryHookResult = ReturnType<
  typeof useGetYwsServicesByContractIdLazyQuery
>;
export type GetYwsServicesByContractIdQueryResult = Apollo.QueryResult<
  GetYwsServicesByContractIdQuery,
  GetYwsServicesByContractIdQueryVariables
>;
export const GetYwsUnassociatedQrCodesByServiceIdDocument = gql`
  query getYwsUnassociatedQrCodesByServiceId(
    $ywsServiceId: ID!
    $pagination: PaginationArg
  ) {
    yesWeScanQrCodes(
      filters: {
        yesWeScanService: { id: { eq: $ywsServiceId } }
        typeAssociation: { null: true }
      }
      pagination: $pagination
    ) {
      data {
        id
      }
      meta {
        pagination {
          page
          pageCount
          pageSize
          total
        }
      }
    }
  }
`;

/**
 * __useGetYwsUnassociatedQrCodesByServiceIdQuery__
 *
 * To run a query within a React component, call `useGetYwsUnassociatedQrCodesByServiceIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetYwsUnassociatedQrCodesByServiceIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetYwsUnassociatedQrCodesByServiceIdQuery({
 *   variables: {
 *      ywsServiceId: // value for 'ywsServiceId'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useGetYwsUnassociatedQrCodesByServiceIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetYwsUnassociatedQrCodesByServiceIdQuery,
    GetYwsUnassociatedQrCodesByServiceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetYwsUnassociatedQrCodesByServiceIdQuery,
    GetYwsUnassociatedQrCodesByServiceIdQueryVariables
  >(GetYwsUnassociatedQrCodesByServiceIdDocument, options);
}
export function useGetYwsUnassociatedQrCodesByServiceIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetYwsUnassociatedQrCodesByServiceIdQuery,
    GetYwsUnassociatedQrCodesByServiceIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetYwsUnassociatedQrCodesByServiceIdQuery,
    GetYwsUnassociatedQrCodesByServiceIdQueryVariables
  >(GetYwsUnassociatedQrCodesByServiceIdDocument, options);
}
export type GetYwsUnassociatedQrCodesByServiceIdQueryHookResult = ReturnType<
  typeof useGetYwsUnassociatedQrCodesByServiceIdQuery
>;
export type GetYwsUnassociatedQrCodesByServiceIdLazyQueryHookResult =
  ReturnType<typeof useGetYwsUnassociatedQrCodesByServiceIdLazyQuery>;
export type GetYwsUnassociatedQrCodesByServiceIdQueryResult =
  Apollo.QueryResult<
    GetYwsUnassociatedQrCodesByServiceIdQuery,
    GetYwsUnassociatedQrCodesByServiceIdQueryVariables
  >;
export const UpdateYwsFormByIdDocument = gql`
  mutation updateYwsFormById($ywsFormId: ID!, $data: YesWeScanFormInput!) {
    updateYesWeScanForm(id: $ywsFormId, data: $data) {
      data {
        id
      }
    }
  }
`;
export type UpdateYwsFormByIdMutationFn = Apollo.MutationFunction<
  UpdateYwsFormByIdMutation,
  UpdateYwsFormByIdMutationVariables
>;

/**
 * __useUpdateYwsFormByIdMutation__
 *
 * To run a mutation, you first call `useUpdateYwsFormByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateYwsFormByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateYwsFormByIdMutation, { data, loading, error }] = useUpdateYwsFormByIdMutation({
 *   variables: {
 *      ywsFormId: // value for 'ywsFormId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateYwsFormByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateYwsFormByIdMutation,
    UpdateYwsFormByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateYwsFormByIdMutation,
    UpdateYwsFormByIdMutationVariables
  >(UpdateYwsFormByIdDocument, options);
}
export type UpdateYwsFormByIdMutationHookResult = ReturnType<
  typeof useUpdateYwsFormByIdMutation
>;
export type UpdateYwsFormByIdMutationResult =
  Apollo.MutationResult<UpdateYwsFormByIdMutation>;
export type UpdateYwsFormByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateYwsFormByIdMutation,
  UpdateYwsFormByIdMutationVariables
>;
export const UpdateYwsQrCodeByIdDocument = gql`
  mutation updateYwsQrCodeById(
    $ywsQrCodeId: ID!
    $data: YesWeScanQrCodeInput!
  ) {
    updateYesWeScanQrCode(id: $ywsQrCodeId, data: $data) {
      data {
        id
        attributes {
          qrCodeUrl
        }
      }
    }
  }
`;
export type UpdateYwsQrCodeByIdMutationFn = Apollo.MutationFunction<
  UpdateYwsQrCodeByIdMutation,
  UpdateYwsQrCodeByIdMutationVariables
>;

/**
 * __useUpdateYwsQrCodeByIdMutation__
 *
 * To run a mutation, you first call `useUpdateYwsQrCodeByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateYwsQrCodeByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateYwsQrCodeByIdMutation, { data, loading, error }] = useUpdateYwsQrCodeByIdMutation({
 *   variables: {
 *      ywsQrCodeId: // value for 'ywsQrCodeId'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateYwsQrCodeByIdMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateYwsQrCodeByIdMutation,
    UpdateYwsQrCodeByIdMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateYwsQrCodeByIdMutation,
    UpdateYwsQrCodeByIdMutationVariables
  >(UpdateYwsQrCodeByIdDocument, options);
}
export type UpdateYwsQrCodeByIdMutationHookResult = ReturnType<
  typeof useUpdateYwsQrCodeByIdMutation
>;
export type UpdateYwsQrCodeByIdMutationResult =
  Apollo.MutationResult<UpdateYwsQrCodeByIdMutation>;
export type UpdateYwsQrCodeByIdMutationOptions = Apollo.BaseMutationOptions<
  UpdateYwsQrCodeByIdMutation,
  UpdateYwsQrCodeByIdMutationVariables
>;
